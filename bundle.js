/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/ansi-html-community/index.js":
/*!***************************************************!*\
  !*** ./node_modules/ansi-html-community/index.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";


module.exports = ansiHTML

// Reference to https://github.com/sindresorhus/ansi-regex
var _regANSI = /(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/

var _defColors = {
  reset: ['fff', '000'], // [FOREGROUD_COLOR, BACKGROUND_COLOR]
  black: '000',
  red: 'ff0000',
  green: '209805',
  yellow: 'e8bf03',
  blue: '0000ff',
  magenta: 'ff00ff',
  cyan: '00ffee',
  lightgrey: 'f0f0f0',
  darkgrey: '888'
}
var _styles = {
  30: 'black',
  31: 'red',
  32: 'green',
  33: 'yellow',
  34: 'blue',
  35: 'magenta',
  36: 'cyan',
  37: 'lightgrey'
}
var _openTags = {
  '1': 'font-weight:bold', // bold
  '2': 'opacity:0.5', // dim
  '3': '<i>', // italic
  '4': '<u>', // underscore
  '8': 'display:none', // hidden
  '9': '<del>' // delete
}
var _closeTags = {
  '23': '</i>', // reset italic
  '24': '</u>', // reset underscore
  '29': '</del>' // reset delete
}

;[0, 21, 22, 27, 28, 39, 49].forEach(function (n) {
  _closeTags[n] = '</span>'
})

/**
 * Converts text with ANSI color codes to HTML markup.
 * @param {String} text
 * @returns {*}
 */
function ansiHTML (text) {
  // Returns the text if the string has no ANSI escape code.
  if (!_regANSI.test(text)) {
    return text
  }

  // Cache opened sequence.
  var ansiCodes = []
  // Replace with markup.
  var ret = text.replace(/\033\[(\d+)m/g, function (match, seq) {
    var ot = _openTags[seq]
    if (ot) {
      // If current sequence has been opened, close it.
      if (!!~ansiCodes.indexOf(seq)) { // eslint-disable-line no-extra-boolean-cast
        ansiCodes.pop()
        return '</span>'
      }
      // Open tag.
      ansiCodes.push(seq)
      return ot[0] === '<' ? ot : '<span style="' + ot + ';">'
    }

    var ct = _closeTags[seq]
    if (ct) {
      // Pop sequence
      ansiCodes.pop()
      return ct
    }
    return ''
  })

  // Make sure tags are closed.
  var l = ansiCodes.length
  ;(l > 0) && (ret += Array(l + 1).join('</span>'))

  return ret
}

/**
 * Customize colors.
 * @param {Object} colors reference to _defColors
 */
ansiHTML.setColors = function (colors) {
  if (typeof colors !== 'object') {
    throw new Error('`colors` parameter must be an Object.')
  }

  var _finalColors = {}
  for (var key in _defColors) {
    var hex = colors.hasOwnProperty(key) ? colors[key] : null
    if (!hex) {
      _finalColors[key] = _defColors[key]
      continue
    }
    if ('reset' === key) {
      if (typeof hex === 'string') {
        hex = [hex]
      }
      if (!Array.isArray(hex) || hex.length === 0 || hex.some(function (h) {
        return typeof h !== 'string'
      })) {
        throw new Error('The value of `' + key + '` property must be an Array and each item could only be a hex string, e.g.: FF0000')
      }
      var defHexColor = _defColors[key]
      if (!hex[0]) {
        hex[0] = defHexColor[0]
      }
      if (hex.length === 1 || !hex[1]) {
        hex = [hex[0]]
        hex.push(defHexColor[1])
      }

      hex = hex.slice(0, 2)
    } else if (typeof hex !== 'string') {
      throw new Error('The value of `' + key + '` property must be a hex string, e.g.: FF0000')
    }
    _finalColors[key] = hex
  }
  _setTags(_finalColors)
}

/**
 * Reset colors.
 */
ansiHTML.reset = function () {
  _setTags(_defColors)
}

/**
 * Expose tags, including open and close.
 * @type {Object}
 */
ansiHTML.tags = {}

if (Object.defineProperty) {
  Object.defineProperty(ansiHTML.tags, 'open', {
    get: function () { return _openTags }
  })
  Object.defineProperty(ansiHTML.tags, 'close', {
    get: function () { return _closeTags }
  })
} else {
  ansiHTML.tags.open = _openTags
  ansiHTML.tags.close = _closeTags
}

function _setTags (colors) {
  // reset all
  _openTags['0'] = 'font-weight:normal;opacity:1;color:#' + colors.reset[0] + ';background:#' + colors.reset[1]
  // inverse
  _openTags['7'] = 'color:#' + colors.reset[1] + ';background:#' + colors.reset[0]
  // dark grey
  _openTags['90'] = 'color:#' + colors.darkgrey

  for (var code in _styles) {
    var color = _styles[code]
    var oriColor = colors[color] || '000'
    _openTags[code] = 'color:#' + oriColor
    code = parseInt(code)
    _openTags[(code + 10).toString()] = 'background:#' + oriColor
  }
}

ansiHTML.reset()


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/styles.css":
/*!**************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles.css ***!
  \**************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/getUrl.js */ "./node_modules/css-loader/dist/runtime/getUrl.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2__);
// Imports



var ___CSS_LOADER_URL_IMPORT_0___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/Webdings.ttf */ "./src/fonts/Webdings.ttf"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_1___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/DotGothic16/DotGothic16-Regular.ttf */ "./src/fonts/DotGothic16/DotGothic16-Regular.ttf"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_2___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/Rubik_Maze/RubikMaze-Regular.ttf */ "./src/fonts/Rubik_Maze/RubikMaze-Regular.ttf"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_3___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/Zilla_Slab_Highlight/ZillaSlabHighlight-Bold.ttf */ "./src/fonts/Zilla_Slab_Highlight/ZillaSlabHighlight-Bold.ttf"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_4___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/Zilla_Slab_Highlight/ZillaSlabHighlight-Regular.ttf */ "./src/fonts/Zilla_Slab_Highlight/ZillaSlabHighlight-Regular.ttf"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_5___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/Big_Shoulders_Stencil_Text/static/BigShouldersStencilText-Black.ttf */ "./src/fonts/Big_Shoulders_Stencil_Text/static/BigShouldersStencilText-Black.ttf"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_6___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/Big_Shoulders_Stencil_Text/static/BigShouldersStencilText-Light.ttf */ "./src/fonts/Big_Shoulders_Stencil_Text/static/BigShouldersStencilText-Light.ttf"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_7___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/Stardos_Stencil/StardosStencil-Bold.ttf */ "./src/fonts/Stardos_Stencil/StardosStencil-Bold.ttf"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_8___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/Stardos_Stencil/StardosStencil-Regular.ttf */ "./src/fonts/Stardos_Stencil/StardosStencil-Regular.ttf"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_9___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/Open_Sans/static/OpenSans_Condensed/OpenSans_Condensed-ExtraBold.ttf */ "./src/fonts/Open_Sans/static/OpenSans_Condensed/OpenSans_Condensed-ExtraBold.ttf"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_10___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/Open_Sans/static/OpenSans/OpenSans-Bold.ttf */ "./src/fonts/Open_Sans/static/OpenSans/OpenSans-Bold.ttf"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_11___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/Open_Sans/static/OpenSans/OpenSans-Italic.ttf */ "./src/fonts/Open_Sans/static/OpenSans/OpenSans-Italic.ttf"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_12___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/Open_Sans/static/OpenSans/OpenSans-SemiBold.ttf */ "./src/fonts/Open_Sans/static/OpenSans/OpenSans-SemiBold.ttf"), __webpack_require__.b);
var ___CSS_LOADER_URL_IMPORT_13___ = new URL(/* asset import */ __webpack_require__(/*! ./fonts/Open_Sans/static/OpenSans/OpenSans-ExtraBold.ttf */ "./src/fonts/Open_Sans/static/OpenSans/OpenSans-ExtraBold.ttf"), __webpack_require__.b);
var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
var ___CSS_LOADER_URL_REPLACEMENT_0___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_0___);
var ___CSS_LOADER_URL_REPLACEMENT_1___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_1___);
var ___CSS_LOADER_URL_REPLACEMENT_2___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_2___);
var ___CSS_LOADER_URL_REPLACEMENT_3___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_3___);
var ___CSS_LOADER_URL_REPLACEMENT_4___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_4___);
var ___CSS_LOADER_URL_REPLACEMENT_5___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_5___);
var ___CSS_LOADER_URL_REPLACEMENT_6___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_6___);
var ___CSS_LOADER_URL_REPLACEMENT_7___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_7___);
var ___CSS_LOADER_URL_REPLACEMENT_8___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_8___);
var ___CSS_LOADER_URL_REPLACEMENT_9___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_9___);
var ___CSS_LOADER_URL_REPLACEMENT_10___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_10___);
var ___CSS_LOADER_URL_REPLACEMENT_11___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_11___);
var ___CSS_LOADER_URL_REPLACEMENT_12___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_12___);
var ___CSS_LOADER_URL_REPLACEMENT_13___ = _node_modules_css_loader_dist_runtime_getUrl_js__WEBPACK_IMPORTED_MODULE_2___default()(___CSS_LOADER_URL_IMPORT_13___);
// Module
___CSS_LOADER_EXPORT___.push([module.id, "/* Animation code */\n\n/* keyframes */\n\n/* To make the message text fade in and fade out */\n@keyframes messageFadeInOut {\n    0% {color: rgb(247, 20, 8); opacity: 0;}\n    35% {color: rgb(247, 20, 8); opacity: 1;}\n    50% {color: rgb(247, 20, 8); opacity: 0.65;}\n    65% {color: rgb(247, 20, 8); opacity: 1;}\n    100% {color: rgb(247, 20, 8); opacity: 0;}\n                        }\n\n/* To make the arrows flash. \nEach arrow is a character ('6') \nin the webdings font */\n@keyframes arrowsFlash {\n    /*\n    0% {color: #000; opacity: 1;}\n    50% {color: rgb(247, 20, 8); opacity: 0.7;}\n    100% {color: #000000; opacity: 0;}\n    */\n    0% {color: #000000; opacity: 0;}\n    50% {color: #000000; opacity: 1;}\n    100% {color: #000000; opacity: 0;}\n                       }\n\n/* To make the divs that contain \nthe arrows flash */\n@keyframes arrowDivFlash {\n    0% {background-color: rgb(247, 20, 8); opacity: 0;}\n    50% {background-color: rgb(247, 20, 8); opacity: 1;}\n    100% {background-color: rgb(247, 20, 8);  opacity: 0;}\n                        }\n\n\n\n/* The classes to add to an element \n(which triggers the animation) */\n\n/* Applied to <p> of id firstInfoAreaP \nand firstInfoAreaOneP\n*/\n.messageTextFadeInOut{\n    font-family: 'DotGothic16-Regular';\n    font-size: 48px;    \n    line-height: 48px;\n    padding: 0px;\n    margin: 0px;\n    animation-name: messageFadeInOut;\n    animation-duration: 1.3s;\n    animation-timing-function: linear;\n    animation-iteration-count: 1;\n                     }\n                        \n\n\n\n/* Test stuff */\n\n.testButton{\n    position: absolute;\n    left: 650px;\n    top: 150px;\n    width: 60px;\n    height: 60px;\n    z-index: 40;\n    background-color: #c70cc7;\n    box-shadow: 3px 3px 3px black;\n          }\n\n.testButton:active{   \n        transform: translateY(4px);\n        transform: translateX(4px);\n        box-shadow: black 1px 1px 1px;\n                  } \n    \n\n/* ----------- ----------- ----------- ----------- ----------- */\n\n/*Fonts*/\n\n\n@font-face {\n    font-family: 'Webdings'; /* This is a name of your choosing*/\n      src: url(" + ___CSS_LOADER_URL_REPLACEMENT_0___ + ") format('truetype');\n      /* font-weight: 600;\n      font-style: normal; */\n           }\n\n\n\n\n@font-face {\n    font-family: 'DotGothic16-Regular'; /* This is a name of your choosing*/\n      src: url(" + ___CSS_LOADER_URL_REPLACEMENT_1___ + ") format('truetype');\n      /* font-weight: 600;\n      font-style: normal; */\n           }\n\n\n\n@font-face {\n    font-family: 'RubikMaze-Regular'; /* This is a name of your choosing*/\n      src: url(" + ___CSS_LOADER_URL_REPLACEMENT_2___ + ") format('truetype');\n      /* font-weight: 600;\n      font-style: normal; */\n           }\n\n@font-face {\n    font-family: 'ZillaSlabHighlight-Bold'; /* This is a name of your choosing*/\n      src: url(" + ___CSS_LOADER_URL_REPLACEMENT_3___ + ") format('truetype');\n      /* font-weight: 600;\n      font-style: normal; */\n           }\n\n\n@font-face {\n    font-family: 'ZillaSlabHighlight-Regular'; /* This is a name of your choosing*/\n      src: url(" + ___CSS_LOADER_URL_REPLACEMENT_4___ + ") format('truetype');\n      /* font-weight: 600;\n      font-style: normal; */\n           }\n\n\n\n\n@font-face {\n    font-family: 'BigShouldersStencilText-Black'; /* This is a name of your choosing*/\n      src: url(" + ___CSS_LOADER_URL_REPLACEMENT_5___ + ") format('truetype');\n      /* font-weight: 600;\n      font-style: normal; */\n           }\n\n@font-face {\n    font-family: 'BigShouldersStencilText-Light'; /* This is a name of your choosing*/\n      src: url(" + ___CSS_LOADER_URL_REPLACEMENT_6___ + ") format('truetype');\n      /* font-weight: 600;\n      font-style: normal; */\n           }\n\n/* */\n@font-face {\n    font-family: 'StardosStencilBold'; /* This is a name of your choosing*/\n      src: url(" + ___CSS_LOADER_URL_REPLACEMENT_7___ + ") format('truetype');\n      /* font-weight: 600;\n      font-style: normal; */\n           }\n\n@font-face {\n    font-family: 'StardosStencilRegular'; /* This is a name of your choosing*/\n      src: url(" + ___CSS_LOADER_URL_REPLACEMENT_8___ + ") format('truetype');\n      /* font-weight: 600;\n      font-style: normal; */\n           }\n\n           /*------*/\n\n/*For the large buttons*/\n@font-face {\n    font-family: 'Open Sans-Condensed-ExtraBold'; /* This is a name of your choosing*/\n      src: url(" + ___CSS_LOADER_URL_REPLACEMENT_9___ + ") format('truetype');\n      /* font-weight: 600;\n      font-style: normal; */\n           }\n\n/*For the title of the topView PF or TD*/\n@font-face {\n    font-family: 'Open Sans-Bold';\n      src: url(" + ___CSS_LOADER_URL_REPLACEMENT_10___ + ") format('truetype');\n           }\n\n/*For the title of the topView PF or TD*/\n@font-face {\n    font-family: 'Open Sans-Italic';\n      src: url(" + ___CSS_LOADER_URL_REPLACEMENT_11___ + ") format('truetype');\n           }\n\n/*For the title of under-heading TDs*/\n@font-face {\n    font-family: 'Open Sans-SemiBold';\n      src: url(" + ___CSS_LOADER_URL_REPLACEMENT_12___ + ") format('truetype');\n           }\n\n/* Originally for the bottomView PF title*/\n/* DONT USE!!!! Using this font for the text in \na <p> in a <div> that code makes dynamically \nproduces an eroneous value for \ntheDiv.offsetWidth !!!!!!! (NOTE it seems to produce \nthe correct value when the div is hard-coded \nin html!!)*/\n@font-face {\n    font-family: 'Open Sans-ExtraBold';\n      src: url(" + ___CSS_LOADER_URL_REPLACEMENT_13___ + ") format('truetype');\n           }\n\n/* For the Select div's <p>\n@font-face {\n    font-family: 'Open Sans-ExtraBold';\n      src: url('./fonts/Open_Sans/static/OpenSans/OpenSans-ExtraBold.ttf') format('truetype');\n           }\n           */\n\n\n/*TESTING STUFF TESTING STUFF TESTING STUFF*/\n\n/*An alert box*/\n\n/*An alert box*/\n.alertBoxText{ \nfont-family: 'Courier New', Courier, monospace;\nfont-size: 36px;\ncolor: #dd1c1c;\n\n\n}\n/*TESTING STUFF TESTING STUFF TESTING STUFF*/\n\n.testText{\n\n    font-family: 'Webdings';\n    font-size: 72px;\n    line-height: 72px;\n\n    padding: 0px;\n    margin: 0px;\n\n       }\n\n.testImageBox{ \n    position: absolute;\n    top: 100px;\n    left: 100px;\n    z-index: 10;\n    border: #0f31f2 10px solid;\n    width: 500px;\n    height: 500px;\n    \n    background-color: none;\n    \n    }\n\n\n\n/*END TESTING STUFF TESTING STUFF TESTING STUFF*/\n\n/*The box that shows alert \n\"Game over! You/theenemy have/has won*/\n.gameOverBox{ \n    visibility: hidden;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-end;\n\n    z-index: 160;\n    background-color: #caa3f0;\n    position: absolute;\n    top: 200px;\n    left: 65px;\n    \n    width: 515px;\n    height: 180px;\n    \n    border: #f21a0f 20px ridge;\n    border-radius: 10px;\n                }\n    \n/*The <p> for the text that reads \n\"Game over! You/theenemy have/has wo\"\nand that appears in the game over box\nabove*/\n.gameOverText{\n    /* font-family: 'Open Sans-Bold';*/\n    font-family: 'DotGothic16-Regular';\n    font-size: 70px;\n    line-height: 70px;\n    margin: 10px;\n    padding: 0px;\n    color: #39035d;\n\n             }\n\n\n\n/*For the Webdings text for the \n<p> of the down arrows*/\n.webdingsText1{\n    position: absolute;\n    top: -14px;\n    left: -4px;\n    \n    font-family: 'Webdings';\n    font-size: 52px;\n    line-height: 52px;\n\n    padding: 0px;\n    margin: 0px;\n\n    animation-name: arrowsFlash;\n    animation-duration: 1.5s;\n    animation-timing-function: linear;\n    animation-iteration-count: infinite;\n\n}\n\n/*For the Webdings text for the \n<p> of the down arrows*/\n.webdingsText2{\n    position: absolute;\n    top: -14px;\n    left: -4px;\n    \n    font-family: 'Webdings';\n    font-size: 52px;\n    line-height: 52px;\n\n    padding: 0px;\n    margin: 0px;\n\n    animation-name: arrowsFlash;\n    animation-duration: 1.5s;\n    animation-timing-function: linear;\n    animation-iteration-count: infinite;\n    animation-delay: 0.5s;\n\n              }\n\n/*For the Webdings text for the \n<p> of the down arrows*/\n.webdingsText3{\n    position: absolute;\n    top: -14px;\n    left: -4px;\n    \n    font-family: 'Webdings';\n    font-size: 52px;\n    line-height: 52px;\n\n    padding: 0px;\n    margin: 0px;\n\n    animation-name: arrowsFlash;\n    animation-duration: 1.5s;\n    animation-timing-function: linear;\n    animation-iteration-count: infinite;\n    animation-delay: 1s;\n\n              }\n\n.webdingsText4{\n    position: absolute;\n    top: -14px;\n    left: -4px;\n    \n    font-family: 'Webdings';\n    font-size: 52px;\n    line-height: 52px;\n\n    padding: 0px;\n    margin: 0px;\n\n    animation-name: arrowsFlash;\n    animation-duration: 1.5s;\n    animation-timing-function: linear;\n    animation-iteration-count: infinite;\n    animation-delay: 1.5s;\n             }\n\n\n\n/*Three styles for the boxes that carry down arrows.\nFirst one that makes the boxes visible and flashing\nthen one that makes them invisible and not flashing*/\n\n.flashArrow1\n{\n    -ms-transform: rotate(40deg) scaleY(1.5); /* IE 9 */\n    transform: rotate(40deg) scaleY(1.5);\n    animation-name: arrowDivFlash;\n    animation-duration: 1.5s;\n    animation-timing-function: linear;\n    animation-iteration-count: infinite;\n    }\n\n.flashArrow2\n{\n    -ms-transform: rotate(40deg) scaleY(1.5); /* IE 9 */\n    transform: rotate(40deg) scaleY(1.5);\n    animation-name: arrowDivFlash;\n    animation-duration: 1.5s;\n    animation-timing-function: linear;\n    animation-iteration-count: infinite;\n    animation-delay: 0.5;\n}\n\n.flashArrow3\n{\n    -ms-transform: rotate(40deg) scaleY(1.5); /* IE 9 */\n    transform: rotate(40deg) scaleY(1.5);\n    animation-name: arrowDivFlash;\n    animation-duration: 1.5s;\n    animation-timing-function: linear;\n    animation-iteration-count: infinite;\n    animation-delay: 1s;\n}\n\n.flashArrow4\n{\n    -ms-transform: rotate(40deg) scaleY(1.5); /* IE 9 */\n    transform: rotate(40deg) scaleY(1.5);\n    animation-name: arrowDivFlash;\n    animation-duration: 1.5s;\n    animation-timing-function: linear;\n    animation-iteration-count: infinite;\n    animation-delay: 1.5;\n}\n\n\n\n\n\n\n\n\n.flashArrowContainer{\n\n\n\n}\n\n.invisibleArrowContainer{\nvisibility: hidden;\n\n}\n\n\n/**/\n.downArrowContainer{\n    z-index: 100;\n   \n    width: 40px;\n    height: 25px;\n\n    padding: 0px;\n    margin: 0px;\n\n                    }\n\n/*Now 4 styles, each for a div \nthat contains a down arrow*/\n.downArrowDiv1{\n    position: absolute;\n    top: 310px;\n    left: 350px;\n    padding: 0px;\n    margin: 0px;\n             }\n\n.downArrowDiv2{\n    position: absolute;\n    top: 370px;\n    left: 300px;\n    padding: 0px;\n    margin: 0px;\n             }\n\n.downArrowDiv3{\n    position: absolute;\n    top: 430px;\n    left: 250px;\n    padding: 0px;\n    margin: 0px;\n             }\n\n.downArrowDiv4{\n    position: absolute;\n    top: 490px;\n    left: 200px;\n    padding: 0px;\n    margin: 0px;\n             }\n\n\n\n\n\n\n.realEnclDivClass{\n\n    position: absolute;\n    top: 30px;\n    left: 30px;    \n    width: 1450px;\n    height: 1200px;\n    \n    margin: 20px auto;\n    \n    border: 1px ridge black;\n    border-radius: 18px;\n    /*background-color: rgb(182, 176, 176);*/\n\n    overflow: hidden;\n             }\n    \n\n/*A div that encloses almost everything It is a child of \nrealEnclDivClass*/\n.enclDivClass{\nposition: absolute;\ntop: 0px;\nleft: 0px;\n\nwidth: 1450px;\nheight: 1200px;\n\nborder: 1px ridge rgb(107, 108, 107);\nborder-radius: 18px;\nbackground-color: none;\n\n             }\n\n\n\n/*For the div that contains the \nheadline (ie \"Battleships\")*/\n.headlineEnclDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: flex-end;\n    \n        position: absolute;\n        height: 350px; \n        width: 1399px;\n        left: 25px;\n        top: 20px;\n    \nbackground-color: #a4a1a6;\n\n    border-radius: 13px;\n    border: #434145 1px ridge;\n\n/*Below shadows from L->R go top to bottom */    \nbox-shadow: -2px 2px 2px 2px rgb(233, 228, 228) inset, -3px 3px 3px 3px rgb(60, 59, 59) inset, -2px 2px 2px 2px rgb(18, 18, 18),  -3px 3px 3px 3px rgb(50, 49, 49);\n\n                      }\n    \n\n/* The div that contains the <p> for text \n\"Battleships\" and the div of class \nfirstInfoArea\n*/\n.bShipsTextContainer{\ndisplay: flex;\nflex-direction: column;\njustify-content: start;\nalign-items: center;\n\nheight: 95%;\nwidth: 40%;\n\n/*border: #000000 5px dotted;*/\n                    }\n\n/*The div that contains the <p>\nfor text \"Battleships*/\n.bShipsTextEnclose{\n    display: flex;\n    justify-content: column;\n    align-items: center;\n    flex-direction: column;\n\n    width: 97%;\n    height: 37%;\n\n    border: #646161 1px solid;\n                    }\n\n/*The <p> for the text for \n\"Battleships*/\n.battleshipsText {\n/* font-family: 'Open Sans-Condensed-ExtraBold';*/\n/* font-family: 'StardosStencilBold'; */\n/* font-family: 'StardosStencilRegular'; */\nfont-family: 'BigShouldersStencilText-Black'; /* This is a name of your choosing*/\nfont-size: 108px;\ncolor: #0c28c7;\n\nline-height: 108px;\nmargin: 0px;\npadding: 0px;\n                 }\n\n\n\n\n/*The div in which messages appear \nwhen the user clicks a square purple\nbutton. This div has a child <p>*/\n.firstInfoArea{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    \n    height: 30%;\n    width: 97%;\n    \n    border: #5d5e61 1px dotted;\n              }\n\n/*Three classes for the <p> that is the text of the \nmessages that appear in div of class \nfirstInfoArea*/\n#firstInfoAreaP{\n               }\n\n.firstInfoAreaTextNormal{\n   /* font-family: 'ZillaSlabHighlight-Regular';*/\n   /* font-family: 'RubikMaze-Regular';*/\n   font-family: 'DotGothic16-Regular';\n    font-size: 28px;    \n    line-height: 28px;\n    color: #fff;\n    padding: 0px;\n    margin: 0px;\n                        }\n\n.firstInfoAreaTextImportant{\n   /* font-family: 'ZillaSlabHighlight-Regular';*/\n   /* font-family: 'RubikMaze-Regular';*/\n   font-family: 'DotGothic16-Regular';\n    font-size: 28px;    \n    line-height: 28px;\n    color: #980808;\n    padding: 0px;\n    margin: 0px;\n                           }\n\n\n\n\n/*The div in which messages such as \n\"Not a valid square\" appear \nwhen the user clicks a square (end square in that case)\nin the home waters when placing a ship.\nThis div has a child <p>*/\n.firstInfoAreaOne{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    \n    height: 30%;\n    width: 97%;\n    \n    border: #5d5e61 1px dotted;\n              }\n\n/*Three classes for the <p> that is the text of the \nmessages that appear in div of class \nfirstInfoArea*/\n#firstInfoAreaOneP{\n               }\n\n.firstInfoAreaOneTextNormal{\n    /* font-family: 'ZillaSlabHighlight-Regular';*/\n   /* font-family: 'RubikMaze-Regular';*/\n   font-family: 'DotGothic16-Regular';\n    font-size: 28px;    \n    line-height: 28px;\n    color: #fff;\n                        }\n\n.firstInfoAreaOneTextImportant{\n    /* font-family: 'ZillaSlabHighlight-Regular';*/\n   /* font-family: 'RubikMaze-Regular';*/\n   font-family: 'DotGothic16-Regular';\n    font-size: 24px;    \n    line-height: 24px;\n    color: #9b0808;\n                           }\n\n\n\n/*For a div that contains the \nStart/Restart button*/\n.startButtContainer\n{\ndisplay: flex;\nflex-direction: row;\njustify-content: center;\nalign-items: center;\n\n\n    border: #000000 2px dotted;\nwidth: 90px;\nheight: 40px;\n}\n\n\n\n\n\n\n\n\n\n/* The overall container for the info area \nwhere messages such as \"Your turn\" appear*/\n\n#infoBoxEnclosingDiv{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n\n        height: 95%; \n        width: 720px;\n    border-radius: 3px;\n    border-left: #3d0c59 5px dotted;\n                    }\n\n/* The div in which the messages will appear */\n#messageDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: start;\n    align-items: center;\n\n        height: 20%; \n        width: 95%;\n    border-radius: 3px;\n    background-color: #c1bfc3;\n    border: #888787 1px solid;\n                    }\n\n/* Two classes, both for the <p> \nof the text of the messages */\n/* First for normal messages such as \n\"AI to play\" or \"Your turn\" */\n.messageTextNormal{ \n    font-family: 'Open Sans-Bold';\n    font-size: 38px;\n    line-height: 28px;\n    margin: 10px;\n    padding: 0px;\n    color: #39035d;\n                  }                    \n\n/* Second for more important messages such as \n\"Your battleship has sunk\" or \"Game over\" */\n.messageTextImportant{\n    font-family: 'Open Sans-Bold';\n    font-size: 38px;\n    line-height: 28px;\n    margin: 10px;\n    padding: 0px;\n    color: #e60d0d;\n                     }                    \n\n\n\n\n\n/* The div that encloses the area for the\nstatuses of the ai and human ships */\n#shipsStatusesEncloseDiv{\n    opacity: 0.17;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n\n        height: 80%; \n        width: 97%;\n    border-radius: 3px;\n    /*border: #d2d216 5px dotted;*/\n                    }\n\n\n/* Two classes: for the divs that contain the divs that contain the \nstatuses of the ai and humna ships */\n/* First for humna ships */\n.shipsStatusesDivOne{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n\n        height: 97%; \n        width: 97%;\n    \n        border-right: #39035d 1px solid;\n                    }\n/* Then for ai ships */\n.shipsStatusesDivTwo{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n\n        height: 97%; \n        width: 97%;\n    border-left: #39035d 1px solid;\n                    }\n\n\n\n\n/* for the divs that contain the titles \neither \"You\" or \"AI\" */\n.shipsStatusesTitleDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: start;\n    align-items: center;\n\n        height: 10%; \n        width: 97%;\n    border-radius: 3px;\n    /*border: #16d2b6 5px dotted;*/\n                    }\n\n\n/* for the <p>s that of the text of the titles \n\"You\" or \"AI\" */\n.shipsStatusesTitleText{\n/* font-family: 'StardosStencilBold'; */\n/* font-family: 'StardosStencilRegular'; */\nfont-family: 'BigShouldersStencilText-Black'; \n    font-size: 42px;\n    line-height: 42px;\n    color: #3b3939;\n                       }\n\n\n/* for the div that contains \n the divs of classes shipsTextContainerOne\n and shipsTextContainerTwo  */\n.shipsTextsContainer{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n\n        height: 85%; \n        width: 97%;\n    border-radius: 3px;\n    /*border: #cc16d2 5px dotted;*/\n                    }\n\n\n\n\n/* for the divs that contain the texts \nsuch as  \"Patrolboat\" or \"Carrier\"*/\n.shipsTextContainerOne{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: flex-end;\n\n        height: 97%; \n        width: 97%;\n    border-radius: 3px;\n    /*border: #1f16d2 5px dotted;*/\n                      }\n\n\n/* for the divs that contain the texts \n\"SUNK\" or \"Afloat\"*/\n.shipsTextContainerTwo{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n\n        height: 97%; \n        width: 97%;\n    border-radius: 3px;\n    /*border: #1f16d2 5px dotted;*/\n                      }\n\n/* for the <p> of the texts \nsuch as \"Sub\" or \"Carrier\"*/\n.shipText{\n    font-family: 'StardosStencilRegular'; \n    font-size: 24px;\n    line-height: 20px;\n    padding: 0px;\n    margin: 0px;\n                      }\n\n/* Two classes for the <p> of the texts\nthat read either \"SUNK\" or \"Afloat\"*/\n/* First for \"Afloat\"*/\n.shipStatusTextAfloat{\n    /* font-family: 'StardosStencilRegular'; */\n    font-family: 'DotGothic16-Regular'; \n    font-size: 22px;\n    line-height: 20px;\n    padding: 0px;\n    margin: 0px;\n    color: #331703;\n                    }\n\n/* Then for \"SUNK!\"*/\n.shipStatusTextSUNK{\n    /* font-family: 'StardosStencilRegular'; */\n    font-family: 'DotGothic16-Regular'; \n    font-size: 26px;\n    line-height: 26px;\n    padding: 0px;\n    margin: 0px;\n    color: #f20f0f;\n                }\n\n\n\n\n.greyBackground1{\n    background-color: #a4a1a6;\n\n    border-radius: 13px;\n    border: #434145 1px ridge;\n\n/*Below shadows from L->R go top to bottom */    \nbox-shadow: -2px 2px 2px 2px rgb(233, 228, 228) inset, -3px 3px 3px 3px rgb(60, 59, 59) inset, -2px 2px 2px 2px rgb(18, 18, 18),  -3px 3px 3px 3px rgb(50, 49, 49);\n\n    position: absolute;\n    \nleft: 25px;\ntop: 395px;\n\nheight: 765px;\nwidth: 1399px;\n                }\n\n\n\n/* The enclosing div for the\ntext that reads \"Home waters\"\nand \"Enemy waters\" */\n.watersTextEnclDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n    \n    position: relative;\n    top: 5px;\n    left: 217px;\n    \n    width: 1170px;\n        \n    height: 70px;\n    \n    background-color: rgb(159, 163, 164);\n    border-radius: 6px;\n    border: rgb(87, 88, 89) 3px ridge;\n    \n                       }\n\n  /* The <p> for the text \"Home waters\" and \n  \"Enemy waters\" in waters div */\n  .watersText {\n    font-family: 'BigShouldersStencilText-Light';\n    font-size: 56px;\n    color: #0c1a6c;\n    margin: 0px;\n    padding: 0px;\n              } \n\n\n\n  /* The <div> that encloses the \n  area where user selects his/her ships*/\n  .shipsEnclosingDiv{\nposition: absolute;\nleft: 17px;\ntop: 5px;\n\nwidth: 190px;\nheight: 750px;\n\nborder:rgb(107, 108, 109) 2px ridge;\n\n\n                    }\n\n/* The newstart button */\n#newStartButton{\n\n    \n}\n\n\n\n/* The <div> that is the restart button */\n\n#resetButton{\n    position: absolute;\n    left: 3px;\n    top: 3px;\n\n              }\n\n\n/* The <div> that encloses the \ndiv that contains the <p> for text\n \"Place your vessels\"*/\n.placementEnclDiv{\n    position: absolute;\n    left: 3px;\n    top: 50px;\n    \n    width: 180px;\n    height: 197px;\n    \n    /*\n    border:rgb(34, 132, 212) 2px ridge; */\n\n    margin: 0px;\n    padding: 0px;    \n \n    }\n\n/* The <p> for text \"Place your vessels\"*/\n.shipsP{\n    font-family: 'BigShouldersStencilText-Black'; \n    font-size: 50px;\n    line-height: 50px;\n    color: #343131;\n\n    margin: 0px;\n    padding: 0px;    \n\n    opacity: 1;\n       }\n\n/* The div containing the \nthe texts 'sub (2 squares)', \netc and their purple buttons*/\n.vesselsContainer{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n\n    position: absolute;\n    left: 3px;\n    top: 206px;\n    \n    width: 180px;\n    height: 520px;\n    \n    border:rgb(120, 121, 122) 2px ridge;\n\n                }\n\n/* The vessels themselves.\nThis is for a div that contains a\n<p> for, eg, \"Place your battleship\"*/\n.vessels{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n\n    position: relative;\n    \n    width: 170px;\n    height: 50px;\n    \n    border:rgb(76, 104, 127) 2px dotted;\n        }\n\n\n/* The div containing \ni)   the <p> for text \"destroyer\" (eg)\nii)  the div containing the RBs and \n     the smallButton\n*/\n.vesselsTextDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n\n    height: 90px;\n    width: 160px;\n    /*\n    border:rgb(26, 211, 19) 2px dotted;  */\n   \n               }\n\n\n/* The div containing \nthe RBs and the smallButton\n*/\n.buttsCont{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n\n    height: 40%;\n    width: 100%;\n    border:rgb(211, 102, 19) 2px dotted;        \n    \n               }\n\n/* The radio buttons*/\n .rButt {\nwidth: 30px;\nheight: 30px;\nborder: 5px solid rgb(110, 8, 138);\n\nopacity: 0.2;\n        }\n\n/*The radio button label */\n.rbLabel{\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    font-size: 18px;\n    line-height: 21px;\n    color: #531010;\n\n    opacity: 0.2;\n        }\n\n\n\n.rButt label {\n        /*display: inline-block;*/\n        position: relative;\n        left: -55px;\n        background-color: #520560;\n        font-family: 'Open Sans-Condensed-ExtraBold';\n        font-size: 18px;\n        cursor: pointer;\n\n      }      \n.rButt:checked+label {\n        background-color: #d2aed8;\n        padding: 10px;\n      }\n\n/* The labelsfor the \nradio buttons*/\n/*\n.rbLabel {\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    position: relative;\n    left: -5px;\n    color: #3a1053;\n         }\n*/\n\n\n/* The small buttons the user employs\n   to place his/her vessels*/\n.smallButton{\n    opacity: 0.05;\n    width: 35px;\n    height: 25px;\n    \n    margin-right: 0px;\n\n    border-radius: 5px 5px 5px 5px ;\n                }\n\n/* Class to define only the \ncolour of the small buttons */\n.smallButtonColour{\n    opacity: 1;\n    border: rgb(32, 45, 229) 1px solid ;\n    background-color: rgb(71, 135, 200);\n    box-shadow: black 3px 3px 3px;\n                  }                \n\n                \n/* Class to 'remove' the \ncolour of a small buttons\nand fade it. \nAdding this class and removing\nthe one above makes the small \nbuttons grey, faded and removes their\nbox shadow */\n.smallButtonGreyed{\n    opacity: 0.05;\n    border: rgb(92, 91, 91) 5px solid ;\n    background-color: rgb(145, 148, 148);\n                  }                \n\n\n    .smallButton:hover{ \n        background-color: rgb(99, 114, 109);\n                      }  \n    \n    \n    .smallButton:active{   \n        transform: translateY(4px);\n        transform: translateX(4px);\n        box-shadow: black 1px 1px 1px;\n                       } \n    \n\n\n\n\n\n\n\n\n/* The <p> for the text, eg \n\"Place your carrier\"*/\n.vesselsText{\n    font-family: 'BigShouldersStencilText-Black';\n    font-size: 26px;\n    line-height: 26px;\n    width: 160px;\n   margin: 0px;\n   padding: 0px;\n\n   opacity: 0.2;\n            }\n\n\n/* NOT BEING USED*/            \n/* For the img of the ship*/\n.shipImage{\n    width: 160px;\n    height: 180px;\n    border:rgb(190, 55, 14) 2px dashed;\n         }\n/* NOT BEING USED*/            \n\n\n  /* The <div> that encloses the homewaters \n  and enemy waters grid divs*/\n.seasEnclosingDiv{\n    opacity: 0.1;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n\n    position: relative;\n    top: 20px;\n    left: 217px;\n    \n    width: 1170px;\n    height: 650px;\n       border: 1px ridge rgb(50, 48, 50) \n                 }\n\n\n  /* There are two divs that have this class. \n  It is NOT positioned to allow it and its\n  contents to be positioned as a whole by its parent \n  flexx box (the div of class seasEnclosingDiv)\n  This div has child containerOne, which IS positioned\n  as it contains the grid and the waters image, which \n  must occupy the same space.\n    */\n  .watersEncloseDiv{\n\n    height: 95%;\n    width: 48%;\n                   }\n\n\n/*\nFor the <div>s that enclose the 100-square grid container \ndivs of class homeWatersDiv and enemyWatersDiv.\nCode gives each of the two divs of the followng class \n  a child Image object that has an src attrib that is a reference\n  to the waters images. Each div of this class is a child of \n  a div of class watersEncloseDiv. This HAS to be positioned \n  because that allows the waters image to be positioned\n  underneath the grid of 100 squares*/\n.containerOne{\nborder: #000000 3px solid;\nposition: relative;\ntop: 0px;\nleft: 0px;\nheight: 100%;\nwidth: 100%;\n             }\n\n\n             \n/* To position the img (of the enenmy waters)\n in the div of \nthe above class*/\n#enContOne > img{\nposition: absolute;\ntop: 0px;\nleft: 0px;\nwidth: 100%;\nheight: 100%;\n    \n}\n\n#enWEnclDiv{\n\n    /* border: 6px dotted rgb(54, 193, 32) */\n          }\n\n\n\n\n/* as above but for home waters*/\n#hoContOne   > img{\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    width: 100%;\n    height: 100%;\n}\n\n\n#hoWEnclDiv{\n    /*\n    border: 6px dotted rgb(193, 32, 145) */\n            }\n\n\n\n  /* The <div> for the home waters.\n  This is a container grid and has \n  100 child divs. It is the child of containerOne */\n.homeWatersDiv{\n    position: absolute;\n    left: 10px;\n    top: 23px;\n    z-index: 40;\n    display: grid;\n    grid-template-columns: repeat(10, 50px);\n    grid-template-rows: repeat(10, 50px);\n\n    gap: 3px 3px;  /* row-gap then column-gap  */ \n    justify-content: space-evenly;\n\nheight: 530px;\nwidth: 530px;\n\nborder: 5px solid rgb(98, 98, 102);\n}\n\n  /* The <div> for the enemy waters.\n  This is a container grid. It contains the 100\n  white squares.  It is the child of containerOne   */\n  .enemyWatersDiv{\n    position: absolute;\n    left: 10px;\n    top: 23px;\n    z-index: 40;\n    display: grid;\n    grid-template-columns: repeat(10, 50px);\n    grid-template-rows: repeat(10, 50px);\n\n    gap: 3px 3px;  /* row-gap then column-gap  */ \n    justify-content: space-evenly;\n\nheight: 530px;\nwidth: 530px;\n\n    border: 5px solid rgb(98, 98, 102);\n\n/*background-image: url(\"./images/water1.jpeg\");*/\n/* background-position: center; */ /* Center the image */\n/*   background-repeat: no-repeat; */ /* Do not repeat the image */\n/*   background-size: cover; */ /* Resize the background image to cover the entire container */\n\n}\n\n\n/* For the 100 divs of the home waters grid.\neach is a grid item inside a grid container \ndiv of class homeAndEnemyWatersDiv */\n.homeGridSquare{\nz-index: 5;\nheight: 48px;\n    width: 48px;\n\nborder-style: groove;\n    border-width: 2px;\n    border-color: #000000;\n    border-radius: 2px;\nbackground-color: #ffffff;\n            }\n\n/* For the 100 divs of the enemy waters grid.\neach is a grid item inside a grid container \ndiv of class homeAndEnemyWatersDiv */\n.enemyGridSquare{\n    height: 48px;\n    width: 48px;\n    \n    border-style: groove;\n        border-width: 2px;\n        border-color: #000000;\n        border-radius: 2px;\n    background-color: #ffffff;\n                }\n    \n/* Style for home and enemy grid squares that \nhave been fired at without damaging a ship */\n.missedShot{\n    background-color: none;\n    border-width: 16px;\n        border-color: #705f5f;\n        border: ridge;\n        border-radius: 45%;\n        height: 90%;\n        width: 90%;    \n           }\n\n/* Style for home and enemy grid squares that \nhave been fired at and have caused damage to a ship */\n.hitShot{\n    border-width: 16px;\n    border-color: #f37e0a;\n    border: ridge;\n    background-color: #ec1010;\n    border-radius: 45%;\n    height: 90%;\n    width: 90%;\n \n        }\n\n/* Style for home ships*/\n.homeShipSquare{\n    background-color: #62565d;\n    height: 100%;\n    width: 100%;\n                }\n\n\n\n/* Style for TESTING ONLY*/\n.testSquareColour{\n    background-color: #f30a86;\n    height: 48px;\n    width: 48px;\n                }\n\n\n\n\n\n\n\n/* ------------------------ */\n\n\n/* the class for an opaque button that \nhas hover and depress effects. */\n.largeButton1{\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n            \n    /*width: 120px;*/\n    width: fit-content;\n    height: 35px;\n    padding-left: 3px;\n    padding-right: 3px;\n    \n    border: bisque 1.5px outset ;\n    border-radius: 5px 5px 5px 5px ;\n    \n    background-color: rgb(70, 69, 67);\n    box-shadow: rgb(5, 5, 5) 3px 3px 3px;\n    \n    opacity: 0.2;\n    pointer-events: auto;\n              }\n            \n.largeButton1:hover{ \n    background-color: rgb(99, 114, 109);\n                  }  \n\n/*Now a class code gives to buttons \nwhen the user clicks them */\n.largeButton1:active{   \n    transform: translateY(4px);\n    transform: translateX(4px);\n    box-shadow: black 1px 1px 1px;\n                   } \n\n/*For the <p> of the text \n\"start\" / \"restart\" */\n.largeButton1Text{\n    /*font-family: 'BigShouldersStencilText-Light';*/\n    font-family: 'StardosStencilBold';\nfont-size: 28px;\nline-height: 28px;\ncolor: #f20a0a;\npadding: 0px;\nmargin:  0px;\n                 }\n\n/* ------------------------ */\n\n/* Large buttons */\n/* the class for a faded button that \nhas no hover or depress effect */\n.largeButton{\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    \nwidth: fit-content;\nheight: 30px;\n\nborder: bisque 1px solid ;\nborder-radius: 5px 5px 5px 5px ;\n\nbackground-color: rgb(235, 198, 181);\nbox-shadow: black 3px 3px 3px;\n\nopacity: 0.3;\n\npointer-events: none;\n            }\n\n/* ------------------------ */\n\n\n\n\n\n\n\n\n\n\n.warnBoxDiv{\nposition: absolute;\n/*code sets top and left values*/\n\nz-index: 25;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between; \n    align-items: center;\n    \n    width: 400px;\n    height: 200px;\n\n    border: rgb(107, 88, 65) 4px solid ;\n    border-radius: 5px 5px 5px 5px ;\n    \n    background-color: rgb(231, 64, 22);\n    \n    box-shadow: black 16px 16px 20px;\n        }\n\n/* For the <p> of the warning box\nthat contains the text \"You are \nabout to … */\n.warnBoxText{\nposition: relative;        \n\nfont-size: 28px;\nfont-family: 'Open Sans-Italic';\n\ncolor: rgb(238, 226, 226);\n\n            }\n     \n/*For the div that contains the <p>\nthat is the text ofthe warning box*/\n.warnBoxPcontainDiv{\nposition: relative;\n\ndisplay: flex;\nflex-direction: row;\njustify-content: flex-start;\nalign-items: center;\n\nwidth: 94%;\nheight: 150px;\n/*development\nborder: blue 1px dotted;*/\n\npadding:0px;\n\n                   }\n\n/* For the div that contains the \nCancel and OK buttons of the \nwarning box */\n.warnBoxButtonsContainDiv{\n    position: relative;\n    \n    display: flex;\n    flex-direction: row;\n    justify-content:space-between; \n    align-items: center;\n\n    width: 97%;\n    height: 70px;\n/*development: \n    border: rgb(226, 45, 32) 1px dotted; */\n                          }\n    \n\n/*All inputs*/\ninput{\n    color:#531010;\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    font-size: 14px;\n    line-height: 15px;\n     }\n\n\n\n\n/* Buttons */\n/* another class for an opaque button that \nhas hover and depress effects. this is for \nthe \"Erase all\" button, which must be red\nwhen enabled */\n.largeButton2{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n            \n    width: fit-content;\n    height: 30px;\n    padding-left: 5px;\n    padding-right: 5px;\n\n    border: bisque 1.5px outset ;\n    border-radius: 5px 5px 5px 5px ;\n    \n    background-color: rgb(89, 86, 86);\n    box-shadow: rgb(5, 5, 5) 3px 3px 3px;\n    \n    opacity: 1;\n    pointer-events: auto;\n              }\n            \n.largeButton2:hover{ \n    background-color: rgb(99, 114, 109);\n                  }  \n\n/*Now a class code gives to buttons \nwhen the user clicks them */\n.largeButton2:active{   \n    transform: translateY(4px);\n    transform: translateX(4px);\n    box-shadow: black 1px 1px 1px;\n                   } \n\n\n\n/* The <p> for the text in the large button */\n.largeButtText {\n\nfont-family: 'Open Sans-Condensed-ExtraBold';\nfont-size: 22px;\n\nletter-spacing: -0.5px;\n\ncolor: rgb(112, 36, 184);\n\nmargin: 0px;\npadding: 0px;\n\n               }            \n\n\n/* \nThe div enclosing the \nbuttons \"New project\", \n\"New todo\" and \"Edit title\" \n*/\n.buttonEnclosingDiv1{\nposition: relative;\n\n/* No longer needed as \nthis div goes into a \ndiv that uses flexbox:\ntop:346px;\nleft:15px;\n*/\n\ndisplay: flex;\nflex-direction: row;\njustify-content: space-evenly;\nalign-items: center;\n\npadding-bottom: 3px;\n\nwidth: 450px;\nheight: 40px;\nbackground-color: rgb(209, 184, 238);\nborder: rgb(214, 206, 206) 3px outset;\nborder-radius: 5px;;\n                 }\n\n/* \nThe div enclosing the \nbutton \"Erase all\" \n*/\n.buttonEnclosingDiv3{\n\n    position: relative;\n/*    */    \n    display: flex;\n    flex-direction: row;\n    justify-content: right;\n    align-items: center;\n\n    margin-left: auto;\n\n    padding-right: 10px;\n    padding-bottom: 3px;\n\n    width: 210px;\n    height: 40px;\n    background-color: rgb(209, 184, 238);\n    border: rgb(214, 206, 206) 3px outset;\n    border-radius: 5px;;\n                     }\n\n/*The div enclosing the ON OFF\n radio butons */\n.rbEncloseDiv{\n    position: absolute;\n    left: 2px;\n    top: -3px;\n    width: 110px;\n    height: 45px;\n\n    padding: 0px;\n\n    margin-top: 3px;\n    margin-right: 2px;    \n    /*\n    border: rgb(242, 14, 14) 2px outset;\n    border-radius: 5px; */\n             } \n\n\n.rbLabelFaded{\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    font-size: 18px;\n    line-height: 21px;\n    color: #531010;\n    opacity: 0.3;\n             }\n\n.rbLabelONactive{\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    font-size: 18px;\n    line-height: 21px;\n    color: #f20808;\n    opacity: 1;\n                }\n\n\n\n\n\n\n\n/*The hr that separates the buttons\nfrom the display of the project folders*/\n\n.hrule1{\n    position: absolute;\n    left: 50px;\n    top: 320px;    \n\nwidth: 900px;\nheight: 20px;\n\nbackground-color: blanchedalmond;\n  border-radius: 5px;\n\n    }\n               \n\n/* The div that contains the project folders*/\n\n.topView{\n    position: absolute;\n    overflow-x: scroll;\n\ntop: 10px;\nleft: 15px;\n\nwidth: 900px;\nheight: 315px;\n\nbackground-color:white;\n\nborder: rgb(145, 139, 139) 1px solid;\nborder-radius: 7px;;\n    }\n   \n    \n\n\n/* For the div to which code dynamically \nappends blown-up versions of the \nproject folders and stand-alone non-in-PF \ntodos */\n.bottomView {\n\n    position: absolute;\n\n    bottom: 10px;\n    left: 15px;\n    \n\nwidth: 900px;\nheight: 580px;\n\nbackground-color:white;\nborder: rgb(145, 139, 139) 1px solid;\nborder-radius: 7px;;\n\n\noverflow-x: scroll;\n\n                   }\n\n/*--------------------------------------------------------*/\n\n/* for the divs that contain the instructions-*/\n.instructionP{\n    position: absolute;\n    \n    top: 20px;\n    left: 20px;\n    \n    width: 90%;\n    height: 90%;\n    \n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    line-height: 15px;    \n    \n    }\n\n\n/* for the divs that contain the instructions-*/\n.instructionDiv{\nposition: absolute;\n\ntop: 200px;\nleft: 200px;\n\nwidth: 300px;\nheight: 300px;\n\nbackground-color: #a2bbe0;\nborder-radius: 6px;\nborder: #3a1053 3px outset;\n\n}\n\n\n\n\n\n/*--------------------------------------------------------*/\n/*Styles for the topview project folder \nand topview todo */\n\n\n/*For the <div> that is the folder for the top view*/\n.pFolder{\n    position: absolute;\n    top: 10px;       \n    /*left attrib set dynamically*/\n    width: 200px;\n    height: 270px;\n\nborder: black 1px solid;\nborder-radius: 5px;\nbackground-color: burlywood;\npadding:0px;\nmargin: 0px;\n         }\n        /* in order: x offset, y offset, blur size, spread size, color */\n        /* blur size and spread size are optional (they default to 0) */\n  \n/* For the <div> that is a todo for the top view */\n.topViewTodo{\n    position: absolute;\n    top: 10px;       \n    /*left attrib set dynamically*/\n    width: 200px;\n    height: 270px;\n\nborder: rgb(236, 168, 148) 1px solid;\nborder-radius:5px;\nbackground-color: white;\n\npadding:0px;\nmargin: 0px;\n            }\n\n/* Code adds this class to the top-view PF div\non a click of that div. This class makes it \napparent that the user has selected the div */\n.pFolderSelected{\n    box-shadow: 0px 0px 5px 5px rgb(152, 193, 218);\n                }\n\n/*For the <p> in the top view div for\n the PF / todo.\nThis <p> reads \"Project\" or \"Todo\" */\n.topViewText{\n    position: absolute;\n    top: 5px;       \n    right: 5px;\n    font-family: 'Open Sans-Bold';\n    font-size: 20px;\n    line-height: 25px;\n    color: rgb(233, 66, 99);\n    background-color: rgb(250, 242, 242);\n\n    border-radius: 2px;\n    \n    padding:0px;\nmargin: 0px;\n\n             }\n\n/*For the <p> for the title of the proj fold or todo*/\n.topViewtitle{\n    position: absolute;\n    top: 35px;       \n    right:5px;\n    font-family: 'Open Sans-Bold';\nfont-size: 24px;\nline-height: 25px;\ncolor: rgb(61, 4, 16);\nbackground-color: rgb(238, 214, 219);\n\npadding:0px;\nmargin: 0px;\n\nmax-height: 150px;\n\noverflow-x: hidden;\noverflow-y: hidden;\n            }\n\n/*--------------------------------------------------------*/  \n        \n\n\n\n\n/*The forms and dialog boxes*/\n/*The form for entering data \nabout a new project folder.\nCode calls this form after\nclick of \"New Project\" button*/\n.projFolderForm{\ndisplay: none;\n\nposition: absolute;\ntop: 500px;\nleft: 400px;\n\nwidth: 250px;\nheight: 100px;\n\nbackground-color: cyan;\nborder: darkblue solid 1px;\n\n}\n\n/* The submit button for the form above*/\n.newProjSubmit{\nposition: absolute;\ntop: 40px;\nleft: 15px;\n\nwidth: 65px;\nheight: 25px;\n\n              }\n\n\n/* The dialog box that tells the user \nthat a project of that name already exists */\n.projNameExistsDialogBox{\n    display: none;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n\n    position: absolute;\n    top: 550px;\n    left: 450px;\n    \n    width: 250px;\n    height: 150px;\n    \n    background-color: cyan;\n    border: darkblue solid 5px;\n                        }\n\n/* The text for the <p> in the dialog box above */\n.projNameExistsText{\nfont-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\nfont-size: 24px;\nline-height: 25px;\n                   }\n\n/* The enclosing div for the general \n\"already exists\" type of dialog box */\n.nameAlreadyExistsDialogBox{\n    display: block;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n\n    position: absolute;\n       \n    width: 250px;\n    height: fit-content;\n    \n    background-color: rgb(221, 186, 141);\n    border: rgb(77, 2, 138) solid 5px;\n    border-radius: 7px;\n    z-index: 25;\n                        }\n\n/* The <p> for the text ofthe general \n\"already exists\" type of dialog box */\n.nameAlreadyExistsText{\n    position: relative;\n    width: 80%;\n    left: 20px;\n    font-family: 'Open Sans-Bold';\n    font-size: 28px;\n    line-height: 29px;\n    color: #8a1010;\n                    }\n\n/*----*/\n\n\n\n/* div for a todo */\n.todoDiv{\n    position: absolute;\n    \n    width: 300px;\n    height: 400px;\n    \n    border: 2px solid red;\n                     }\n    \n    .testButtPos{\n        position: absolute;\n        left: 220px;\n        top: 10px;\n    }\n    \n        \n/*----------------*/\n\n\n\n/*A general input class*/\n.inputClass{\nwidth: 170px;\nheight: 20px;\n            }\n\n/*A general form label class*/\n.labelClass{\nfont-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif ;\nfont-size: 16px;\ncolor: rgb(119, 2, 253);\n            }\n\n/*NO LONGER USED:*/\n/*id to position notes input*/\n#todoFormNotesInputPos{\n    position: absolute;\ntop: 380px;\nleft: 70px;\n\n                      }\n\n\n\n\n\n/*The div that is a child of div with class \nnotesEnclosingDivClass and that has child \n<p> of class notesP*/\n.notesTitleEncloseDivClass{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    \n    position: relative;\n    width: 95%;\n    height: 20px;    \n\n    margin: 0px;\n    padding: 0px;\n\n    /*Development\n    border: rgb(235, 48, 15) dotted 1px; */    \n    \n                           }\n\n/*The <p> for text \"Notes\"*/\n.notesP{\n    position: absolute;\n    top:0px;\n    left:3px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    letter-spacing: 1px;\n    color: rgb(146, 135, 135);\n    width:97%;\n    height: 19px;\n    margin-left: 0px;\n    /*deveopment:\n    border: red 2px dotted;*/\n    padding: 0px;\n    margin: 0px;\n       }\n\n\n\n/*The <div> in which the \nuser types notes*/\n.notesDiv {\n    position: relative;\n    left:2px;\n    width: 98%;\n    height: 100px;         \n\n    font-family: 'Open Sans-Italic';\n    font-size: 16px;\n    color: rgb(28, 4, 51);\n    \n    border:rgb(90, 157, 201) 1px solid;\n\n    margin: 0px;\n    padding: 0px;\n\n    overflow-y: scroll;\n          }\n\n/*The <p> for text that the user edits*/\n.notesTextP{\n    position: relative;\n    \n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    font-size: 16px;\n    color: rgb(7, 8, 0);\n    \n    padding: 0px;\n    margin: 0px;\n\n       }\n\n/* --------------------- --------------------  */\n\n/* Elements of the checklist */\n/* The checklist consists of \n1) an all-enclosing div \n2) a div to contain the <p> for the text \"Checklist\" \n3) a <p> for the text \"Checklist\" \n4) A div to contain the buttons\n5) two buttons to add and delete points\n(which comprise a div and a child <p>)\n6) a div in which the \"points\" plus their \ndescriptions go. Each checklist point \nconsists of an enlosing div in which there \nis a \"point\" div and a description div\n*/\n\n/* The all-enclosing checklist div.*/\n.bottomViewAllEncloseChecklistDiv{\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\nalign-items: center;\n\nposition: relative;\n    \nwidth: 95%;\nheight: fit-content;\n\nbackground-color: rgb(236, 185, 236);\nborder-radius: 6px;\nborder: rgb(235, 126, 23) 3px solid;\n\nmargin-bottom:10px;\n\n                                 }                   \n\n/* The div that contains the <p>\n for the text \"Checklist\" and the \n Add and Delete buttons*/\n.checklistPencloseDivClass{\n    position: relative;\n            \n    width: 100%;\n    height: 30px;\n    \n    border-bottom: rgb(204, 0, 255) 1px dotted;\n                          }                   \n    \n\n/* The <p> in the checklist \ndiv that reads \"Checklist\" */\n.bottomViewTodoChecklistP{\n    position: absolute;\n    top:5px;\n    left:3px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    letter-spacing: 1px;\n    color: rgb(146, 135, 135);\n    width:37%;\n    height: 19px;\n    margin-left: 0px;\n    /*deveopment:\n    border: red 2px dotted;*/\n    padding: 0px;\n    margin: 0px;\n                         }\n\n\n/* Now the buttons for \n    \"Add point\" and \n    \"Delete point\", the <p> for the text in those buttons and the \n    actual checklist bullet symbols */\n\n/*The style for the checklist \nbuttons (divs) that add or delete points.\nThis provides style only, no positioning*/\n.addDeletePointButtons{\nwidth: 25px;\nheight: 25px;\n\n    background-color: rgb(192, 167, 216);\n    border: brown 1px solid;\n    border-radius: 3px;\n\n    padding: 0px;\n    margin: 0px;\n    \n}\n\n/*To position the + button*/\n#addPointButtonPos{\nposition: absolute;\ntop: 2px;\nright: 38px;\n                      }\n\n/*To position the - button*/\n#deletePointButtonPos{\n    position: absolute;\n    top: 2px;\n    right: 8px;\n                        }\n\n.addDeletePointButtons:hover{\n    background-color: rgb(254, 254, 255);\n                            }\n\n.addDeletePointButtons:active{\n    transform: translateY(2px);\n    transform: translateX(2px);\n    box-shadow: black 1px 1px 3px;\n                             }\n\n/*The <p> for the text of the plus button\nthat adds a checklist point*/\n.plusPointButtonsP{\nposition: absolute;\ntop:-2px;\nleft: 3px;\n    font-size: 36px;\nline-height: 27px;\nfont-family: 'Open Sans-Condensed-ExtraBold';\npadding: 0px;\nmargin: 0px;\n                        }\n\n/*The <p> for the text of the plus button\nthat adds a checklist point*/\n.minusPointButtonsP{\n    position: absolute;\n    top:-6px;\n    left: 5px;\n        font-size: 46px;\n    line-height: 27px;\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    padding: 0px;\n    margin: 0px;\n                            }\n\n/* The <p> for the text in the buttons that \nadd or delete a checklist point*/\n.addDeletePointButtonP{\n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n    font-size: 15px;\n    \n    padding: 0px;\n    margin: 0px;;\n    \n                      }\n\n/* the interior div, which will contain\n lots of divs of class newPointContainerDiv \n (each of which will represent a checklist\n point and contain the \"point\" div and the\n description div) */\n.bottomViewTodoChecklistInteriorDiv{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n        \n    position: relative;\n        \n    width: 97%;\n    min-height: 35px;\n    height: fit-content;\n\n    margin-bottom:3px;\n    margin-top:3px;\n    \n    /*development:\n    border: rgb(245, 212, 212) 1px solid; */\n\n    }              \n    \n/*A style code adds to the \"bullet\" div and \nits sibling description div in the checklist when \nthe user double-clicks the \"bullet\" div. Code \nremoves this class after five seconds*/    \n.selectedColour{\n    background-color: rgb(245, 166, 147);\n               }\n\n\n/*The enclosing div for the \npoint div + description div*/\n.newPointContainerDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    \n    position: relative;\n\n    width: 97%;\n    height: 25px;\n\n    /*Development:\n    border: rgb(0, 0, 0) 1px solid; */\n\n    cursor: move;\n                     }\n\n\n/* The checklist bullet*/\n    .checklistPoint{\n       display: flex;\n       flex-direction: column;\n       justify-content: center;\n       align-items: center; \n\n       width:  20px;\n       height: 20px;\n       border-top-left-radius:  4px;\n       border-bottom-left-radius: 4px; \n       border: 3px solid  rgb(113, 43, 226);;\n                    }\n\n/* The <p> that goes in the \"bullet\" div.\nCode will make this text a number  */\n.numberPara{\n    position: relative;\n\n    font-size: 18px;\n    font-family: 'Open Sans-Condensed-ExtraBold';\n\n    color: rgb(211, 100, 194);\n\npadding: 0px;\nmargin: 0px;\n            }\n\n\n/* The <p> that goes in the \"point\" div \nof the checklist bullet points.\nCode make this text editable  */\n.pointPara{\n    position: relative;\n\n    height: 99%;\n\n    font-size: 16px;\n    font-family: 'Open Sans-Italic';\n\n    color: rgb(100, 9, 9);\n\npadding: 0px;\nmargin: 0px;\n            }\n\n\n\n\n\n/* The checklist point description,\neg \"Vacuum the seats\" */\n.checklistDescription{\n   \n/* font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\nfont-size: 16px;*/\n\nwidth: 230px;\nheight: 20px;\nborder-top-right-radius: 4px;\nborder-bottom-right-radius: 4px;\n\nborder: 3px solid  rgb(180, 131, 243);\n\n                     }\n\n/*Styles for the \"bullet\" and \"point\"\ndivs when they are selected and not selected \n-- no need for four, reduce to two!!!\n*/\n\n.backgroundNotSelected{\n    background-color: rgb(237, 226, 243);\n                            }    \n\n.backgroundSelected{\n        background-color: rgb(226, 86, 43);\n                         }\n\n.descrpBackgroundNotSelected{\n    background-color: rgb(43, 226, 186);\n                            }    \n\n.descrpBackgroundSelected{\n        background-color: rgb(226, 86, 43);\n                         }\n\n                         \n.bulletBackgroundNotSelected{\n    background-color: rgb(43, 226, 186);\n                            }    \n\n.bulletBackgroundSelected{\n        background-color: rgb(226, 86, 43);\n                        }\n    \n\n/*-----------------------------------------------------------------------------------*/    \n    /*Stuff that appears in the bottom view*/\n\n/* For the div that contains the div \n    that encloses a stand-alone \nnon-in-PF todo (for the bottomview) */\n.bottomViewTodoContainer{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    \n    position: absolute;\n    top: 20px;\n    \n    width: 350px;\n    height: 520px;\n    border: rgb(196, 168, 168) 3px solid;\n    border-radius:8px;\n    background-color: rgb(253, 255, 255);\n\n    overflow-x: hidden;\n    overflow-y: hidden;\n\n                        }\n/* The div that contains the \nword \"Todo\" for a stand-alone\nnon-in-PF todo*/\n.bottomViewTDwordEnclDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    \n        position: absolute;\n        top: 0px;\n        left: 14px;\n        background-color: rgb(196, 171, 140);\n    border-radius: 4px;;\n    border: rgb(116, 98, 29) 1px solid;\n    \n    width: fit-content;\n    height: 17px;\n    \n    z-index: 10;;\n    \n    padding-left: 10px;\n    padding-right: 10px;\n                                }\n    \n/* The div that contains the word \"Todo\"\nfor a stand-alone in-PF todo and an \nunder-heading todo*/\n.bottomViewInPFtodoWordEnclDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    \n        position: absolute;\n        top: 0px;\n        left: 5px;\n        background-color: rgb(196, 171, 140);\n    border-radius: 4px;;\n    border: rgb(116, 98, 29) 1px solid;\n    \n    width: fit-content;\n    height: 17px;\n    \n    z-index: 10;;\n    \n    padding-left: 10px;\n    padding-right: 10px;\n                                }\n  \n\n\n/* for the divthat encloses the Delete \nand X buttons in the bottomView \nstandalone non-in-PF todo div */\n.buttsEnclosingDiv{\nwidth: 90%;\nheight: 100%;\n\ndisplay: flex;\nflex-direction: row;\njustify-content: space-between;\nalign-items: center;\n\nbackground-color: rgb(240, 232, 232);\n\n                  }\n\n\n/* The div that encloses a stand-alone \nnon-in-PF todo (for the bottomview)*/\n.bottomViewTodoEnclosingDiv {\n        \n    display: block;\n    /**/\n    position: relative;\n            \n    width: 97%;\n    height: fit-content;\n    /*Development\n    border: rgb(247, 3, 210) 6px dotted;\n    */\n    background-color: white;\n    \n    padding: 0px;\n    margin-top: 5px;\n    margin-left: 5px;\n    \n    overflow-y: hidden;\n    overflow-x: hidden;\n                             }\n\n\n/* The style for the div of the todo.\nCode makes this div for ay kind of \ntodo.\nThis div contains:\na) the div that contains the title\nand minimise square\nb) the div that contains text \"Select\" \nc) the div that contains everything else\n(date picker, Priority elements, \ndescription elements, Checklist elements \nand Notes elements)\n*/\n.bottomViewTodoDiv{\n    \n    display: block;\n\n    position: relative;\n    z-index: 1;\n\n    width: 93%;\n    /* Code will set height*/\n    \n    /*Development\n    border: rgb(206, 252, 4) 6px dotted; */\n     \n    border-radius: 3px;\n    padding: 0px;\n    margin: 10px;\n\n    background-color: rgb(199, 182, 199);\n\n    overflow-x: hidden;\n    overflow-y: hidden;\n\n    box-sizing: border-box;\n                  }\n\n\n\n\n\n\n/* The div that contains the \n\"X\" button and that appears at the \ntop of the div that contains a \nnon-on-PF or in-PF todo in the \nbottomview */\n.bottomViewTodoButtonsEncloseDiv {\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-end;\n    align-items: center;\n    \n    position: relative;\n        \n    width: 95%;\n    height: 35px;\n    \n    border: rgb(201, 192, 140) 2px solid;\n    background-color: rgb(144, 86, 219);\n    \n    padding: 0px;\n    margin: 0px;\n                                 }\n\n/* The P that contains the text \n\"Todo\" and that is a child of \nthe div of class \nbottomViewTodoButtonsEncloseDiv */\n.bottomViewTodoTextP {\n    \n    position: relative;\n        \n    height: 20px;\n    \n    border: rgb(255, 0, 13) 2px solid;\n    background-color: rgb(197, 163, 241);\n    \n    font-size: 16px;\n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n\n    padding: 0px;\n    margin: 0px;\n    \n                                 }\n\n\n\n/* The div for the project folder*/\n.bottomViewProjFolderDiv {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\nalign-items: center;\n\nposition: absolute;\ntop: 20px;\n\nwidth: 350px;\nheight: 520px;\n\nborder: rgb(110, 83, 83) 3px solid;\nborder-radius:8px;\nbackground-color: rgb(201, 151, 90);\n\npadding: 0px;\nmargin: 0px;\n\noverflow-y: hidden;\noverflow-x: hidden;\n                         }\n\n/* The animation class for the PF div*/\n.PFanimation{\nanimation: grow1 0.3s ease-in-out 1;\n            }\n\n\n\n\n\n/*the <p> for the title of the PF*/\n.bottomViewPFTitleP {\nposition: relative;\nleft: 5px;\ntop: 2px;\n\nfont-family: 'Open Sans-ExtraBold';\nfont-size: 30px;\nline-height: 32px;\n\npadding-bottom: 5px;\nmargin: 0px;\n\n/*overflow-y: hidden;*/\n                    }\n   \n/*The div that contains the <p> for \ntext \"Project\" in the bottom view*/\n.bottomViewPForTDwordEnclDiv{\ndisplay: flex;\nflex-direction: row;\njustify-content: center;\nalign-items: center;\n\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    background-color: rgb(196, 171, 140);\nborder-radius: 4px;;\nborder: cornsilk 1px solid;\n\nwidth: fit-content;\nheight: 17px;\n\nz-index: 10;;\n\npadding-left: 10px;\npadding-right: 10px;\n                            }\n\n/*The <p> for \ntext \"Project\" */\n.bottomViewPForTDwordP{\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    font-size: 18px;\nline-height: 19px;\n\nposition: relative;\ncolor: rgb(243, 79, 79);\n\npadding:0px;\nmargin:0px;\n                      }\n\n/*The div that encloses the … */\n.bottomViewPFTitleEncloseDiv{\n    position: relative;\n    left: 0px;\n    \n    font-family: 'Open Sans-ExtraBold';\nfont-size: 33px;\nline-height: 32px;\n\n    height: fit-content;\n    /*min-height: 40px;*/\n    max-height: 128px;\n    width: 99%;\n\n    padding: 0px;\n    margin: 0px;\n    /* dev:\n    border: firebrick 1px dotted; */\n    \n    overflow-y: hidden;\n    overflow-x: hidden;\n\n                            }\n\n/*The following style is for a div \nthat encloses the top buttons in a \nPF div for the bottom view. Code \nuses the same style for a div that \ncontains the Delete button at the \ntop of the stand-alone todo div in\nthe bottom view*/\n.bottomViewPFtopButtonsEncloseDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n    \n    position: absolute;\n    left: 3px;\n    top: 20px;\n\n    height: 45px;\n    width: 98%;\n\n    background-color: rgb(240, 232, 232);\n    /*\n    border: rgb(255, 166, 0) 1px solid;*/\n    border-radius: 3px;;\n    padding: 0px;\n    margin: 0px;\n    \n                            }\n\n/* The following style is for a div \nthat encloses the top buttons in a \nstandalone non-inPF TD. Code uses \nthe same style for a div that \ncontains the Delete button at the \ntop of the stand-alone todo div in\nthe bottom view*/\n.bottomViewStAlTDButtonsEncloseDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n    \n    position: absolute;\n    left: 15px;\n    top: 20px;\n\n    height: 45px;\n    width: 85.6%;\n\n    background-color: rgb(240, 232, 232);\n    /*\n    border: rgb(255, 166, 0) 1px solid; */\n    border-radius: 3px;;\n    padding: 0px;\n    margin: 0px;\n    \n                            }\n\n\n/* the div in which code will put \n standalone non-in-PF todos.  */\n .bottomViewTodosEncloseDiv{\n    position: absolute;\n    left: 0px;\n    top: 65px;\n\n    /*\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    */\n  \n    width: 100%;\n    min-height: 50px;\n    /*height: fit-content;*/\n    height: 440px;\n\n    padding: 0px;\n    margin-top: 10px;\n/*Development    \nborder: rgb(255, 153, 0) 10px dotted; */\n\noverflow-y: scroll;\noverflow-x: hidden;\n                            }\n\n/* the div that sits below the PF \nbutton bar and that contains \ni) the div for the title \nii) the div that contains headings & todos */\n.pfTitleHeadingsTodosEncloseDiv{\n    position: absolute;\n    left: 0px;\n    top: 82px;\n    /*\n    border-top:rgb(0, 0, 0) 1px dotted;*/\n    width: 100%;\n    height: 435px;\n\n    overflow-y: scroll;\n\n}\n\n\n\n\n\n/* the div in which code will put \n heading divs (and obviously the todos\n in those heading divs). this div is \n the child of the div for the PF in \n the bottom view and goes below the \n PF title div and the div containing \n the \"New heading\" and \"New todo\" \n buttons*/\n .bottomViewHeadsTodosEncloseDiv{\n    position: relative;\n    left: 3px;\n    \n    margin-top:10px;\n\n    display: block;\n\n/**/\n    width: 98%;\n    /*height: fit-content;*/\n    height: 390px;\n    padding: 0px;\n    \n    border-radius: 7px;\n    border: rgb(116, 111, 111) 1px solid;\n    \n/*Development:    \nborder: red 10px dotted;\n*/\n\noverflow-y: scroll;\noverflow-x: hidden;\n\n}\n\n\n/* The div that contains a heading title \n(which is a <p> in its own div) and todos \n(in their own divs)\n*/\n.bottomViewHeadingDiv{\n    position: relative;       \n    display: block;\n    width: 97%;\n    \n    /* code will set height */\n        \n        background-color: rgb(179, 158, 236);\n        border-top: 4px solid rgb(138, 139, 138);\n        border-bottom: 4px solid rgb(138, 139, 138);\n    \n    padding: 0px;\n    margin-top: 15px;\n    margin-bottom: 15px;\n    margin-left:5px;\n\n    overflow-y: hidden;\n    overflow-x: hidden;\n                     }\n\n/* The class to add to the heading div above \nwhen the user clicks on that div. The idea \nis to highlight the div to show the user has \nselected it*/\n.addGlowToBottomViewHeading{\nbox-shadow: 3px 3px 3px 3px #FF0000, -3px -3px 3px 3px  #FF0000;;\n                           }\n\n\n/* TES STUFF IN HERE TES STUFF IN HERE TES STUFF IN HERE */\n\n       /* a test div  */\n    .aDivForTESTing {\n    z-index: 25;\n\n    position: absolute;\n    left: 30px;\n    top: 30px;\n    \n    width: 100px;\n    height: 100px;\n\n    background-color: #dcdbab;\n\n    border:rgb(255, 0, 255) 3px dashed;\n    \n    padding: 0px;\n    margin: 0px;\n                                         }\n    \n\n/* The div that contains a heading title \n(which is a <p> in its own div) and todos \n(in their own divs)\n*/\n.bottomViewHeadingDivTEST{\n    position: relative;       \n    display: block;\n    width: 97%;\n    \n    /* code will set height */\n        \n        background-color: rgb(179, 158, 236);\n        border-top: 4px solid rgb(138, 139, 138);\n        border-bottom: 4px solid rgb(138, 139, 138);\n    \n    padding: 0px;\n    margin-top: 15px;\n    margin-bottom: 15px;\n    margin-left:5px;\n\n    overflow-y: hidden;\n    overflow-x: hidden;\n                     }\n\n\n/*The div that encloses the <p> for the title \nof the heading that appears in the bottom view \ndiv for the PF*/\n.bottomViewHeadingTitlePEncloseDivTEST {\n    z-index: 4;\n    \n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n    \n    position: relative;\n    \n    width: 97%;\n    height: fit-content;\n    \n    margin-top: 25px;\n    margin-bottom: 25px;\n    \n    border-top: 2px solid black;\n    border-bottom: 2px solid black;\n                             }\n    \n    /* The title <p> for a heading div in \n    the bottom view PF folder */\n    .bottomViewHeadingTitlePTEST {\n    \n    z-index: 7;\n    \n    position: relative;\n    \n    font-family: 'Open Sans-Italic';\n    font-size: 24px;\n    \n    width: 92%;\n    \n    color: rgb(57, 5, 109);\n    \n    padding: 0px;\n    margin: 0px;\n                             }\n\n\n/*END OF TEST CLASSES END OF TEST CLASSES END OF TEST CLASSES*/\n\n\n\n/*The div that encloses the <p> for the title \nof the heading that appears in the bottom view \ndiv for the PF*/\n.bottomViewHeadingTitlePEncloseDiv {\nz-index: 4;\n\ndisplay: flex;\nflex-direction: row;\njustify-content: space-around;\nalign-items: center;\n\nposition: relative;\n\nwidth: 97%;\nheight: fit-content;\n\n/*Development\nborder:rgb(0, 110, 255) 3px solid; */\n\nmargin-top: 25px;\nmargin-bottom: 25px;\n\nborder-top: 2px solid black;\nborder-bottom: 2px solid black;\n                         }\n\n/* The title <p> for a heading div in \nthe bottom view PF folder */\n.bottomViewHeadingTitleP {\n\nz-index: 7;\n\nposition: relative;\ntop: -4px;\n\nfont-family: 'Open Sans-Italic';\nfont-size: 24px;\nline-height: 32px;\nwidth: 92%;\n\ncolor: rgb(57, 5, 109);\n\npadding: 0px;\nmargin: 0px;\n                         }\n\n/* The div that contains the todo div */\n.bottomViewHeadingTodoEncloseDiv {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\nalign-items: center;\n\nposition: relative;\nleft: 3px;\ntop: 30px;\n\nwidth: 94%;\n\n height: fit-content; \n min-height: 135px;\n\n\nborder:rgb(255, 0, 255) 3px dashed;\n\npadding: 0px;\nmargin: 0px;\n\noverflow-y: hidden;\n                         }\n\n/* A style that code assigns to the \n appropriate div when the user wants to \nselect a PF/ in-PF standalone todo / \nheading / standalone todo. Code adds or\nremoves this class to/from the div in \nquestion when the user clicks the small \ndiv that reads \"Select\"\n */\n.selected{\n    /* box-shadow: none|h-offset v-offset blur spread color |inset|initial|inherit;   */\n    box-shadow: 6px 6px 6px 6px #a2bbe0, -6px -6px 6px 6px #a2bbe0; \n         } \n\n/* the <p> for the text \"Select\" \nthat goes in every div that every\n todo.heading/PF has at the top */\n.selectP{\nposition: relative;\ncolor: rgb(186, 176, 194);\nfont-size: 16px;\nfont-family: 'Open Sans-ExtraBold';\n\n        }\n\n.selectDiv{\ndisplay: flex;\nflex-direction: row;\njustify-content: center;\nalign-items: center;\n\nwidth: fit-content;\nheight: 17px;\n\nz-index: 10;;\n\npadding-left: 10px;\npadding-right: 10px;\n\nbackground-color: rgb(140, 0, 255);\nborder-radius: 4px;;\nborder: cornsilk 1px solid;\n        }\n\n\n/* Fri28Jan22: note that the following four\nstyles are identical! Change to one style later \nonce you are sure there's no need for four \n(obviously individual) styles!*/\n\n/* Position for the PF\n Select div*/\n.pfSelectDivPosition {\n    position: absolute;\n    top: 0px;\n    right: 0px;\n                    }\n\n/* Position for the stand alone \nnon-inPF TD Select div*/\n.stAlTDSelectDivPosition {\n    position: absolute;\n    top: 0px;\n    right: 32px;\n                         }\n\n/* Position for the heading\nSelect div*/\n.headingSelectDivPosition {\n    position: absolute;\n    top: 0px;\n    right: 0px;\n                          }\n\n/* Position for the under-heading\nTD's Select div*/\n.inPFtodoSelectDivPosition {\n    position: absolute;\n    top: 0px;\n    right: 0px;\n                          }\n\n\n\n\n\n\n\n/* The div that will contain the <p> for the  \nheading and the square the user clicks \nto minimise the todo div (the one with brown\ndotted border in dev)*/\n.bottomViewTodoTitleEncloseDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n\n    position: relative;\n    /*top: 20px;*/\n\n    width: 95.5%;\n    min-height: 19px; \n    /*height: fit-content;*/\n    \n    \n    border-radius: 3px;\n    border: rgb(163, 114, 58) 2px solid;\n     \n    padding: 0px;\n    margin-left: 5px;\n    margin-top: 25px;\n    margin-bottom: 10px;\n\n    background-color: rgb(240, 172, 234); \n\n    overflow-x: hidden;\n    overflow-y: hidden;\n                              }\n\n\n/*The <p> for the title for the todo*/\n.bottomViewTodoTitleP{\nz-index: 7;\n\nposition: relative;\ntop:-2px;\nleft: 3px;\n\nfont-family: 'Open Sans-SemiBold';\nfont-size: 20px;\nline-height: 26px;\n\nwidth: 91%;\nheight: fit-content;\n/*min-height: 25px;*/\n\nmargin: 0px;\npadding-top: 3px;\npadding-bottom: 3px;\n                     }\n\n/*The div that contains the up/down arrow\nas background image.*/\n.arrowDivClass{\nposition: relative;\n/*\nwidth: 7%;\nheight: 100%;\n*/\n\nwidth: 25px;\nheight: 25px;\n\n/*Development\nborder: darkblue 1px solid; */\n\nbackground-repeat:no-repeat;\nbackground-size:contain;\n\n              }\n\n\n/* The div that contains everything in the todo\nexcept the title enclosing div */\n.todoTheRestEnclosDivClass{\nposition: relative;\n\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\nalign-items: center;\n\nwidth: 95.5%;\nheight: fit-content;\n/*\nborder: rgb(112, 112, 112) 1px solid; */\n\nmargin-left: 5px;\npadding: 0px;\n                     }\n\n\n\n\n\n.datePickerEncloseDivClass{\n    position: relative;\n\ndisplay: flex;\nflex-direction: row;\njustify-content: space-around;\nalign-items: center;\n\n    width: 100%;\n    height: 70px;\n\n    margin-bottom: 10px;\n    padding: 0px;\n/*Development\n    border: 3px dotted rgb(238, 234, 22) */\n                          }\n\n\n\n/*The div that encloses the <p> \nfor the text \"Priority\" in the todo*/\n.priorityPencloseDivClass{\n    position: relative;\n        \n    z-index: 1;\n    \n    background-color: rgb(236, 185, 236);\n    border-radius: 6px;\n    border: rgb(235, 126, 23) 3px solid;\n    \n    width: 45%;\n    height: 85%;\n                            }\n\n\n/*The <p> for the text \"Priority\" in the todo*/\n.bottomViewTodoPriorityTextP{\n    position: absolute;\n    top:0px;\n    left:3px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    letter-spacing: 1px;\n    color: rgb(146, 135, 135);\n    width:97%;\n    height: 19px;\n    margin-left: 0px;\n    /*deveopment:\n    border: red 2px dotted;*/\n    padding: 0px;\n    margin: 0px;\n                            }\n\n/*For the div that contains the RBs*/\n.rbContainerDiv{\nposition: absolute;\ntop:22px; \nleft:1px;   \n\nwidth: 95%;\nheight: 38px;\n\ndisplay: flex;\nflex-direction: row;\njustify-content: space-evenly;\nalign-items: flex-start;\n\n/*Development\nborder: rgb(198, 226, 43) 1px solid; */\n\n               }\n\n\n/*Now the labels for the radio buttons.\nNote that the class name of each label\nis the same as the id for its \ncorresponding RB*/\n               \n/*For the label for the very low radio button*/\n.veryLowRB{\nposition: absolute;\ntop: 17px;\nright: 93px ;\nfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\nfont-size: 16px;\n\npadding: 0px;\nmargin: 0px;\n          }\n/*For the very low RB */\n#veryLowRB{\n    position: relative;\n    /**/\n    /*\n    top: 5px;\n    right: 110px ; */\n}\n\n\n/*For the label for the low radio button*/\n.lowRB{\n    position: absolute;\n    top: 17px;\n    right: 75px ;\n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    font-size: 16px;\n\n    padding: 0px;\n    margin: 0px;\n              }\n/*For the low RB */\n#lowRB{\n    position: relative;\n    /*\n    top: 5px;\n    right: 90px ; */\n}\n\n/*For the label for the medium radio button*/\n.mediumRB{\n    position: absolute;\n    top: 17px;\n    right: 52px ;\n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    font-size: 16px;\n\n    padding: 0px;\n    margin: 0px;\n        }\n\n/*For the medium RB */\n#mediumRB{\n    position: relative;\n    /**/\n    /*\n    top: 5px;\n    right: 65px ;*/\n         }\n\n/*For the label for the high radio button*/\n.highRB{\n    position: absolute;\n    top: 17px;\nright: 30px;\nfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    font-size: 16px;\n\n    padding: 0px;\n    margin: 0px;\n        }\n\n/*For the high RB */\n#highRB{\n    position: relative;\n    /**/\n    /*\n    top: 5px;\n    right: 40px ; */\n       }\n\n\n/*For the label for the very high radio button*/\n.veryHighRB{\n    position: absolute;\n    top: 17px;\n    right: 1px;\n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    font-size: 16px;\n\n    padding: 0px;\n    margin: 0px;\n           }\n/*For the very high RB */\n#veryHighRB{\n    position: relative;\n    /**/\n    /*\n    top: 5px;\n    right: 10px ; */\n          }\n\n\n\n\n\n/* ---------- */\n\n/*The all-enclosing <div> for the description\nelements of the todo. This div contains the <p> for text \n\"Description\" and the div in which the user \ntypes the text ofthe description of the todo*/\n.descrAllEncloseDivClass{\n       \n    position: relative;\n    width: 95%;\n    height: fit-content;    \n\n    margin-bottom: 10px;\n    padding: 0px;\n\n    background-color: rgb(236, 185, 236);\n    border-radius: 6px;\n    border: rgb(235, 126, 23) 3px solid;\n                               }\n\n\n/*The div that contains the <p> for \nthe text \"Description\" in the todo*/\n.descrPencloseDivClass{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    \n    position: relative;\n    width: 95%;\n    height: 20px;    \n\n    margin: 0px;\n    padding: 0px;\n\n    /*Development\n    border: rgb(235, 48, 15) dotted 1px; */\n                     }\n\n/*The <p> for the text \"Description\" in the todo*/\n.bottomViewTodoDescriptionTextP{\n    position: absolute;\n    top:0px;\n    left:3px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    letter-spacing: 1px;\n    color: rgb(146, 135, 135);\n    width:97%;\n    height: 19px;\n    margin-left: 0px;\n    /*deveopment:\n    border: red 2px dotted;*/\n    padding: 0px;\n    margin: 0px;\n\n                               }\n    \n/*The <div> in which user types \nthe description of the todo*/\n.bottomViewTodoDescriptionDiv{\n    position: relative;\n    left:2px;\n    width: 98%;\n    height: 100px;         \n\n    font-family: 'Open Sans-Italic';\n    font-size: 16px;\n    color: rgb(28, 4, 51);\n    \n    border:rgb(90, 157, 201) 1px solid;\n\n    margin: 0px;\n    padding: 0px;\n\n    overflow-y: scroll;\n                         }\n\n\n\n/*NOW NOT NEEDED */\n/* The \"New heading\" button that appears in \nthe bottom-view project folder div */\n#newHeadButtDivBottViewID{\nposition: absolute;\ntop: 3px;\nright: 15px; \n                         }\n/*NOW NOT NEEDED */\n/* The \"New todo\" button that appears in \nthe bottom-view project folder div */\n#newTodoButtDivBottViewID{\n    position: absolute;\n    top: 3px;\n    right: 140px; \n                         }\n\n\n\n/* General dialog box to take in user input in \none input. Code sets the display value to \n\"block\" whenaim is to show the dialog box or\n\"none\" when the aim is to make the dialog box\ndisappear (ie when user hits \"Cancel\" or \nthe \"Submit\" button's callback has finished)*/\n.generalNameEntryBoxDiv{\nz-index: 5;\n\ndisplay: block;\n    \nposition: absolute;\n/* Code sets top and left attribs */\nwidth: 250px;\nheight: 250px;\n\nbackground-color: rgb(34, 132, 212);\nborder: chocolate 4px solid;\n\n                    }\n\n\n/* <p> for the general dialog box's \ntitle */\n.generalNameEntryBoxP{\n    position: absolute;\n    top : 15px;\n    left: 15px;\n    \n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n    font-size: 16px;   \n        \n                    }\n\n/* For the General dialog box's \ninput*/\n#generalNameEntryBoxInput{\n    position: absolute;\n    \n    top: 60px;\n    left: 15px;\n    \n    width: 150px;\n    height: 25px;\n    \n    background-color: rgb(211, 227, 240);\n    border: rgb(59, 29, 8) 1px solid;\n    \n                        }\n\n                       \n/* jQuery UI datepicker stuff follows */\n/* ----------  ----------  ----------  ----------  ----------  ---------- */\n\n/*date picker stuff:*/\n\n/*The <div> that contains \nthe <p> for text \"Pickdeadline \nand the input in \nwhich the jquery datepicker sits*/\n.datePicker1Class{\n    position: relative;\n        \n    z-index: 1;\n    \n    background-color: rgb(236, 185, 236);\n    border-radius: 6px;\n    border: rgb(235, 126, 23) 3px solid;\n    \n    width: 45%;\n    height: 85%;\n\n                }\n    \n/*The <p> that reads \"Pick deadline\"*/\n.deadlineDatePickP{\n    position: absolute;\n    top:0px;\n    left:3px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    letter-spacing: 1px;\n    color: rgb(146, 135, 135);\n    width:97%;\n    height: 19px;\n    margin-left: 0px;\n    /*deveopment:\n    border: red 2px dotted;*/\n    padding: 0px;\n    margin: 0px;\n}\n\n/* For the input. The user clcks in \nthis element to make the jQ date \npicker appear. This is where the date\ntext appears after users election from\nthe jQ date picker) */\n.datePickInputClass{\n    position: absolute;\n    top: 25px;\n    left: 2px;\n    background-color: rgb(212, 129, 154);\n    width: 90%;\n    height: fit-content;\n    margin-left: 0px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 18px;\n    color: rgb(112, 112, 112);\n                   }\n\n\n    /*One way of styling the text in the jquery datepicker.\n    However, it only styles the calendar:\n    .ui-widget { \n        font-family: Verdana,Arial,sans-serif; \n        font-size: 18px;\n        width: 260px;\n        background-color: floralwhite;\n               }\n    */\n    \n/* For all <a>s in the datepicker, which is \nwhat each date number is */ \n.ui-datepicker a {\n        color: #d35c5c;\n    }\n\n    \n    /* All styles that follow that beginwith \n    ui-datepicker are from the css file in jqueryUI\n    for the datepicker: */ \n\n\n    /*For the all-enclosing div of \n    the datepicker*/\n        .ui-datepicker {\n        width: 400px;\n        height: 330px;\n        padding: .2em .2em 0;\n        display: block;\n\n        /*Me:use of \"important!\" overrides the z-index that \n        jQ gives this div inline (a z-index of value 2)*/\n        z-index:16 !important;\n        border-radius: 10px;\n        border: #531010 7px outset;\n        background-color: rgb(235, 209, 241);\n        box-shadow: #070707 15px 15px 15px;\n                    }\n\n    .ui-datepicker .ui-datepicker-header {\n        position: relative;\n        padding: .2em 0;\n\n\n                                         }\n    .ui-datepicker .ui-datepicker-prev,\n    .ui-datepicker .ui-datepicker-next {\n        position: absolute;\n        top: 2px;\n        width: 1.8em;\n        height: 1.8em;\n        \n    }\n    .ui-datepicker .ui-datepicker-prev-hover,\n    .ui-datepicker .ui-datepicker-next-hover {\n        top: 1px;\n    }\n    \n    /*The text \"Prev\"*/\n    .ui-datepicker .ui-datepicker-prev {\n        font-family: 'Open Sans-Condensed-ExtraBold';\n        left: 2px;\n        top: -10px;\n        font-size: 24px;\n        color: rgb(173, 114, 114);\n                                       }\n    /*The text \"Next\"*/\n    .ui-datepicker .ui-datepicker-next {\n        font-family: 'Open Sans-Condensed-ExtraBold';\n        font-size: 24px;\n        color: rgb(173, 114, 114);\n        right: 30px;\n        top: -10px;\n                                        }\n    .ui-datepicker .ui-datepicker-prev-hover {\n        /**/\n        /*left: 1px;*/\n    }\n    .ui-datepicker .ui-datepicker-next-hover {\n        /*right: 1px;*/\n    }\n    .ui-datepicker .ui-datepicker-prev span,\n    .ui-datepicker .ui-datepicker-next span {\n        display: block;\n        position: absolute;\n        left: 50%;\n        margin-left: -8px;\n        top: 50%;\n        margin-top: -8px;\n    }\n    .ui-datepicker .ui-datepicker-title {\n        font-family: 'Open Sans-Italic';\n        font-size: 28px;\n        margin: 0 2.3em;\n        line-height: 1.8em;\n        text-align: center;\n        background-color: #e2c3c3;\n    }\n    .ui-datepicker .ui-datepicker-title select {\n        font-size: 1em;\n        margin: 1px 0;\n    }\n    .ui-datepicker select.ui-datepicker-month,\n    .ui-datepicker select.ui-datepicker-year {\n        width: 45%;\n                                             }\n\n/* Styles follow for the date-picker table*/\n    .ui-datepicker table {\n        width: 100%;\n        font-family: 'Open Sans-Condensed-ExtraBold';\n        font-size: 26px;\n        border-collapse: collapse;\n        margin: 0 0 .4em;\n        \n    }\n    .ui-datepicker th {\n        padding: 0px;\n        /*padding: .7em .3em;*/\n        /*text-align: center;\n        font-weight: bold;*/ \n        border: 0;\n        color: #3a1053;\n    }\n    .ui-datepicker td {\n        border: 0;\n        padding: 0px;\n    }\n    .ui-datepicker td span,\n    .ui-datepicker td a {\n        display: block;\n        padding: .2em;\n        text-align: center;\n        text-decoration: none;\n    }\n    .ui-datepicker .ui-datepicker-buttonpane {\n        background-image: none;\n        margin: .7em 0 0 0;\n        padding: 0 .2em;\n        border-left: 0;\n        border-right: 0;\n        border-bottom: 0;\n    }\n    .ui-datepicker .ui-datepicker-buttonpane button {\n        float: right;\n        margin: .5em .2em .4em;\n        cursor: pointer;\n        padding: .2em .6em .3em .6em;\n        width: auto;\n        overflow: visible;\n    }\n    .ui-datepicker .ui-datepicker-buttonpane button.ui-datepicker-current {\n        float: left;\n    }\n    \n    /* with multiple calendars */\n    .ui-datepicker.ui-datepicker-multi {\n        width: auto;\n    }\n    .ui-datepicker-multi .ui-datepicker-group {\n        float: left;\n    }\n    .ui-datepicker-multi .ui-datepicker-group table {\n        width: 95%;\n        margin: 0 auto .4em;\n    }\n    .ui-datepicker-multi-2 .ui-datepicker-group {\n        width: 50%;\n    }\n    .ui-datepicker-multi-3 .ui-datepicker-group {\n        width: 33.3%;\n    }\n    .ui-datepicker-multi-4 .ui-datepicker-group {\n        width: 25%;\n    }\n    .ui-datepicker-multi .ui-datepicker-group-last .ui-datepicker-header,\n    .ui-datepicker-multi .ui-datepicker-group-middle .ui-datepicker-header {\n        border-left-width: 0;\n    }\n    .ui-datepicker-multi .ui-datepicker-buttonpane {\n        clear: left;\n    }\n    .ui-datepicker-row-break {\n        clear: both;\n        width: 100%;\n        font-size: 0;\n    }\n    \n    /* RTL support */\n    .ui-datepicker-rtl {\n        direction: rtl;\n    }\n    .ui-datepicker-rtl .ui-datepicker-prev {\n        right: 2px;\n        left: auto;\n    }\n    .ui-datepicker-rtl .ui-datepicker-next {\n        left: 2px;\n        right: auto;\n    }\n    .ui-datepicker-rtl .ui-datepicker-prev:hover {\n        right: 1px;\n        left: auto;\n    }\n    .ui-datepicker-rtl .ui-datepicker-next:hover {\n        left: 1px;\n        right: auto;\n    }\n    .ui-datepicker-rtl .ui-datepicker-buttonpane {\n        clear: right;\n    }\n    .ui-datepicker-rtl .ui-datepicker-buttonpane button {\n        float: left;\n    }\n    .ui-datepicker-rtl .ui-datepicker-buttonpane button.ui-datepicker-current,\n    .ui-datepicker-rtl .ui-datepicker-group {\n        float: right;\n    }\n    .ui-datepicker-rtl .ui-datepicker-group-last .ui-datepicker-header,\n    .ui-datepicker-rtl .ui-datepicker-group-middle .ui-datepicker-header {\n        border-right-width: 0;\n        border-left-width: 1px;\n    }\n    \n    /* Icons \n    Me: these are todo with the \"Prev\" and \"Next\" words.\n\n       */\n    .ui-datepicker .ui-icon {\n        display: block;\n        text-indent: 0px; /*-99999px;*/\n        overflow: hidden;\n        background-repeat: no-repeat;\n        left: .5em;\n        top: .3em;\n                            }\n\n/*The form in which user inputs \nthe name of a new project, new \nheading or new todo*/\n.newFormOuterDiv{\nposition: absolute;\ntop: 50px;\nleft: 400px;\n\nz-index: 25;\n\nwidth: 300px;\nheight: fit-content;\n\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\nalign-items: center;\n\nbackground-color: rgb(172, 144, 216);\nbox-shadow: rgb(0, 0, 0) 18px 18px 18px;\nborder: 2px solid rgb(179, 105, 105);\nborder-radius: 5px;\n                }\n\n/*The container div for the form <p>\n(which reads \"Type new name\") */\n.newFormPcontainerDiv{\n    position:relative;\n    left: 10px;\n    top: -2px;\n    margin:0px;\n    padding:0px;\n    \n    width: 100%;\n    height: 36px;\n    /*development: \n    border:rgb(0, 0, 0) 1px dotted;*/\n                         }\n\n/*The <p> \n(which reads \"Type new name\") */\n.newFormP{\n    margin:0px;\n    padding:0px;\n\n    position:relative;\n    width: 100%;\n    \n    font-family: 'Open Sans-Italic';\n    font-size: 26px;\n    color: rgb(207, 184, 184);\n    \n                         }\n\n\n\n/*The container div for the form input*/\n.newFormInputContainerDiv{\n    position:relative;\n    width: 100%;\n    height: 36px;\n    /*development:\n    border:rgb(0, 0, 0) 1px dotted; */\n                         }\n\n.newFormInput {\nposition: relative;\nleft: 10px;\n\nheight: 25px;\nwidth: 75%;\n              }\n\n\n.newFormLabel{\nfont-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\nfont-size: 16px;\nposition: relative;\nleft: 10px;\n             }\n\n/*The container div for the form buttons*/\n.newFormButtonsContainerDiv{\n    position:relative;\n    display: flex;\nflex-direction: row;\njustify-content: space-between;\nalign-items: center;\n    width: 95%;\n    height: 46px;\n    /*development: \n    border:rgb(0, 0, 0) 1px dotted;*/\n                         }\n\n             \n\n\n#newFormSubmitButtonID{\n\n}\n\n#newFormCancelButtonID{\n\n}\n\n\n/*-----------------------------------------------------------------------------------*/\n\n\n/*ANIMATION KEYFRAMES FOLLOW*/\n@keyframes grow1 { \n    0% { \n        transform: scaleY(0); \n        transform: scaleX(0); \n        opacity:0.3;\n        } \n\n    50% { \n        /*transform: scaleY(1.2); */\n        transform: scaleX(1.2); \n        opacity:0.5;\n        } \n\n    100% { \n        transform: scaleY(1); \n        transform: scaleX(1); \n        opacity:1.0;\n        } \n\n}\n\n@keyframes growMenu {\n    from {height: 0px;}\n    to {height: fit-content;}\n  }\n\n\n/*-------------------------------------*/\n\n\n/*-- Classes for the rightmost button\nbar and the buttons in it --*/\n.rightMostButtonBar{\n    position: absolute;\n    top: 346px;\n    left: 585px;\n    \n    width: 150px;\n    height: 40px;\n    \n    background-color: rgb(209, 184, 238);\n    border: rgb(224, 134, 134) 3px outset;\n    border-radius: 5px;\n    z-index: 10;\n    }\n\n        \n\n/*-- Classes for ddMenu that uses javascript \nto animate the movement of the ddMenu \n(produces moevement that is a bit clunky \nas you cannot use a timing curve)---*/\n\n/*\nNOTE: NO LONGER USED!\nThe div to which code appends \nthe ddmenus. This div has the copper border\nand is the middle of the three button bars\n\n.testMenuEnclDiv{\nposition: absolute;\ntop: 346px;\nleft: 400px;\n\nwidth: 150px;\nheight: 40px;\n\nbackground-color: rgb(209, 184, 238);\nborder: rgb(224, 134, 134) 3px outset;\nborder-radius: 5px;\nz-index: 10;\n}\n*/\n\n\n\n\n/*-NOTE: code makes the style attributes of the \nmenuAllEnclDiv in the function that makes \nthe ddlist, hence there is no hard-coded class\nfor that div here-*/\n\n.menuDiv{\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n\nposition: relative;\n\n    width: 93%;\nheight: 30px;\n\nbackground-color: rgb(115, 29, 212);\nborder: rgb(224, 134, 134) 3px outset;\nborder-radius: 5px;\n\nz-index: 15;\n        }\n\n\n.menuItemsEnclDiv{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n    \n    position: relative;\n    top: -120px;\n\n    width: 95%;\n    \n    background-color: none;\n    /*\n    border: rgb(14, 13, 13) 3px dotted; *//* nearly black*/\n    border-radius: 5px;\n\n    z-index: 10;\n\n    overflow-y: hidden;\n\n    }\n    \n.menuItemDiv{\n        position: relative;\n                \n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n\n        width: 90%;\n        height: 30px;\n        \n        background-color: rgb(115, 29, 212);\n        border: rgb(224, 134, 134) 3px outset;\n        border-radius: 5px;\n        }\n    \n.menuItemP{\nfont-size: 16px;\nline-height: 17px;\nfont-family: 'Open Sans-Condensed-ExtraBold';\ncolor: #e5baba;\n\n          }\n\n/*-------------------------------------*/\n/*-- Classes for ddMenu that uses transform and transition ---*/\n/*-- Note that the div to which to append the menu is \nthe same as in the case of the ddMenu made using javascript,\nhence does not appear here ---*/\n\n/*-NOTE: code makes the style attributes of the \nallEnclDiv in the function that makes \nthe ddlist, hence there is no hard-coded class\nfor that div here-*/\n\n/*For the div that includes text \"Menu\"\n(or whatever the title of the DDmenu is\n(in the case of this app, \"How to use \nthis app\"))*/\n    .menuDiv1{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    \n    position: relative;\n    min-width: 80px;\n    width: fit-content;\n    height: 30px;\n    \n    background-color: rgb(115, 29, 212);\n    border: rgb(224, 134, 134) 3px outset;\n    border-radius: 5px;\n    \n    padding-left: 5px;\n    padding-right: 5px;    \n\n    z-index: 15;\n            }\n\n.menuDiv1:active{   \n    transform: translateY(4px);\n    transform: translateX(4px);\n    box-shadow: black 1px 1px 1px;\n                   } \n\n\n/*A div that encloses all of the \nddmenu items. This div slides up and down\nas the user clicks either the menu items \nor the menu div*/\n    .menuItemsEnclDiv1{\n        \n        \n        position: relative;\n        /*top value set in dynamically*/\n        left: 0px;\n        width: 98%;\n        \n        /* nearly black in dev:\n        border: rgb(14, 13, 13) 3px dotted;  */\n        border-radius: 5px;\n    \n        z-index: 10;\n        \n        overflow-x: hidden;\n            overflow-y: hidden;\n                      }\n\n/*A div for each menu item*/        \n    .menuItemDiv1{\n            position: relative;\n            left:0px;      \n            /* Code sets top dynamically */  \n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n\n            width: 91px;\n            /*width: fit-content;*/\n            height: 30px;\n            \n            background-color: rgb(115, 29, 212);\n            border: rgb(224, 134, 134) 3px outset;\n            border-radius: 5px;\n            /*offsetHeight is height + 2*border\n            or 36px\n            */\n            overflow-x: hidden;\n            overflow-y: hidden;\n\n            }\n.menuItemDiv1:active{   \n    box-shadow: #d6c14c 5px 0px 5px, #d6c14c  -5px 0px 5px; \n    /*\n    transform: translateY(4px);\n    transform: translateX(4px);\n    box-shadow: black 1px 1px 1px;\n    */\n                    } \n\n\n/* The <p> for the title of each menu item*/\n    .menuItemP1{\n    font-size: 16px;\n    line-height: 17px;\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    color: #f5efef;\n    \n              }\n              \n/*-----------------------------------------------------------------------*/\n\n/*-------------------------------------*/\n/* Styles for the mobile-phone menu  */\n/*-------------------------------------*/\n\n/* A div with which you can quickly visually \ncompare an element to get a rough  \nidea of the length of that element */\n.rulerDiv{\n\nposition: absolute;\ntop: 70px;\nright: 0px;\n\nwidth: 78px;\nheight: 40px;\n\nbackground-color: #8a1010;\n\npadding: 0px;\nmargin: 0px;\n\n        }\n\n.rulerDivPosR{\n    top: 80px;\n    right: 0px;\n             }\n\n.rulerDivPosL{\n    top: 150px;\n    left: 0px;\n             }\n\n\n\n.visTestDiv{\nbackground-color: #a2bbe0;\nborder: #58f50a 1px dotted;\n\nposition: absolute;\ntop: 100px;\nleft:100px;\n\nwidth: 260px; \nheight: 250px;\n\nz-index: 35;\n\n/* 'visibility' makes an element\ninvisible but keeps it in its  \noriginal position and maintains\nits size: */\n/* visibility: hidden;  */\n           }\n\n\n/*-- style for the div that \nencloses the main menu items \n--*/\n.menuEncloseDiv{\nposition: absolute;\n\n/*Code sets the left property\nby adding another class*/\n\n/*display: block;*/\n\ndisplay: flex;\nflex-direction: row;\njustify-content: flex-start;\nalign-items: center;\n\n\nborder: #000000 1px dotted;\n/*\nborder-top: #000000 2px dotted;\nborder-bottom: #000000 2px dotted; */\n\n/*  */\nwidth:fit-content;\nheight: 50px;\n\nmargin: 0px;\npadding: 0px;\n\noverflow-x: hidden;\noverflow-y: hidden;\n\n               }\n\n\n/*-- style for the div that \nencloses the \"More...\" menu item\n --*/\n \n.moreEncloseDiv{\n    position: absolute;\n    /*Code sets the right property\n    by adding another class*/\n    \n    \n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n    \n    /*\n    border: #f20f0f 1px dotted;\n    border-top: #000000 2px dotted;\n    border-bottom: #000000 2px dotted; */\n    \n    border-left: #f20f0f 1px dotted;\n    border-right: #0f31f2 1px dotted;\n\n    margin: 0px;\n    padding: 0px;\n\n    /*  */\n    width:fit-content;\n    height: 50px;\n    \n    overflow-x: hidden;\n    overflow-y: hidden;\n\n    visibility: visible;\n    \n                   }\n\n/*-- for the div that encloses the \nmain menu items (which has main class \nmenuEncloseDiv) --*/\n.mainItemsEnclDivLeftPos{\n    top: 0px;\n    left: 0px;\n    \n                        }\n                        \n/*-- for the div that encloses the \n\"More...\" menu item (which has main class \nmoreEncloseDiv) --*/\n.moreItemEnclDivRightPos{\n    top: 0px;\n    right: 0px;\n    /*Code sets width*/\n                        }\n\n\n/*-- for the div that encloses the \nmain menu items in the case of the \nhard-coded items--*/\n.HCmainItemsEnclDivLeftPos{\n    left: 0px;\n    top: 100px;\n                        }\n\n/*-- for the div that encloses the \n\"More...\" menu item in the case of \nthe hard-coded \nitems --*/\n.HCmoreItemEnclDivRightPos{\n    top: 120px;\n    right: 0px;\n\n    /*Code sets width*/\n                        }\n\n/*-- the div for a menu item \nand the div for the \"More...\"\nitem --*/\n.menuItemDiv{\n\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n\nwidth: fit-content;\nheight: 40px;\n    \noverflow-x: hidden;\noverflow-y: hidden;\n\nbackground-color: #dcdbab;\nborder: #531010 1px solid;\n\nmargin-left: 5px;\nmargin-right: 5px;\n\npadding-left: 10px;\npadding-right: 10px;\n\n            }\n            \n/*-- the <p> for the text \nof the menu item --*/\n.menuItemP{\n/*-- DON\"T USE THE FOLLOWING AS IT MUCKS UP \noffsetWidth:\nfont-family: 'Open Sans-ExtraBold';   --*/\n/*I have tested the following font and it seems \nto work: */\nfont-family: 'Open Sans-Condensed-ExtraBold'; \nfont-size: 14px;\nline-height: 15px;\n/*\nwhite-space: nowrap;\noverflow: hidden;\ntext-overflow: clip;\n*/\n\ncolor: #4a0a6f;\n\npadding: 0px;\nmargin: 0px;\n         }\n\n\n\n/*-- the <p> for the text \nof the \"More\" menu item --*/\n.menuMoreItemP{\n/*I have tested the following font and it seems \nto work:    */    \n    font-family: 'Open Sans-Italic';\n    font-size: 14px;\n    line-height: 16px;\n    color: #52089d;\n    /*NOTE letter-spacing has no effect on this font!!*/\n    \n             }\n\n\n/*-- DON't USE -- DON't USE -- DON't USE \nThis style contains the dodgy font!!\nThe <p> for the text \nof the \"More\" menu item --*/\n.dodgyFontP{\n    font-family: 'Open Sans-ExtraBold';\n    font-size: 14px;\n    line-height: 15px;\n    color: #52089d;\n    \n             }\n\n/* -- \nThe div that drops down \nwhen the user clicks \"More...\" \n--*/ \n.remainderItemsDiv{\ndisplay: flex;\nflex-direction: column;\njustify-content: flex-start;\nalign-items: flex-end;\n\nposition: absolute;\n/* Code sets top and right values*/\n\nbackground-color: none; \nborder-radius: 5px;\ntransform-origin: top left;\ntransition: transform 0.3s ease-in-out 0s;\n                  }\n\n.remainderItemsDivExpand{\n    \ntransform: scaleY(1);\nheight: fit-content;\nwidth: fit-content;\n                        }\n\n.remainderItemsDivShrink{\n    \n    transform: scaleY(0);\n\n    height: fit-content;\n    width: fit-content;\n                        }\n\n\n\n\n\n\n\n\n\n\n/*-------------------------------------*/\n/* End styles for mobile-phone menu  */\n/*-------------------------------------*/\n\n\n\n\n\n\n\n\n\n\n\n\n/*-------------------------------------*/\n/*TEST STUFF TEST STUFF TEST STUFF TEST STUFF TEST STUFF TEST STUFF TEST STUFF*/\n/*-------------------------------------*/\n\n.testDiv0{\n    display: block;\n    position: absolute;\n    left: 500px;\n    top: 200px;    \n\n   width: 200px;\n    height: 200px;\n    background-color: rosybrown;\n    border: royalblue 1px solid;\n\n    padding: 0px;\n    margin: 0px;\n\n    z-index: 10;\n\n        }\n", "",{"version":3,"sources":["webpack://./src/styles.css"],"names":[],"mappings":"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","sourcesContent":["/* Animation code */\n\n/* keyframes */\n\n/* To make the message text fade in and fade out */\n@keyframes messageFadeInOut {\n    0% {color: rgb(247, 20, 8); opacity: 0;}\n    35% {color: rgb(247, 20, 8); opacity: 1;}\n    50% {color: rgb(247, 20, 8); opacity: 0.65;}\n    65% {color: rgb(247, 20, 8); opacity: 1;}\n    100% {color: rgb(247, 20, 8); opacity: 0;}\n                        }\n\n/* To make the arrows flash. \nEach arrow is a character ('6') \nin the webdings font */\n@keyframes arrowsFlash {\n    /*\n    0% {color: #000; opacity: 1;}\n    50% {color: rgb(247, 20, 8); opacity: 0.7;}\n    100% {color: #000000; opacity: 0;}\n    */\n    0% {color: #000000; opacity: 0;}\n    50% {color: #000000; opacity: 1;}\n    100% {color: #000000; opacity: 0;}\n                       }\n\n/* To make the divs that contain \nthe arrows flash */\n@keyframes arrowDivFlash {\n    0% {background-color: rgb(247, 20, 8); opacity: 0;}\n    50% {background-color: rgb(247, 20, 8); opacity: 1;}\n    100% {background-color: rgb(247, 20, 8);  opacity: 0;}\n                        }\n\n\n\n/* The classes to add to an element \n(which triggers the animation) */\n\n/* Applied to <p> of id firstInfoAreaP \nand firstInfoAreaOneP\n*/\n.messageTextFadeInOut{\n    font-family: 'DotGothic16-Regular';\n    font-size: 48px;    \n    line-height: 48px;\n    padding: 0px;\n    margin: 0px;\n    animation-name: messageFadeInOut;\n    animation-duration: 1.3s;\n    animation-timing-function: linear;\n    animation-iteration-count: 1;\n                     }\n                        \n\n\n\n/* Test stuff */\n\n.testButton{\n    position: absolute;\n    left: 650px;\n    top: 150px;\n    width: 60px;\n    height: 60px;\n    z-index: 40;\n    background-color: #c70cc7;\n    box-shadow: 3px 3px 3px black;\n          }\n\n.testButton:active{   \n        transform: translateY(4px);\n        transform: translateX(4px);\n        box-shadow: black 1px 1px 1px;\n                  } \n    \n\n/* ----------- ----------- ----------- ----------- ----------- */\n\n/*Fonts*/\n\n\n@font-face {\n    font-family: 'Webdings'; /* This is a name of your choosing*/\n      src: url('./fonts/Webdings.ttf') format('truetype');\n      /* font-weight: 600;\n      font-style: normal; */\n           }\n\n\n\n\n@font-face {\n    font-family: 'DotGothic16-Regular'; /* This is a name of your choosing*/\n      src: url('./fonts/DotGothic16/DotGothic16-Regular.ttf') format('truetype');\n      /* font-weight: 600;\n      font-style: normal; */\n           }\n\n\n\n@font-face {\n    font-family: 'RubikMaze-Regular'; /* This is a name of your choosing*/\n      src: url('./fonts/Rubik_Maze/RubikMaze-Regular.ttf') format('truetype');\n      /* font-weight: 600;\n      font-style: normal; */\n           }\n\n@font-face {\n    font-family: 'ZillaSlabHighlight-Bold'; /* This is a name of your choosing*/\n      src: url('./fonts/Zilla_Slab_Highlight/ZillaSlabHighlight-Bold.ttf') format('truetype');\n      /* font-weight: 600;\n      font-style: normal; */\n           }\n\n\n@font-face {\n    font-family: 'ZillaSlabHighlight-Regular'; /* This is a name of your choosing*/\n      src: url('./fonts/Zilla_Slab_Highlight/ZillaSlabHighlight-Regular.ttf') format('truetype');\n      /* font-weight: 600;\n      font-style: normal; */\n           }\n\n\n\n\n@font-face {\n    font-family: 'BigShouldersStencilText-Black'; /* This is a name of your choosing*/\n      src: url('./fonts/Big_Shoulders_Stencil_Text/static/BigShouldersStencilText-Black.ttf') format('truetype');\n      /* font-weight: 600;\n      font-style: normal; */\n           }\n\n@font-face {\n    font-family: 'BigShouldersStencilText-Light'; /* This is a name of your choosing*/\n      src: url('./fonts/Big_Shoulders_Stencil_Text/static/BigShouldersStencilText-Light.ttf') format('truetype');\n      /* font-weight: 600;\n      font-style: normal; */\n           }\n\n/* */\n@font-face {\n    font-family: 'StardosStencilBold'; /* This is a name of your choosing*/\n      src: url('./fonts/Stardos_Stencil/StardosStencil-Bold.ttf') format('truetype');\n      /* font-weight: 600;\n      font-style: normal; */\n           }\n\n@font-face {\n    font-family: 'StardosStencilRegular'; /* This is a name of your choosing*/\n      src: url('./fonts/Stardos_Stencil/StardosStencil-Regular.ttf') format('truetype');\n      /* font-weight: 600;\n      font-style: normal; */\n           }\n\n           /*------*/\n\n/*For the large buttons*/\n@font-face {\n    font-family: 'Open Sans-Condensed-ExtraBold'; /* This is a name of your choosing*/\n      src: url('./fonts/Open_Sans/static/OpenSans_Condensed/OpenSans_Condensed-ExtraBold.ttf') format('truetype');\n      /* font-weight: 600;\n      font-style: normal; */\n           }\n\n/*For the title of the topView PF or TD*/\n@font-face {\n    font-family: 'Open Sans-Bold';\n      src: url('./fonts/Open_Sans/static/OpenSans/OpenSans-Bold.ttf') format('truetype');\n           }\n\n/*For the title of the topView PF or TD*/\n@font-face {\n    font-family: 'Open Sans-Italic';\n      src: url('./fonts/Open_Sans/static/OpenSans/OpenSans-Italic.ttf') format('truetype');\n           }\n\n/*For the title of under-heading TDs*/\n@font-face {\n    font-family: 'Open Sans-SemiBold';\n      src: url('./fonts/Open_Sans/static/OpenSans/OpenSans-SemiBold.ttf') format('truetype');\n           }\n\n/* Originally for the bottomView PF title*/\n/* DONT USE!!!! Using this font for the text in \na <p> in a <div> that code makes dynamically \nproduces an eroneous value for \ntheDiv.offsetWidth !!!!!!! (NOTE it seems to produce \nthe correct value when the div is hard-coded \nin html!!)*/\n@font-face {\n    font-family: 'Open Sans-ExtraBold';\n      src: url('./fonts/Open_Sans/static/OpenSans/OpenSans-ExtraBold.ttf') format('truetype');\n           }\n\n/* For the Select div's <p>\n@font-face {\n    font-family: 'Open Sans-ExtraBold';\n      src: url('./fonts/Open_Sans/static/OpenSans/OpenSans-ExtraBold.ttf') format('truetype');\n           }\n           */\n\n\n/*TESTING STUFF TESTING STUFF TESTING STUFF*/\n\n/*An alert box*/\n\n/*An alert box*/\n.alertBoxText{ \nfont-family: 'Courier New', Courier, monospace;\nfont-size: 36px;\ncolor: #dd1c1c;\n\n\n}\n/*TESTING STUFF TESTING STUFF TESTING STUFF*/\n\n.testText{\n\n    font-family: 'Webdings';\n    font-size: 72px;\n    line-height: 72px;\n\n    padding: 0px;\n    margin: 0px;\n\n       }\n\n.testImageBox{ \n    position: absolute;\n    top: 100px;\n    left: 100px;\n    z-index: 10;\n    border: #0f31f2 10px solid;\n    width: 500px;\n    height: 500px;\n    \n    background-color: none;\n    \n    }\n\n\n\n/*END TESTING STUFF TESTING STUFF TESTING STUFF*/\n\n/*The box that shows alert \n\"Game over! You/theenemy have/has won*/\n.gameOverBox{ \n    visibility: hidden;\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-end;\n\n    z-index: 160;\n    background-color: #caa3f0;\n    position: absolute;\n    top: 200px;\n    left: 65px;\n    \n    width: 515px;\n    height: 180px;\n    \n    border: #f21a0f 20px ridge;\n    border-radius: 10px;\n                }\n    \n/*The <p> for the text that reads \n\"Game over! You/theenemy have/has wo\"\nand that appears in the game over box\nabove*/\n.gameOverText{\n    /* font-family: 'Open Sans-Bold';*/\n    font-family: 'DotGothic16-Regular';\n    font-size: 70px;\n    line-height: 70px;\n    margin: 10px;\n    padding: 0px;\n    color: #39035d;\n\n             }\n\n\n\n/*For the Webdings text for the \n<p> of the down arrows*/\n.webdingsText1{\n    position: absolute;\n    top: -14px;\n    left: -4px;\n    \n    font-family: 'Webdings';\n    font-size: 52px;\n    line-height: 52px;\n\n    padding: 0px;\n    margin: 0px;\n\n    animation-name: arrowsFlash;\n    animation-duration: 1.5s;\n    animation-timing-function: linear;\n    animation-iteration-count: infinite;\n\n}\n\n/*For the Webdings text for the \n<p> of the down arrows*/\n.webdingsText2{\n    position: absolute;\n    top: -14px;\n    left: -4px;\n    \n    font-family: 'Webdings';\n    font-size: 52px;\n    line-height: 52px;\n\n    padding: 0px;\n    margin: 0px;\n\n    animation-name: arrowsFlash;\n    animation-duration: 1.5s;\n    animation-timing-function: linear;\n    animation-iteration-count: infinite;\n    animation-delay: 0.5s;\n\n              }\n\n/*For the Webdings text for the \n<p> of the down arrows*/\n.webdingsText3{\n    position: absolute;\n    top: -14px;\n    left: -4px;\n    \n    font-family: 'Webdings';\n    font-size: 52px;\n    line-height: 52px;\n\n    padding: 0px;\n    margin: 0px;\n\n    animation-name: arrowsFlash;\n    animation-duration: 1.5s;\n    animation-timing-function: linear;\n    animation-iteration-count: infinite;\n    animation-delay: 1s;\n\n              }\n\n.webdingsText4{\n    position: absolute;\n    top: -14px;\n    left: -4px;\n    \n    font-family: 'Webdings';\n    font-size: 52px;\n    line-height: 52px;\n\n    padding: 0px;\n    margin: 0px;\n\n    animation-name: arrowsFlash;\n    animation-duration: 1.5s;\n    animation-timing-function: linear;\n    animation-iteration-count: infinite;\n    animation-delay: 1.5s;\n             }\n\n\n\n/*Three styles for the boxes that carry down arrows.\nFirst one that makes the boxes visible and flashing\nthen one that makes them invisible and not flashing*/\n\n.flashArrow1\n{\n    -ms-transform: rotate(40deg) scaleY(1.5); /* IE 9 */\n    transform: rotate(40deg) scaleY(1.5);\n    animation-name: arrowDivFlash;\n    animation-duration: 1.5s;\n    animation-timing-function: linear;\n    animation-iteration-count: infinite;\n    }\n\n.flashArrow2\n{\n    -ms-transform: rotate(40deg) scaleY(1.5); /* IE 9 */\n    transform: rotate(40deg) scaleY(1.5);\n    animation-name: arrowDivFlash;\n    animation-duration: 1.5s;\n    animation-timing-function: linear;\n    animation-iteration-count: infinite;\n    animation-delay: 0.5;\n}\n\n.flashArrow3\n{\n    -ms-transform: rotate(40deg) scaleY(1.5); /* IE 9 */\n    transform: rotate(40deg) scaleY(1.5);\n    animation-name: arrowDivFlash;\n    animation-duration: 1.5s;\n    animation-timing-function: linear;\n    animation-iteration-count: infinite;\n    animation-delay: 1s;\n}\n\n.flashArrow4\n{\n    -ms-transform: rotate(40deg) scaleY(1.5); /* IE 9 */\n    transform: rotate(40deg) scaleY(1.5);\n    animation-name: arrowDivFlash;\n    animation-duration: 1.5s;\n    animation-timing-function: linear;\n    animation-iteration-count: infinite;\n    animation-delay: 1.5;\n}\n\n\n\n\n\n\n\n\n.flashArrowContainer{\n\n\n\n}\n\n.invisibleArrowContainer{\nvisibility: hidden;\n\n}\n\n\n/**/\n.downArrowContainer{\n    z-index: 100;\n   \n    width: 40px;\n    height: 25px;\n\n    padding: 0px;\n    margin: 0px;\n\n                    }\n\n/*Now 4 styles, each for a div \nthat contains a down arrow*/\n.downArrowDiv1{\n    position: absolute;\n    top: 310px;\n    left: 350px;\n    padding: 0px;\n    margin: 0px;\n             }\n\n.downArrowDiv2{\n    position: absolute;\n    top: 370px;\n    left: 300px;\n    padding: 0px;\n    margin: 0px;\n             }\n\n.downArrowDiv3{\n    position: absolute;\n    top: 430px;\n    left: 250px;\n    padding: 0px;\n    margin: 0px;\n             }\n\n.downArrowDiv4{\n    position: absolute;\n    top: 490px;\n    left: 200px;\n    padding: 0px;\n    margin: 0px;\n             }\n\n\n\n\n\n\n.realEnclDivClass{\n\n    position: absolute;\n    top: 30px;\n    left: 30px;    \n    width: 1450px;\n    height: 1200px;\n    \n    margin: 20px auto;\n    \n    border: 1px ridge black;\n    border-radius: 18px;\n    /*background-color: rgb(182, 176, 176);*/\n\n    overflow: hidden;\n             }\n    \n\n/*A div that encloses almost everything It is a child of \nrealEnclDivClass*/\n.enclDivClass{\nposition: absolute;\ntop: 0px;\nleft: 0px;\n\nwidth: 1450px;\nheight: 1200px;\n\nborder: 1px ridge rgb(107, 108, 107);\nborder-radius: 18px;\nbackground-color: none;\n\n             }\n\n\n\n/*For the div that contains the \nheadline (ie \"Battleships\")*/\n.headlineEnclDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: flex-end;\n    \n        position: absolute;\n        height: 350px; \n        width: 1399px;\n        left: 25px;\n        top: 20px;\n    \nbackground-color: #a4a1a6;\n\n    border-radius: 13px;\n    border: #434145 1px ridge;\n\n/*Below shadows from L->R go top to bottom */    \nbox-shadow: -2px 2px 2px 2px rgb(233, 228, 228) inset, -3px 3px 3px 3px rgb(60, 59, 59) inset, -2px 2px 2px 2px rgb(18, 18, 18),  -3px 3px 3px 3px rgb(50, 49, 49);\n\n                      }\n    \n\n/* The div that contains the <p> for text \n\"Battleships\" and the div of class \nfirstInfoArea\n*/\n.bShipsTextContainer{\ndisplay: flex;\nflex-direction: column;\njustify-content: start;\nalign-items: center;\n\nheight: 95%;\nwidth: 40%;\n\n/*border: #000000 5px dotted;*/\n                    }\n\n/*The div that contains the <p>\nfor text \"Battleships*/\n.bShipsTextEnclose{\n    display: flex;\n    justify-content: column;\n    align-items: center;\n    flex-direction: column;\n\n    width: 97%;\n    height: 37%;\n\n    border: #646161 1px solid;\n                    }\n\n/*The <p> for the text for \n\"Battleships*/\n.battleshipsText {\n/* font-family: 'Open Sans-Condensed-ExtraBold';*/\n/* font-family: 'StardosStencilBold'; */\n/* font-family: 'StardosStencilRegular'; */\nfont-family: 'BigShouldersStencilText-Black'; /* This is a name of your choosing*/\nfont-size: 108px;\ncolor: #0c28c7;\n\nline-height: 108px;\nmargin: 0px;\npadding: 0px;\n                 }\n\n\n\n\n/*The div in which messages appear \nwhen the user clicks a square purple\nbutton. This div has a child <p>*/\n.firstInfoArea{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    \n    height: 30%;\n    width: 97%;\n    \n    border: #5d5e61 1px dotted;\n              }\n\n/*Three classes for the <p> that is the text of the \nmessages that appear in div of class \nfirstInfoArea*/\n#firstInfoAreaP{\n               }\n\n.firstInfoAreaTextNormal{\n   /* font-family: 'ZillaSlabHighlight-Regular';*/\n   /* font-family: 'RubikMaze-Regular';*/\n   font-family: 'DotGothic16-Regular';\n    font-size: 28px;    \n    line-height: 28px;\n    color: #fff;\n    padding: 0px;\n    margin: 0px;\n                        }\n\n.firstInfoAreaTextImportant{\n   /* font-family: 'ZillaSlabHighlight-Regular';*/\n   /* font-family: 'RubikMaze-Regular';*/\n   font-family: 'DotGothic16-Regular';\n    font-size: 28px;    \n    line-height: 28px;\n    color: #980808;\n    padding: 0px;\n    margin: 0px;\n                           }\n\n\n\n\n/*The div in which messages such as \n\"Not a valid square\" appear \nwhen the user clicks a square (end square in that case)\nin the home waters when placing a ship.\nThis div has a child <p>*/\n.firstInfoAreaOne{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    \n    height: 30%;\n    width: 97%;\n    \n    border: #5d5e61 1px dotted;\n              }\n\n/*Three classes for the <p> that is the text of the \nmessages that appear in div of class \nfirstInfoArea*/\n#firstInfoAreaOneP{\n               }\n\n.firstInfoAreaOneTextNormal{\n    /* font-family: 'ZillaSlabHighlight-Regular';*/\n   /* font-family: 'RubikMaze-Regular';*/\n   font-family: 'DotGothic16-Regular';\n    font-size: 28px;    \n    line-height: 28px;\n    color: #fff;\n                        }\n\n.firstInfoAreaOneTextImportant{\n    /* font-family: 'ZillaSlabHighlight-Regular';*/\n   /* font-family: 'RubikMaze-Regular';*/\n   font-family: 'DotGothic16-Regular';\n    font-size: 24px;    \n    line-height: 24px;\n    color: #9b0808;\n                           }\n\n\n\n/*For a div that contains the \nStart/Restart button*/\n.startButtContainer\n{\ndisplay: flex;\nflex-direction: row;\njustify-content: center;\nalign-items: center;\n\n\n    border: #000000 2px dotted;\nwidth: 90px;\nheight: 40px;\n}\n\n\n\n\n\n\n\n\n\n/* The overall container for the info area \nwhere messages such as \"Your turn\" appear*/\n\n#infoBoxEnclosingDiv{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n\n        height: 95%; \n        width: 720px;\n    border-radius: 3px;\n    border-left: #3d0c59 5px dotted;\n                    }\n\n/* The div in which the messages will appear */\n#messageDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: start;\n    align-items: center;\n\n        height: 20%; \n        width: 95%;\n    border-radius: 3px;\n    background-color: #c1bfc3;\n    border: #888787 1px solid;\n                    }\n\n/* Two classes, both for the <p> \nof the text of the messages */\n/* First for normal messages such as \n\"AI to play\" or \"Your turn\" */\n.messageTextNormal{ \n    font-family: 'Open Sans-Bold';\n    font-size: 38px;\n    line-height: 28px;\n    margin: 10px;\n    padding: 0px;\n    color: #39035d;\n                  }                    \n\n/* Second for more important messages such as \n\"Your battleship has sunk\" or \"Game over\" */\n.messageTextImportant{\n    font-family: 'Open Sans-Bold';\n    font-size: 38px;\n    line-height: 28px;\n    margin: 10px;\n    padding: 0px;\n    color: #e60d0d;\n                     }                    \n\n\n\n\n\n/* The div that encloses the area for the\nstatuses of the ai and human ships */\n#shipsStatusesEncloseDiv{\n    opacity: 0.17;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n\n        height: 80%; \n        width: 97%;\n    border-radius: 3px;\n    /*border: #d2d216 5px dotted;*/\n                    }\n\n\n/* Two classes: for the divs that contain the divs that contain the \nstatuses of the ai and humna ships */\n/* First for humna ships */\n.shipsStatusesDivOne{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n\n        height: 97%; \n        width: 97%;\n    \n        border-right: #39035d 1px solid;\n                    }\n/* Then for ai ships */\n.shipsStatusesDivTwo{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n\n        height: 97%; \n        width: 97%;\n    border-left: #39035d 1px solid;\n                    }\n\n\n\n\n/* for the divs that contain the titles \neither \"You\" or \"AI\" */\n.shipsStatusesTitleDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: start;\n    align-items: center;\n\n        height: 10%; \n        width: 97%;\n    border-radius: 3px;\n    /*border: #16d2b6 5px dotted;*/\n                    }\n\n\n/* for the <p>s that of the text of the titles \n\"You\" or \"AI\" */\n.shipsStatusesTitleText{\n/* font-family: 'StardosStencilBold'; */\n/* font-family: 'StardosStencilRegular'; */\nfont-family: 'BigShouldersStencilText-Black'; \n    font-size: 42px;\n    line-height: 42px;\n    color: #3b3939;\n                       }\n\n\n/* for the div that contains \n the divs of classes shipsTextContainerOne\n and shipsTextContainerTwo  */\n.shipsTextsContainer{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n\n        height: 85%; \n        width: 97%;\n    border-radius: 3px;\n    /*border: #cc16d2 5px dotted;*/\n                    }\n\n\n\n\n/* for the divs that contain the texts \nsuch as  \"Patrolboat\" or \"Carrier\"*/\n.shipsTextContainerOne{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: flex-end;\n\n        height: 97%; \n        width: 97%;\n    border-radius: 3px;\n    /*border: #1f16d2 5px dotted;*/\n                      }\n\n\n/* for the divs that contain the texts \n\"SUNK\" or \"Afloat\"*/\n.shipsTextContainerTwo{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n\n        height: 97%; \n        width: 97%;\n    border-radius: 3px;\n    /*border: #1f16d2 5px dotted;*/\n                      }\n\n/* for the <p> of the texts \nsuch as \"Sub\" or \"Carrier\"*/\n.shipText{\n    font-family: 'StardosStencilRegular'; \n    font-size: 24px;\n    line-height: 20px;\n    padding: 0px;\n    margin: 0px;\n                      }\n\n/* Two classes for the <p> of the texts\nthat read either \"SUNK\" or \"Afloat\"*/\n/* First for \"Afloat\"*/\n.shipStatusTextAfloat{\n    /* font-family: 'StardosStencilRegular'; */\n    font-family: 'DotGothic16-Regular'; \n    font-size: 22px;\n    line-height: 20px;\n    padding: 0px;\n    margin: 0px;\n    color: #331703;\n                    }\n\n/* Then for \"SUNK!\"*/\n.shipStatusTextSUNK{\n    /* font-family: 'StardosStencilRegular'; */\n    font-family: 'DotGothic16-Regular'; \n    font-size: 26px;\n    line-height: 26px;\n    padding: 0px;\n    margin: 0px;\n    color: #f20f0f;\n                }\n\n\n\n\n.greyBackground1{\n    background-color: #a4a1a6;\n\n    border-radius: 13px;\n    border: #434145 1px ridge;\n\n/*Below shadows from L->R go top to bottom */    \nbox-shadow: -2px 2px 2px 2px rgb(233, 228, 228) inset, -3px 3px 3px 3px rgb(60, 59, 59) inset, -2px 2px 2px 2px rgb(18, 18, 18),  -3px 3px 3px 3px rgb(50, 49, 49);\n\n    position: absolute;\n    \nleft: 25px;\ntop: 395px;\n\nheight: 765px;\nwidth: 1399px;\n                }\n\n\n\n/* The enclosing div for the\ntext that reads \"Home waters\"\nand \"Enemy waters\" */\n.watersTextEnclDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n    \n    position: relative;\n    top: 5px;\n    left: 217px;\n    \n    width: 1170px;\n        \n    height: 70px;\n    \n    background-color: rgb(159, 163, 164);\n    border-radius: 6px;\n    border: rgb(87, 88, 89) 3px ridge;\n    \n                       }\n\n  /* The <p> for the text \"Home waters\" and \n  \"Enemy waters\" in waters div */\n  .watersText {\n    font-family: 'BigShouldersStencilText-Light';\n    font-size: 56px;\n    color: #0c1a6c;\n    margin: 0px;\n    padding: 0px;\n              } \n\n\n\n  /* The <div> that encloses the \n  area where user selects his/her ships*/\n  .shipsEnclosingDiv{\nposition: absolute;\nleft: 17px;\ntop: 5px;\n\nwidth: 190px;\nheight: 750px;\n\nborder:rgb(107, 108, 109) 2px ridge;\n\n\n                    }\n\n/* The newstart button */\n#newStartButton{\n\n    \n}\n\n\n\n/* The <div> that is the restart button */\n\n#resetButton{\n    position: absolute;\n    left: 3px;\n    top: 3px;\n\n              }\n\n\n/* The <div> that encloses the \ndiv that contains the <p> for text\n \"Place your vessels\"*/\n.placementEnclDiv{\n    position: absolute;\n    left: 3px;\n    top: 50px;\n    \n    width: 180px;\n    height: 197px;\n    \n    /*\n    border:rgb(34, 132, 212) 2px ridge; */\n\n    margin: 0px;\n    padding: 0px;    \n \n    }\n\n/* The <p> for text \"Place your vessels\"*/\n.shipsP{\n    font-family: 'BigShouldersStencilText-Black'; \n    font-size: 50px;\n    line-height: 50px;\n    color: #343131;\n\n    margin: 0px;\n    padding: 0px;    \n\n    opacity: 1;\n       }\n\n/* The div containing the \nthe texts 'sub (2 squares)', \netc and their purple buttons*/\n.vesselsContainer{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n\n    position: absolute;\n    left: 3px;\n    top: 206px;\n    \n    width: 180px;\n    height: 520px;\n    \n    border:rgb(120, 121, 122) 2px ridge;\n\n                }\n\n/* The vessels themselves.\nThis is for a div that contains a\n<p> for, eg, \"Place your battleship\"*/\n.vessels{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n\n    position: relative;\n    \n    width: 170px;\n    height: 50px;\n    \n    border:rgb(76, 104, 127) 2px dotted;\n        }\n\n\n/* The div containing \ni)   the <p> for text \"destroyer\" (eg)\nii)  the div containing the RBs and \n     the smallButton\n*/\n.vesselsTextDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n\n    height: 90px;\n    width: 160px;\n    /*\n    border:rgb(26, 211, 19) 2px dotted;  */\n   \n               }\n\n\n/* The div containing \nthe RBs and the smallButton\n*/\n.buttsCont{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n\n    height: 40%;\n    width: 100%;\n    border:rgb(211, 102, 19) 2px dotted;        \n    \n               }\n\n/* The radio buttons*/\n .rButt {\nwidth: 30px;\nheight: 30px;\nborder: 5px solid rgb(110, 8, 138);\n\nopacity: 0.2;\n        }\n\n/*The radio button label */\n.rbLabel{\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    font-size: 18px;\n    line-height: 21px;\n    color: #531010;\n\n    opacity: 0.2;\n        }\n\n\n\n.rButt label {\n        /*display: inline-block;*/\n        position: relative;\n        left: -55px;\n        background-color: #520560;\n        font-family: 'Open Sans-Condensed-ExtraBold';\n        font-size: 18px;\n        cursor: pointer;\n\n      }      \n.rButt:checked+label {\n        background-color: #d2aed8;\n        padding: 10px;\n      }\n\n/* The labelsfor the \nradio buttons*/\n/*\n.rbLabel {\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    position: relative;\n    left: -5px;\n    color: #3a1053;\n         }\n*/\n\n\n/* The small buttons the user employs\n   to place his/her vessels*/\n.smallButton{\n    opacity: 0.05;\n    width: 35px;\n    height: 25px;\n    \n    margin-right: 0px;\n\n    border-radius: 5px 5px 5px 5px ;\n                }\n\n/* Class to define only the \ncolour of the small buttons */\n.smallButtonColour{\n    opacity: 1;\n    border: rgb(32, 45, 229) 1px solid ;\n    background-color: rgb(71, 135, 200);\n    box-shadow: black 3px 3px 3px;\n                  }                \n\n                \n/* Class to 'remove' the \ncolour of a small buttons\nand fade it. \nAdding this class and removing\nthe one above makes the small \nbuttons grey, faded and removes their\nbox shadow */\n.smallButtonGreyed{\n    opacity: 0.05;\n    border: rgb(92, 91, 91) 5px solid ;\n    background-color: rgb(145, 148, 148);\n                  }                \n\n\n    .smallButton:hover{ \n        background-color: rgb(99, 114, 109);\n                      }  \n    \n    \n    .smallButton:active{   \n        transform: translateY(4px);\n        transform: translateX(4px);\n        box-shadow: black 1px 1px 1px;\n                       } \n    \n\n\n\n\n\n\n\n\n/* The <p> for the text, eg \n\"Place your carrier\"*/\n.vesselsText{\n    font-family: 'BigShouldersStencilText-Black';\n    font-size: 26px;\n    line-height: 26px;\n    width: 160px;\n   margin: 0px;\n   padding: 0px;\n\n   opacity: 0.2;\n            }\n\n\n/* NOT BEING USED*/            \n/* For the img of the ship*/\n.shipImage{\n    width: 160px;\n    height: 180px;\n    border:rgb(190, 55, 14) 2px dashed;\n         }\n/* NOT BEING USED*/            \n\n\n  /* The <div> that encloses the homewaters \n  and enemy waters grid divs*/\n.seasEnclosingDiv{\n    opacity: 0.1;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n\n    position: relative;\n    top: 20px;\n    left: 217px;\n    \n    width: 1170px;\n    height: 650px;\n       border: 1px ridge rgb(50, 48, 50) \n                 }\n\n\n  /* There are two divs that have this class. \n  It is NOT positioned to allow it and its\n  contents to be positioned as a whole by its parent \n  flexx box (the div of class seasEnclosingDiv)\n  This div has child containerOne, which IS positioned\n  as it contains the grid and the waters image, which \n  must occupy the same space.\n    */\n  .watersEncloseDiv{\n\n    height: 95%;\n    width: 48%;\n                   }\n\n\n/*\nFor the <div>s that enclose the 100-square grid container \ndivs of class homeWatersDiv and enemyWatersDiv.\nCode gives each of the two divs of the followng class \n  a child Image object that has an src attrib that is a reference\n  to the waters images. Each div of this class is a child of \n  a div of class watersEncloseDiv. This HAS to be positioned \n  because that allows the waters image to be positioned\n  underneath the grid of 100 squares*/\n.containerOne{\nborder: #000000 3px solid;\nposition: relative;\ntop: 0px;\nleft: 0px;\nheight: 100%;\nwidth: 100%;\n             }\n\n\n             \n/* To position the img (of the enenmy waters)\n in the div of \nthe above class*/\n#enContOne > img{\nposition: absolute;\ntop: 0px;\nleft: 0px;\nwidth: 100%;\nheight: 100%;\n    \n}\n\n#enWEnclDiv{\n\n    /* border: 6px dotted rgb(54, 193, 32) */\n          }\n\n\n\n\n/* as above but for home waters*/\n#hoContOne   > img{\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    width: 100%;\n    height: 100%;\n}\n\n\n#hoWEnclDiv{\n    /*\n    border: 6px dotted rgb(193, 32, 145) */\n            }\n\n\n\n  /* The <div> for the home waters.\n  This is a container grid and has \n  100 child divs. It is the child of containerOne */\n.homeWatersDiv{\n    position: absolute;\n    left: 10px;\n    top: 23px;\n    z-index: 40;\n    display: grid;\n    grid-template-columns: repeat(10, 50px);\n    grid-template-rows: repeat(10, 50px);\n\n    gap: 3px 3px;  /* row-gap then column-gap  */ \n    justify-content: space-evenly;\n\nheight: 530px;\nwidth: 530px;\n\nborder: 5px solid rgb(98, 98, 102);\n}\n\n  /* The <div> for the enemy waters.\n  This is a container grid. It contains the 100\n  white squares.  It is the child of containerOne   */\n  .enemyWatersDiv{\n    position: absolute;\n    left: 10px;\n    top: 23px;\n    z-index: 40;\n    display: grid;\n    grid-template-columns: repeat(10, 50px);\n    grid-template-rows: repeat(10, 50px);\n\n    gap: 3px 3px;  /* row-gap then column-gap  */ \n    justify-content: space-evenly;\n\nheight: 530px;\nwidth: 530px;\n\n    border: 5px solid rgb(98, 98, 102);\n\n/*background-image: url(\"./images/water1.jpeg\");*/\n/* background-position: center; */ /* Center the image */\n/*   background-repeat: no-repeat; */ /* Do not repeat the image */\n/*   background-size: cover; */ /* Resize the background image to cover the entire container */\n\n}\n\n\n/* For the 100 divs of the home waters grid.\neach is a grid item inside a grid container \ndiv of class homeAndEnemyWatersDiv */\n.homeGridSquare{\nz-index: 5;\nheight: 48px;\n    width: 48px;\n\nborder-style: groove;\n    border-width: 2px;\n    border-color: #000000;\n    border-radius: 2px;\nbackground-color: #ffffff;\n            }\n\n/* For the 100 divs of the enemy waters grid.\neach is a grid item inside a grid container \ndiv of class homeAndEnemyWatersDiv */\n.enemyGridSquare{\n    height: 48px;\n    width: 48px;\n    \n    border-style: groove;\n        border-width: 2px;\n        border-color: #000000;\n        border-radius: 2px;\n    background-color: #ffffff;\n                }\n    \n/* Style for home and enemy grid squares that \nhave been fired at without damaging a ship */\n.missedShot{\n    background-color: none;\n    border-width: 16px;\n        border-color: #705f5f;\n        border: ridge;\n        border-radius: 45%;\n        height: 90%;\n        width: 90%;    \n           }\n\n/* Style for home and enemy grid squares that \nhave been fired at and have caused damage to a ship */\n.hitShot{\n    border-width: 16px;\n    border-color: #f37e0a;\n    border: ridge;\n    background-color: #ec1010;\n    border-radius: 45%;\n    height: 90%;\n    width: 90%;\n \n        }\n\n/* Style for home ships*/\n.homeShipSquare{\n    background-color: #62565d;\n    height: 100%;\n    width: 100%;\n                }\n\n\n\n/* Style for TESTING ONLY*/\n.testSquareColour{\n    background-color: #f30a86;\n    height: 48px;\n    width: 48px;\n                }\n\n\n\n\n\n\n\n/* ------------------------ */\n\n\n/* the class for an opaque button that \nhas hover and depress effects. */\n.largeButton1{\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n            \n    /*width: 120px;*/\n    width: fit-content;\n    height: 35px;\n    padding-left: 3px;\n    padding-right: 3px;\n    \n    border: bisque 1.5px outset ;\n    border-radius: 5px 5px 5px 5px ;\n    \n    background-color: rgb(70, 69, 67);\n    box-shadow: rgb(5, 5, 5) 3px 3px 3px;\n    \n    opacity: 0.2;\n    pointer-events: auto;\n              }\n            \n.largeButton1:hover{ \n    background-color: rgb(99, 114, 109);\n                  }  \n\n/*Now a class code gives to buttons \nwhen the user clicks them */\n.largeButton1:active{   \n    transform: translateY(4px);\n    transform: translateX(4px);\n    box-shadow: black 1px 1px 1px;\n                   } \n\n/*For the <p> of the text \n\"start\" / \"restart\" */\n.largeButton1Text{\n    /*font-family: 'BigShouldersStencilText-Light';*/\n    font-family: 'StardosStencilBold';\nfont-size: 28px;\nline-height: 28px;\ncolor: #f20a0a;\npadding: 0px;\nmargin:  0px;\n                 }\n\n/* ------------------------ */\n\n/* Large buttons */\n/* the class for a faded button that \nhas no hover or depress effect */\n.largeButton{\n    \n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    \nwidth: fit-content;\nheight: 30px;\n\nborder: bisque 1px solid ;\nborder-radius: 5px 5px 5px 5px ;\n\nbackground-color: rgb(235, 198, 181);\nbox-shadow: black 3px 3px 3px;\n\nopacity: 0.3;\n\npointer-events: none;\n            }\n\n/* ------------------------ */\n\n\n\n\n\n\n\n\n\n\n.warnBoxDiv{\nposition: absolute;\n/*code sets top and left values*/\n\nz-index: 25;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between; \n    align-items: center;\n    \n    width: 400px;\n    height: 200px;\n\n    border: rgb(107, 88, 65) 4px solid ;\n    border-radius: 5px 5px 5px 5px ;\n    \n    background-color: rgb(231, 64, 22);\n    \n    box-shadow: black 16px 16px 20px;\n        }\n\n/* For the <p> of the warning box\nthat contains the text \"You are \nabout to … */\n.warnBoxText{\nposition: relative;        \n\nfont-size: 28px;\nfont-family: 'Open Sans-Italic';\n\ncolor: rgb(238, 226, 226);\n\n            }\n     \n/*For the div that contains the <p>\nthat is the text ofthe warning box*/\n.warnBoxPcontainDiv{\nposition: relative;\n\ndisplay: flex;\nflex-direction: row;\njustify-content: flex-start;\nalign-items: center;\n\nwidth: 94%;\nheight: 150px;\n/*development\nborder: blue 1px dotted;*/\n\npadding:0px;\n\n                   }\n\n/* For the div that contains the \nCancel and OK buttons of the \nwarning box */\n.warnBoxButtonsContainDiv{\n    position: relative;\n    \n    display: flex;\n    flex-direction: row;\n    justify-content:space-between; \n    align-items: center;\n\n    width: 97%;\n    height: 70px;\n/*development: \n    border: rgb(226, 45, 32) 1px dotted; */\n                          }\n    \n\n/*All inputs*/\ninput{\n    color:#531010;\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    font-size: 14px;\n    line-height: 15px;\n     }\n\n\n\n\n/* Buttons */\n/* another class for an opaque button that \nhas hover and depress effects. this is for \nthe \"Erase all\" button, which must be red\nwhen enabled */\n.largeButton2{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n            \n    width: fit-content;\n    height: 30px;\n    padding-left: 5px;\n    padding-right: 5px;\n\n    border: bisque 1.5px outset ;\n    border-radius: 5px 5px 5px 5px ;\n    \n    background-color: rgb(89, 86, 86);\n    box-shadow: rgb(5, 5, 5) 3px 3px 3px;\n    \n    opacity: 1;\n    pointer-events: auto;\n              }\n            \n.largeButton2:hover{ \n    background-color: rgb(99, 114, 109);\n                  }  \n\n/*Now a class code gives to buttons \nwhen the user clicks them */\n.largeButton2:active{   \n    transform: translateY(4px);\n    transform: translateX(4px);\n    box-shadow: black 1px 1px 1px;\n                   } \n\n\n\n/* The <p> for the text in the large button */\n.largeButtText {\n\nfont-family: 'Open Sans-Condensed-ExtraBold';\nfont-size: 22px;\n\nletter-spacing: -0.5px;\n\ncolor: rgb(112, 36, 184);\n\nmargin: 0px;\npadding: 0px;\n\n               }            \n\n\n/* \nThe div enclosing the \nbuttons \"New project\", \n\"New todo\" and \"Edit title\" \n*/\n.buttonEnclosingDiv1{\nposition: relative;\n\n/* No longer needed as \nthis div goes into a \ndiv that uses flexbox:\ntop:346px;\nleft:15px;\n*/\n\ndisplay: flex;\nflex-direction: row;\njustify-content: space-evenly;\nalign-items: center;\n\npadding-bottom: 3px;\n\nwidth: 450px;\nheight: 40px;\nbackground-color: rgb(209, 184, 238);\nborder: rgb(214, 206, 206) 3px outset;\nborder-radius: 5px;;\n                 }\n\n/* \nThe div enclosing the \nbutton \"Erase all\" \n*/\n.buttonEnclosingDiv3{\n\n    position: relative;\n/*    */    \n    display: flex;\n    flex-direction: row;\n    justify-content: right;\n    align-items: center;\n\n    margin-left: auto;\n\n    padding-right: 10px;\n    padding-bottom: 3px;\n\n    width: 210px;\n    height: 40px;\n    background-color: rgb(209, 184, 238);\n    border: rgb(214, 206, 206) 3px outset;\n    border-radius: 5px;;\n                     }\n\n/*The div enclosing the ON OFF\n radio butons */\n.rbEncloseDiv{\n    position: absolute;\n    left: 2px;\n    top: -3px;\n    width: 110px;\n    height: 45px;\n\n    padding: 0px;\n\n    margin-top: 3px;\n    margin-right: 2px;    \n    /*\n    border: rgb(242, 14, 14) 2px outset;\n    border-radius: 5px; */\n             } \n\n\n.rbLabelFaded{\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    font-size: 18px;\n    line-height: 21px;\n    color: #531010;\n    opacity: 0.3;\n             }\n\n.rbLabelONactive{\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    font-size: 18px;\n    line-height: 21px;\n    color: #f20808;\n    opacity: 1;\n                }\n\n\n\n\n\n\n\n/*The hr that separates the buttons\nfrom the display of the project folders*/\n\n.hrule1{\n    position: absolute;\n    left: 50px;\n    top: 320px;    \n\nwidth: 900px;\nheight: 20px;\n\nbackground-color: blanchedalmond;\n  border-radius: 5px;\n\n    }\n               \n\n/* The div that contains the project folders*/\n\n.topView{\n    position: absolute;\n    overflow-x: scroll;\n\ntop: 10px;\nleft: 15px;\n\nwidth: 900px;\nheight: 315px;\n\nbackground-color:white;\n\nborder: rgb(145, 139, 139) 1px solid;\nborder-radius: 7px;;\n    }\n   \n    \n\n\n/* For the div to which code dynamically \nappends blown-up versions of the \nproject folders and stand-alone non-in-PF \ntodos */\n.bottomView {\n\n    position: absolute;\n\n    bottom: 10px;\n    left: 15px;\n    \n\nwidth: 900px;\nheight: 580px;\n\nbackground-color:white;\nborder: rgb(145, 139, 139) 1px solid;\nborder-radius: 7px;;\n\n\noverflow-x: scroll;\n\n                   }\n\n/*--------------------------------------------------------*/\n\n/* for the divs that contain the instructions-*/\n.instructionP{\n    position: absolute;\n    \n    top: 20px;\n    left: 20px;\n    \n    width: 90%;\n    height: 90%;\n    \n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    line-height: 15px;    \n    \n    }\n\n\n/* for the divs that contain the instructions-*/\n.instructionDiv{\nposition: absolute;\n\ntop: 200px;\nleft: 200px;\n\nwidth: 300px;\nheight: 300px;\n\nbackground-color: #a2bbe0;\nborder-radius: 6px;\nborder: #3a1053 3px outset;\n\n}\n\n\n\n\n\n/*--------------------------------------------------------*/\n/*Styles for the topview project folder \nand topview todo */\n\n\n/*For the <div> that is the folder for the top view*/\n.pFolder{\n    position: absolute;\n    top: 10px;       \n    /*left attrib set dynamically*/\n    width: 200px;\n    height: 270px;\n\nborder: black 1px solid;\nborder-radius: 5px;\nbackground-color: burlywood;\npadding:0px;\nmargin: 0px;\n         }\n        /* in order: x offset, y offset, blur size, spread size, color */\n        /* blur size and spread size are optional (they default to 0) */\n  \n/* For the <div> that is a todo for the top view */\n.topViewTodo{\n    position: absolute;\n    top: 10px;       \n    /*left attrib set dynamically*/\n    width: 200px;\n    height: 270px;\n\nborder: rgb(236, 168, 148) 1px solid;\nborder-radius:5px;\nbackground-color: white;\n\npadding:0px;\nmargin: 0px;\n            }\n\n/* Code adds this class to the top-view PF div\non a click of that div. This class makes it \napparent that the user has selected the div */\n.pFolderSelected{\n    box-shadow: 0px 0px 5px 5px rgb(152, 193, 218);\n                }\n\n/*For the <p> in the top view div for\n the PF / todo.\nThis <p> reads \"Project\" or \"Todo\" */\n.topViewText{\n    position: absolute;\n    top: 5px;       \n    right: 5px;\n    font-family: 'Open Sans-Bold';\n    font-size: 20px;\n    line-height: 25px;\n    color: rgb(233, 66, 99);\n    background-color: rgb(250, 242, 242);\n\n    border-radius: 2px;\n    \n    padding:0px;\nmargin: 0px;\n\n             }\n\n/*For the <p> for the title of the proj fold or todo*/\n.topViewtitle{\n    position: absolute;\n    top: 35px;       \n    right:5px;\n    font-family: 'Open Sans-Bold';\nfont-size: 24px;\nline-height: 25px;\ncolor: rgb(61, 4, 16);\nbackground-color: rgb(238, 214, 219);\n\npadding:0px;\nmargin: 0px;\n\nmax-height: 150px;\n\noverflow-x: hidden;\noverflow-y: hidden;\n            }\n\n/*--------------------------------------------------------*/  \n        \n\n\n\n\n/*The forms and dialog boxes*/\n/*The form for entering data \nabout a new project folder.\nCode calls this form after\nclick of \"New Project\" button*/\n.projFolderForm{\ndisplay: none;\n\nposition: absolute;\ntop: 500px;\nleft: 400px;\n\nwidth: 250px;\nheight: 100px;\n\nbackground-color: cyan;\nborder: darkblue solid 1px;\n\n}\n\n/* The submit button for the form above*/\n.newProjSubmit{\nposition: absolute;\ntop: 40px;\nleft: 15px;\n\nwidth: 65px;\nheight: 25px;\n\n              }\n\n\n/* The dialog box that tells the user \nthat a project of that name already exists */\n.projNameExistsDialogBox{\n    display: none;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n\n    position: absolute;\n    top: 550px;\n    left: 450px;\n    \n    width: 250px;\n    height: 150px;\n    \n    background-color: cyan;\n    border: darkblue solid 5px;\n                        }\n\n/* The text for the <p> in the dialog box above */\n.projNameExistsText{\nfont-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\nfont-size: 24px;\nline-height: 25px;\n                   }\n\n/* The enclosing div for the general \n\"already exists\" type of dialog box */\n.nameAlreadyExistsDialogBox{\n    display: block;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n\n    position: absolute;\n       \n    width: 250px;\n    height: fit-content;\n    \n    background-color: rgb(221, 186, 141);\n    border: rgb(77, 2, 138) solid 5px;\n    border-radius: 7px;\n    z-index: 25;\n                        }\n\n/* The <p> for the text ofthe general \n\"already exists\" type of dialog box */\n.nameAlreadyExistsText{\n    position: relative;\n    width: 80%;\n    left: 20px;\n    font-family: 'Open Sans-Bold';\n    font-size: 28px;\n    line-height: 29px;\n    color: #8a1010;\n                    }\n\n/*----*/\n\n\n\n/* div for a todo */\n.todoDiv{\n    position: absolute;\n    \n    width: 300px;\n    height: 400px;\n    \n    border: 2px solid red;\n                     }\n    \n    .testButtPos{\n        position: absolute;\n        left: 220px;\n        top: 10px;\n    }\n    \n        \n/*----------------*/\n\n\n\n/*A general input class*/\n.inputClass{\nwidth: 170px;\nheight: 20px;\n            }\n\n/*A general form label class*/\n.labelClass{\nfont-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif ;\nfont-size: 16px;\ncolor: rgb(119, 2, 253);\n            }\n\n/*NO LONGER USED:*/\n/*id to position notes input*/\n#todoFormNotesInputPos{\n    position: absolute;\ntop: 380px;\nleft: 70px;\n\n                      }\n\n\n\n\n\n/*The div that is a child of div with class \nnotesEnclosingDivClass and that has child \n<p> of class notesP*/\n.notesTitleEncloseDivClass{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    \n    position: relative;\n    width: 95%;\n    height: 20px;    \n\n    margin: 0px;\n    padding: 0px;\n\n    /*Development\n    border: rgb(235, 48, 15) dotted 1px; */    \n    \n                           }\n\n/*The <p> for text \"Notes\"*/\n.notesP{\n    position: absolute;\n    top:0px;\n    left:3px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    letter-spacing: 1px;\n    color: rgb(146, 135, 135);\n    width:97%;\n    height: 19px;\n    margin-left: 0px;\n    /*deveopment:\n    border: red 2px dotted;*/\n    padding: 0px;\n    margin: 0px;\n       }\n\n\n\n/*The <div> in which the \nuser types notes*/\n.notesDiv {\n    position: relative;\n    left:2px;\n    width: 98%;\n    height: 100px;         \n\n    font-family: 'Open Sans-Italic';\n    font-size: 16px;\n    color: rgb(28, 4, 51);\n    \n    border:rgb(90, 157, 201) 1px solid;\n\n    margin: 0px;\n    padding: 0px;\n\n    overflow-y: scroll;\n          }\n\n/*The <p> for text that the user edits*/\n.notesTextP{\n    position: relative;\n    \n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    font-size: 16px;\n    color: rgb(7, 8, 0);\n    \n    padding: 0px;\n    margin: 0px;\n\n       }\n\n/* --------------------- --------------------  */\n\n/* Elements of the checklist */\n/* The checklist consists of \n1) an all-enclosing div \n2) a div to contain the <p> for the text \"Checklist\" \n3) a <p> for the text \"Checklist\" \n4) A div to contain the buttons\n5) two buttons to add and delete points\n(which comprise a div and a child <p>)\n6) a div in which the \"points\" plus their \ndescriptions go. Each checklist point \nconsists of an enlosing div in which there \nis a \"point\" div and a description div\n*/\n\n/* The all-enclosing checklist div.*/\n.bottomViewAllEncloseChecklistDiv{\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\nalign-items: center;\n\nposition: relative;\n    \nwidth: 95%;\nheight: fit-content;\n\nbackground-color: rgb(236, 185, 236);\nborder-radius: 6px;\nborder: rgb(235, 126, 23) 3px solid;\n\nmargin-bottom:10px;\n\n                                 }                   \n\n/* The div that contains the <p>\n for the text \"Checklist\" and the \n Add and Delete buttons*/\n.checklistPencloseDivClass{\n    position: relative;\n            \n    width: 100%;\n    height: 30px;\n    \n    border-bottom: rgb(204, 0, 255) 1px dotted;\n                          }                   \n    \n\n/* The <p> in the checklist \ndiv that reads \"Checklist\" */\n.bottomViewTodoChecklistP{\n    position: absolute;\n    top:5px;\n    left:3px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    letter-spacing: 1px;\n    color: rgb(146, 135, 135);\n    width:37%;\n    height: 19px;\n    margin-left: 0px;\n    /*deveopment:\n    border: red 2px dotted;*/\n    padding: 0px;\n    margin: 0px;\n                         }\n\n\n/* Now the buttons for \n    \"Add point\" and \n    \"Delete point\", the <p> for the text in those buttons and the \n    actual checklist bullet symbols */\n\n/*The style for the checklist \nbuttons (divs) that add or delete points.\nThis provides style only, no positioning*/\n.addDeletePointButtons{\nwidth: 25px;\nheight: 25px;\n\n    background-color: rgb(192, 167, 216);\n    border: brown 1px solid;\n    border-radius: 3px;\n\n    padding: 0px;\n    margin: 0px;\n    \n}\n\n/*To position the + button*/\n#addPointButtonPos{\nposition: absolute;\ntop: 2px;\nright: 38px;\n                      }\n\n/*To position the - button*/\n#deletePointButtonPos{\n    position: absolute;\n    top: 2px;\n    right: 8px;\n                        }\n\n.addDeletePointButtons:hover{\n    background-color: rgb(254, 254, 255);\n                            }\n\n.addDeletePointButtons:active{\n    transform: translateY(2px);\n    transform: translateX(2px);\n    box-shadow: black 1px 1px 3px;\n                             }\n\n/*The <p> for the text of the plus button\nthat adds a checklist point*/\n.plusPointButtonsP{\nposition: absolute;\ntop:-2px;\nleft: 3px;\n    font-size: 36px;\nline-height: 27px;\nfont-family: 'Open Sans-Condensed-ExtraBold';\npadding: 0px;\nmargin: 0px;\n                        }\n\n/*The <p> for the text of the plus button\nthat adds a checklist point*/\n.minusPointButtonsP{\n    position: absolute;\n    top:-6px;\n    left: 5px;\n        font-size: 46px;\n    line-height: 27px;\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    padding: 0px;\n    margin: 0px;\n                            }\n\n/* The <p> for the text in the buttons that \nadd or delete a checklist point*/\n.addDeletePointButtonP{\n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n    font-size: 15px;\n    \n    padding: 0px;\n    margin: 0px;;\n    \n                      }\n\n/* the interior div, which will contain\n lots of divs of class newPointContainerDiv \n (each of which will represent a checklist\n point and contain the \"point\" div and the\n description div) */\n.bottomViewTodoChecklistInteriorDiv{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n        \n    position: relative;\n        \n    width: 97%;\n    min-height: 35px;\n    height: fit-content;\n\n    margin-bottom:3px;\n    margin-top:3px;\n    \n    /*development:\n    border: rgb(245, 212, 212) 1px solid; */\n\n    }              \n    \n/*A style code adds to the \"bullet\" div and \nits sibling description div in the checklist when \nthe user double-clicks the \"bullet\" div. Code \nremoves this class after five seconds*/    \n.selectedColour{\n    background-color: rgb(245, 166, 147);\n               }\n\n\n/*The enclosing div for the \npoint div + description div*/\n.newPointContainerDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    \n    position: relative;\n\n    width: 97%;\n    height: 25px;\n\n    /*Development:\n    border: rgb(0, 0, 0) 1px solid; */\n\n    cursor: move;\n                     }\n\n\n/* The checklist bullet*/\n    .checklistPoint{\n       display: flex;\n       flex-direction: column;\n       justify-content: center;\n       align-items: center; \n\n       width:  20px;\n       height: 20px;\n       border-top-left-radius:  4px;\n       border-bottom-left-radius: 4px; \n       border: 3px solid  rgb(113, 43, 226);;\n                    }\n\n/* The <p> that goes in the \"bullet\" div.\nCode will make this text a number  */\n.numberPara{\n    position: relative;\n\n    font-size: 18px;\n    font-family: 'Open Sans-Condensed-ExtraBold';\n\n    color: rgb(211, 100, 194);\n\npadding: 0px;\nmargin: 0px;\n            }\n\n\n/* The <p> that goes in the \"point\" div \nof the checklist bullet points.\nCode make this text editable  */\n.pointPara{\n    position: relative;\n\n    height: 99%;\n\n    font-size: 16px;\n    font-family: 'Open Sans-Italic';\n\n    color: rgb(100, 9, 9);\n\npadding: 0px;\nmargin: 0px;\n            }\n\n\n\n\n\n/* The checklist point description,\neg \"Vacuum the seats\" */\n.checklistDescription{\n   \n/* font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\nfont-size: 16px;*/\n\nwidth: 230px;\nheight: 20px;\nborder-top-right-radius: 4px;\nborder-bottom-right-radius: 4px;\n\nborder: 3px solid  rgb(180, 131, 243);\n\n                     }\n\n/*Styles for the \"bullet\" and \"point\"\ndivs when they are selected and not selected \n-- no need for four, reduce to two!!!\n*/\n\n.backgroundNotSelected{\n    background-color: rgb(237, 226, 243);\n                            }    \n\n.backgroundSelected{\n        background-color: rgb(226, 86, 43);\n                         }\n\n.descrpBackgroundNotSelected{\n    background-color: rgb(43, 226, 186);\n                            }    \n\n.descrpBackgroundSelected{\n        background-color: rgb(226, 86, 43);\n                         }\n\n                         \n.bulletBackgroundNotSelected{\n    background-color: rgb(43, 226, 186);\n                            }    \n\n.bulletBackgroundSelected{\n        background-color: rgb(226, 86, 43);\n                        }\n    \n\n/*-----------------------------------------------------------------------------------*/    \n    /*Stuff that appears in the bottom view*/\n\n/* For the div that contains the div \n    that encloses a stand-alone \nnon-in-PF todo (for the bottomview) */\n.bottomViewTodoContainer{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    \n    position: absolute;\n    top: 20px;\n    \n    width: 350px;\n    height: 520px;\n    border: rgb(196, 168, 168) 3px solid;\n    border-radius:8px;\n    background-color: rgb(253, 255, 255);\n\n    overflow-x: hidden;\n    overflow-y: hidden;\n\n                        }\n/* The div that contains the \nword \"Todo\" for a stand-alone\nnon-in-PF todo*/\n.bottomViewTDwordEnclDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    \n        position: absolute;\n        top: 0px;\n        left: 14px;\n        background-color: rgb(196, 171, 140);\n    border-radius: 4px;;\n    border: rgb(116, 98, 29) 1px solid;\n    \n    width: fit-content;\n    height: 17px;\n    \n    z-index: 10;;\n    \n    padding-left: 10px;\n    padding-right: 10px;\n                                }\n    \n/* The div that contains the word \"Todo\"\nfor a stand-alone in-PF todo and an \nunder-heading todo*/\n.bottomViewInPFtodoWordEnclDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    \n        position: absolute;\n        top: 0px;\n        left: 5px;\n        background-color: rgb(196, 171, 140);\n    border-radius: 4px;;\n    border: rgb(116, 98, 29) 1px solid;\n    \n    width: fit-content;\n    height: 17px;\n    \n    z-index: 10;;\n    \n    padding-left: 10px;\n    padding-right: 10px;\n                                }\n  \n\n\n/* for the divthat encloses the Delete \nand X buttons in the bottomView \nstandalone non-in-PF todo div */\n.buttsEnclosingDiv{\nwidth: 90%;\nheight: 100%;\n\ndisplay: flex;\nflex-direction: row;\njustify-content: space-between;\nalign-items: center;\n\nbackground-color: rgb(240, 232, 232);\n\n                  }\n\n\n/* The div that encloses a stand-alone \nnon-in-PF todo (for the bottomview)*/\n.bottomViewTodoEnclosingDiv {\n        \n    display: block;\n    /**/\n    position: relative;\n            \n    width: 97%;\n    height: fit-content;\n    /*Development\n    border: rgb(247, 3, 210) 6px dotted;\n    */\n    background-color: white;\n    \n    padding: 0px;\n    margin-top: 5px;\n    margin-left: 5px;\n    \n    overflow-y: hidden;\n    overflow-x: hidden;\n                             }\n\n\n/* The style for the div of the todo.\nCode makes this div for ay kind of \ntodo.\nThis div contains:\na) the div that contains the title\nand minimise square\nb) the div that contains text \"Select\" \nc) the div that contains everything else\n(date picker, Priority elements, \ndescription elements, Checklist elements \nand Notes elements)\n*/\n.bottomViewTodoDiv{\n    \n    display: block;\n\n    position: relative;\n    z-index: 1;\n\n    width: 93%;\n    /* Code will set height*/\n    \n    /*Development\n    border: rgb(206, 252, 4) 6px dotted; */\n     \n    border-radius: 3px;\n    padding: 0px;\n    margin: 10px;\n\n    background-color: rgb(199, 182, 199);\n\n    overflow-x: hidden;\n    overflow-y: hidden;\n\n    box-sizing: border-box;\n                  }\n\n\n\n\n\n\n/* The div that contains the \n\"X\" button and that appears at the \ntop of the div that contains a \nnon-on-PF or in-PF todo in the \nbottomview */\n.bottomViewTodoButtonsEncloseDiv {\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-end;\n    align-items: center;\n    \n    position: relative;\n        \n    width: 95%;\n    height: 35px;\n    \n    border: rgb(201, 192, 140) 2px solid;\n    background-color: rgb(144, 86, 219);\n    \n    padding: 0px;\n    margin: 0px;\n                                 }\n\n/* The P that contains the text \n\"Todo\" and that is a child of \nthe div of class \nbottomViewTodoButtonsEncloseDiv */\n.bottomViewTodoTextP {\n    \n    position: relative;\n        \n    height: 20px;\n    \n    border: rgb(255, 0, 13) 2px solid;\n    background-color: rgb(197, 163, 241);\n    \n    font-size: 16px;\n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n\n    padding: 0px;\n    margin: 0px;\n    \n                                 }\n\n\n\n/* The div for the project folder*/\n.bottomViewProjFolderDiv {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\nalign-items: center;\n\nposition: absolute;\ntop: 20px;\n\nwidth: 350px;\nheight: 520px;\n\nborder: rgb(110, 83, 83) 3px solid;\nborder-radius:8px;\nbackground-color: rgb(201, 151, 90);\n\npadding: 0px;\nmargin: 0px;\n\noverflow-y: hidden;\noverflow-x: hidden;\n                         }\n\n/* The animation class for the PF div*/\n.PFanimation{\nanimation: grow1 0.3s ease-in-out 1;\n            }\n\n\n\n\n\n/*the <p> for the title of the PF*/\n.bottomViewPFTitleP {\nposition: relative;\nleft: 5px;\ntop: 2px;\n\nfont-family: 'Open Sans-ExtraBold';\nfont-size: 30px;\nline-height: 32px;\n\npadding-bottom: 5px;\nmargin: 0px;\n\n/*overflow-y: hidden;*/\n                    }\n   \n/*The div that contains the <p> for \ntext \"Project\" in the bottom view*/\n.bottomViewPForTDwordEnclDiv{\ndisplay: flex;\nflex-direction: row;\njustify-content: center;\nalign-items: center;\n\n    position: absolute;\n    top: 0px;\n    left: 0px;\n    background-color: rgb(196, 171, 140);\nborder-radius: 4px;;\nborder: cornsilk 1px solid;\n\nwidth: fit-content;\nheight: 17px;\n\nz-index: 10;;\n\npadding-left: 10px;\npadding-right: 10px;\n                            }\n\n/*The <p> for \ntext \"Project\" */\n.bottomViewPForTDwordP{\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    font-size: 18px;\nline-height: 19px;\n\nposition: relative;\ncolor: rgb(243, 79, 79);\n\npadding:0px;\nmargin:0px;\n                      }\n\n/*The div that encloses the … */\n.bottomViewPFTitleEncloseDiv{\n    position: relative;\n    left: 0px;\n    \n    font-family: 'Open Sans-ExtraBold';\nfont-size: 33px;\nline-height: 32px;\n\n    height: fit-content;\n    /*min-height: 40px;*/\n    max-height: 128px;\n    width: 99%;\n\n    padding: 0px;\n    margin: 0px;\n    /* dev:\n    border: firebrick 1px dotted; */\n    \n    overflow-y: hidden;\n    overflow-x: hidden;\n\n                            }\n\n/*The following style is for a div \nthat encloses the top buttons in a \nPF div for the bottom view. Code \nuses the same style for a div that \ncontains the Delete button at the \ntop of the stand-alone todo div in\nthe bottom view*/\n.bottomViewPFtopButtonsEncloseDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n    \n    position: absolute;\n    left: 3px;\n    top: 20px;\n\n    height: 45px;\n    width: 98%;\n\n    background-color: rgb(240, 232, 232);\n    /*\n    border: rgb(255, 166, 0) 1px solid;*/\n    border-radius: 3px;;\n    padding: 0px;\n    margin: 0px;\n    \n                            }\n\n/* The following style is for a div \nthat encloses the top buttons in a \nstandalone non-inPF TD. Code uses \nthe same style for a div that \ncontains the Delete button at the \ntop of the stand-alone todo div in\nthe bottom view*/\n.bottomViewStAlTDButtonsEncloseDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n    \n    position: absolute;\n    left: 15px;\n    top: 20px;\n\n    height: 45px;\n    width: 85.6%;\n\n    background-color: rgb(240, 232, 232);\n    /*\n    border: rgb(255, 166, 0) 1px solid; */\n    border-radius: 3px;;\n    padding: 0px;\n    margin: 0px;\n    \n                            }\n\n\n/* the div in which code will put \n standalone non-in-PF todos.  */\n .bottomViewTodosEncloseDiv{\n    position: absolute;\n    left: 0px;\n    top: 65px;\n\n    /*\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    */\n  \n    width: 100%;\n    min-height: 50px;\n    /*height: fit-content;*/\n    height: 440px;\n\n    padding: 0px;\n    margin-top: 10px;\n/*Development    \nborder: rgb(255, 153, 0) 10px dotted; */\n\noverflow-y: scroll;\noverflow-x: hidden;\n                            }\n\n/* the div that sits below the PF \nbutton bar and that contains \ni) the div for the title \nii) the div that contains headings & todos */\n.pfTitleHeadingsTodosEncloseDiv{\n    position: absolute;\n    left: 0px;\n    top: 82px;\n    /*\n    border-top:rgb(0, 0, 0) 1px dotted;*/\n    width: 100%;\n    height: 435px;\n\n    overflow-y: scroll;\n\n}\n\n\n\n\n\n/* the div in which code will put \n heading divs (and obviously the todos\n in those heading divs). this div is \n the child of the div for the PF in \n the bottom view and goes below the \n PF title div and the div containing \n the \"New heading\" and \"New todo\" \n buttons*/\n .bottomViewHeadsTodosEncloseDiv{\n    position: relative;\n    left: 3px;\n    \n    margin-top:10px;\n\n    display: block;\n\n/**/\n    width: 98%;\n    /*height: fit-content;*/\n    height: 390px;\n    padding: 0px;\n    \n    border-radius: 7px;\n    border: rgb(116, 111, 111) 1px solid;\n    \n/*Development:    \nborder: red 10px dotted;\n*/\n\noverflow-y: scroll;\noverflow-x: hidden;\n\n}\n\n\n/* The div that contains a heading title \n(which is a <p> in its own div) and todos \n(in their own divs)\n*/\n.bottomViewHeadingDiv{\n    position: relative;       \n    display: block;\n    width: 97%;\n    \n    /* code will set height */\n        \n        background-color: rgb(179, 158, 236);\n        border-top: 4px solid rgb(138, 139, 138);\n        border-bottom: 4px solid rgb(138, 139, 138);\n    \n    padding: 0px;\n    margin-top: 15px;\n    margin-bottom: 15px;\n    margin-left:5px;\n\n    overflow-y: hidden;\n    overflow-x: hidden;\n                     }\n\n/* The class to add to the heading div above \nwhen the user clicks on that div. The idea \nis to highlight the div to show the user has \nselected it*/\n.addGlowToBottomViewHeading{\nbox-shadow: 3px 3px 3px 3px #FF0000, -3px -3px 3px 3px  #FF0000;;\n                           }\n\n\n/* TES STUFF IN HERE TES STUFF IN HERE TES STUFF IN HERE */\n\n       /* a test div  */\n    .aDivForTESTing {\n    z-index: 25;\n\n    position: absolute;\n    left: 30px;\n    top: 30px;\n    \n    width: 100px;\n    height: 100px;\n\n    background-color: #dcdbab;\n\n    border:rgb(255, 0, 255) 3px dashed;\n    \n    padding: 0px;\n    margin: 0px;\n                                         }\n    \n\n/* The div that contains a heading title \n(which is a <p> in its own div) and todos \n(in their own divs)\n*/\n.bottomViewHeadingDivTEST{\n    position: relative;       \n    display: block;\n    width: 97%;\n    \n    /* code will set height */\n        \n        background-color: rgb(179, 158, 236);\n        border-top: 4px solid rgb(138, 139, 138);\n        border-bottom: 4px solid rgb(138, 139, 138);\n    \n    padding: 0px;\n    margin-top: 15px;\n    margin-bottom: 15px;\n    margin-left:5px;\n\n    overflow-y: hidden;\n    overflow-x: hidden;\n                     }\n\n\n/*The div that encloses the <p> for the title \nof the heading that appears in the bottom view \ndiv for the PF*/\n.bottomViewHeadingTitlePEncloseDivTEST {\n    z-index: 4;\n    \n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: center;\n    \n    position: relative;\n    \n    width: 97%;\n    height: fit-content;\n    \n    margin-top: 25px;\n    margin-bottom: 25px;\n    \n    border-top: 2px solid black;\n    border-bottom: 2px solid black;\n                             }\n    \n    /* The title <p> for a heading div in \n    the bottom view PF folder */\n    .bottomViewHeadingTitlePTEST {\n    \n    z-index: 7;\n    \n    position: relative;\n    \n    font-family: 'Open Sans-Italic';\n    font-size: 24px;\n    \n    width: 92%;\n    \n    color: rgb(57, 5, 109);\n    \n    padding: 0px;\n    margin: 0px;\n                             }\n\n\n/*END OF TEST CLASSES END OF TEST CLASSES END OF TEST CLASSES*/\n\n\n\n/*The div that encloses the <p> for the title \nof the heading that appears in the bottom view \ndiv for the PF*/\n.bottomViewHeadingTitlePEncloseDiv {\nz-index: 4;\n\ndisplay: flex;\nflex-direction: row;\njustify-content: space-around;\nalign-items: center;\n\nposition: relative;\n\nwidth: 97%;\nheight: fit-content;\n\n/*Development\nborder:rgb(0, 110, 255) 3px solid; */\n\nmargin-top: 25px;\nmargin-bottom: 25px;\n\nborder-top: 2px solid black;\nborder-bottom: 2px solid black;\n                         }\n\n/* The title <p> for a heading div in \nthe bottom view PF folder */\n.bottomViewHeadingTitleP {\n\nz-index: 7;\n\nposition: relative;\ntop: -4px;\n\nfont-family: 'Open Sans-Italic';\nfont-size: 24px;\nline-height: 32px;\nwidth: 92%;\n\ncolor: rgb(57, 5, 109);\n\npadding: 0px;\nmargin: 0px;\n                         }\n\n/* The div that contains the todo div */\n.bottomViewHeadingTodoEncloseDiv {\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\nalign-items: center;\n\nposition: relative;\nleft: 3px;\ntop: 30px;\n\nwidth: 94%;\n\n height: fit-content; \n min-height: 135px;\n\n\nborder:rgb(255, 0, 255) 3px dashed;\n\npadding: 0px;\nmargin: 0px;\n\noverflow-y: hidden;\n                         }\n\n/* A style that code assigns to the \n appropriate div when the user wants to \nselect a PF/ in-PF standalone todo / \nheading / standalone todo. Code adds or\nremoves this class to/from the div in \nquestion when the user clicks the small \ndiv that reads \"Select\"\n */\n.selected{\n    /* box-shadow: none|h-offset v-offset blur spread color |inset|initial|inherit;   */\n    box-shadow: 6px 6px 6px 6px #a2bbe0, -6px -6px 6px 6px #a2bbe0; \n         } \n\n/* the <p> for the text \"Select\" \nthat goes in every div that every\n todo.heading/PF has at the top */\n.selectP{\nposition: relative;\ncolor: rgb(186, 176, 194);\nfont-size: 16px;\nfont-family: 'Open Sans-ExtraBold';\n\n        }\n\n.selectDiv{\ndisplay: flex;\nflex-direction: row;\njustify-content: center;\nalign-items: center;\n\nwidth: fit-content;\nheight: 17px;\n\nz-index: 10;;\n\npadding-left: 10px;\npadding-right: 10px;\n\nbackground-color: rgb(140, 0, 255);\nborder-radius: 4px;;\nborder: cornsilk 1px solid;\n        }\n\n\n/* Fri28Jan22: note that the following four\nstyles are identical! Change to one style later \nonce you are sure there's no need for four \n(obviously individual) styles!*/\n\n/* Position for the PF\n Select div*/\n.pfSelectDivPosition {\n    position: absolute;\n    top: 0px;\n    right: 0px;\n                    }\n\n/* Position for the stand alone \nnon-inPF TD Select div*/\n.stAlTDSelectDivPosition {\n    position: absolute;\n    top: 0px;\n    right: 32px;\n                         }\n\n/* Position for the heading\nSelect div*/\n.headingSelectDivPosition {\n    position: absolute;\n    top: 0px;\n    right: 0px;\n                          }\n\n/* Position for the under-heading\nTD's Select div*/\n.inPFtodoSelectDivPosition {\n    position: absolute;\n    top: 0px;\n    right: 0px;\n                          }\n\n\n\n\n\n\n\n/* The div that will contain the <p> for the  \nheading and the square the user clicks \nto minimise the todo div (the one with brown\ndotted border in dev)*/\n.bottomViewTodoTitleEncloseDiv{\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n\n    position: relative;\n    /*top: 20px;*/\n\n    width: 95.5%;\n    min-height: 19px; \n    /*height: fit-content;*/\n    \n    \n    border-radius: 3px;\n    border: rgb(163, 114, 58) 2px solid;\n     \n    padding: 0px;\n    margin-left: 5px;\n    margin-top: 25px;\n    margin-bottom: 10px;\n\n    background-color: rgb(240, 172, 234); \n\n    overflow-x: hidden;\n    overflow-y: hidden;\n                              }\n\n\n/*The <p> for the title for the todo*/\n.bottomViewTodoTitleP{\nz-index: 7;\n\nposition: relative;\ntop:-2px;\nleft: 3px;\n\nfont-family: 'Open Sans-SemiBold';\nfont-size: 20px;\nline-height: 26px;\n\nwidth: 91%;\nheight: fit-content;\n/*min-height: 25px;*/\n\nmargin: 0px;\npadding-top: 3px;\npadding-bottom: 3px;\n                     }\n\n/*The div that contains the up/down arrow\nas background image.*/\n.arrowDivClass{\nposition: relative;\n/*\nwidth: 7%;\nheight: 100%;\n*/\n\nwidth: 25px;\nheight: 25px;\n\n/*Development\nborder: darkblue 1px solid; */\n\nbackground-repeat:no-repeat;\nbackground-size:contain;\n\n              }\n\n\n/* The div that contains everything in the todo\nexcept the title enclosing div */\n.todoTheRestEnclosDivClass{\nposition: relative;\n\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\nalign-items: center;\n\nwidth: 95.5%;\nheight: fit-content;\n/*\nborder: rgb(112, 112, 112) 1px solid; */\n\nmargin-left: 5px;\npadding: 0px;\n                     }\n\n\n\n\n\n.datePickerEncloseDivClass{\n    position: relative;\n\ndisplay: flex;\nflex-direction: row;\njustify-content: space-around;\nalign-items: center;\n\n    width: 100%;\n    height: 70px;\n\n    margin-bottom: 10px;\n    padding: 0px;\n/*Development\n    border: 3px dotted rgb(238, 234, 22) */\n                          }\n\n\n\n/*The div that encloses the <p> \nfor the text \"Priority\" in the todo*/\n.priorityPencloseDivClass{\n    position: relative;\n        \n    z-index: 1;\n    \n    background-color: rgb(236, 185, 236);\n    border-radius: 6px;\n    border: rgb(235, 126, 23) 3px solid;\n    \n    width: 45%;\n    height: 85%;\n                            }\n\n\n/*The <p> for the text \"Priority\" in the todo*/\n.bottomViewTodoPriorityTextP{\n    position: absolute;\n    top:0px;\n    left:3px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    letter-spacing: 1px;\n    color: rgb(146, 135, 135);\n    width:97%;\n    height: 19px;\n    margin-left: 0px;\n    /*deveopment:\n    border: red 2px dotted;*/\n    padding: 0px;\n    margin: 0px;\n                            }\n\n/*For the div that contains the RBs*/\n.rbContainerDiv{\nposition: absolute;\ntop:22px; \nleft:1px;   \n\nwidth: 95%;\nheight: 38px;\n\ndisplay: flex;\nflex-direction: row;\njustify-content: space-evenly;\nalign-items: flex-start;\n\n/*Development\nborder: rgb(198, 226, 43) 1px solid; */\n\n               }\n\n\n/*Now the labels for the radio buttons.\nNote that the class name of each label\nis the same as the id for its \ncorresponding RB*/\n               \n/*For the label for the very low radio button*/\n.veryLowRB{\nposition: absolute;\ntop: 17px;\nright: 93px ;\nfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\nfont-size: 16px;\n\npadding: 0px;\nmargin: 0px;\n          }\n/*For the very low RB */\n#veryLowRB{\n    position: relative;\n    /**/\n    /*\n    top: 5px;\n    right: 110px ; */\n}\n\n\n/*For the label for the low radio button*/\n.lowRB{\n    position: absolute;\n    top: 17px;\n    right: 75px ;\n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    font-size: 16px;\n\n    padding: 0px;\n    margin: 0px;\n              }\n/*For the low RB */\n#lowRB{\n    position: relative;\n    /*\n    top: 5px;\n    right: 90px ; */\n}\n\n/*For the label for the medium radio button*/\n.mediumRB{\n    position: absolute;\n    top: 17px;\n    right: 52px ;\n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    font-size: 16px;\n\n    padding: 0px;\n    margin: 0px;\n        }\n\n/*For the medium RB */\n#mediumRB{\n    position: relative;\n    /**/\n    /*\n    top: 5px;\n    right: 65px ;*/\n         }\n\n/*For the label for the high radio button*/\n.highRB{\n    position: absolute;\n    top: 17px;\nright: 30px;\nfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    font-size: 16px;\n\n    padding: 0px;\n    margin: 0px;\n        }\n\n/*For the high RB */\n#highRB{\n    position: relative;\n    /**/\n    /*\n    top: 5px;\n    right: 40px ; */\n       }\n\n\n/*For the label for the very high radio button*/\n.veryHighRB{\n    position: absolute;\n    top: 17px;\n    right: 1px;\n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    font-size: 16px;\n\n    padding: 0px;\n    margin: 0px;\n           }\n/*For the very high RB */\n#veryHighRB{\n    position: relative;\n    /**/\n    /*\n    top: 5px;\n    right: 10px ; */\n          }\n\n\n\n\n\n/* ---------- */\n\n/*The all-enclosing <div> for the description\nelements of the todo. This div contains the <p> for text \n\"Description\" and the div in which the user \ntypes the text ofthe description of the todo*/\n.descrAllEncloseDivClass{\n       \n    position: relative;\n    width: 95%;\n    height: fit-content;    \n\n    margin-bottom: 10px;\n    padding: 0px;\n\n    background-color: rgb(236, 185, 236);\n    border-radius: 6px;\n    border: rgb(235, 126, 23) 3px solid;\n                               }\n\n\n/*The div that contains the <p> for \nthe text \"Description\" in the todo*/\n.descrPencloseDivClass{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    \n    position: relative;\n    width: 95%;\n    height: 20px;    \n\n    margin: 0px;\n    padding: 0px;\n\n    /*Development\n    border: rgb(235, 48, 15) dotted 1px; */\n                     }\n\n/*The <p> for the text \"Description\" in the todo*/\n.bottomViewTodoDescriptionTextP{\n    position: absolute;\n    top:0px;\n    left:3px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    letter-spacing: 1px;\n    color: rgb(146, 135, 135);\n    width:97%;\n    height: 19px;\n    margin-left: 0px;\n    /*deveopment:\n    border: red 2px dotted;*/\n    padding: 0px;\n    margin: 0px;\n\n                               }\n    \n/*The <div> in which user types \nthe description of the todo*/\n.bottomViewTodoDescriptionDiv{\n    position: relative;\n    left:2px;\n    width: 98%;\n    height: 100px;         \n\n    font-family: 'Open Sans-Italic';\n    font-size: 16px;\n    color: rgb(28, 4, 51);\n    \n    border:rgb(90, 157, 201) 1px solid;\n\n    margin: 0px;\n    padding: 0px;\n\n    overflow-y: scroll;\n                         }\n\n\n\n/*NOW NOT NEEDED */\n/* The \"New heading\" button that appears in \nthe bottom-view project folder div */\n#newHeadButtDivBottViewID{\nposition: absolute;\ntop: 3px;\nright: 15px; \n                         }\n/*NOW NOT NEEDED */\n/* The \"New todo\" button that appears in \nthe bottom-view project folder div */\n#newTodoButtDivBottViewID{\n    position: absolute;\n    top: 3px;\n    right: 140px; \n                         }\n\n\n\n/* General dialog box to take in user input in \none input. Code sets the display value to \n\"block\" whenaim is to show the dialog box or\n\"none\" when the aim is to make the dialog box\ndisappear (ie when user hits \"Cancel\" or \nthe \"Submit\" button's callback has finished)*/\n.generalNameEntryBoxDiv{\nz-index: 5;\n\ndisplay: block;\n    \nposition: absolute;\n/* Code sets top and left attribs */\nwidth: 250px;\nheight: 250px;\n\nbackground-color: rgb(34, 132, 212);\nborder: chocolate 4px solid;\n\n                    }\n\n\n/* <p> for the general dialog box's \ntitle */\n.generalNameEntryBoxP{\n    position: absolute;\n    top : 15px;\n    left: 15px;\n    \n    font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n    font-size: 16px;   \n        \n                    }\n\n/* For the General dialog box's \ninput*/\n#generalNameEntryBoxInput{\n    position: absolute;\n    \n    top: 60px;\n    left: 15px;\n    \n    width: 150px;\n    height: 25px;\n    \n    background-color: rgb(211, 227, 240);\n    border: rgb(59, 29, 8) 1px solid;\n    \n                        }\n\n                       \n/* jQuery UI datepicker stuff follows */\n/* ----------  ----------  ----------  ----------  ----------  ---------- */\n\n/*date picker stuff:*/\n\n/*The <div> that contains \nthe <p> for text \"Pickdeadline \nand the input in \nwhich the jquery datepicker sits*/\n.datePicker1Class{\n    position: relative;\n        \n    z-index: 1;\n    \n    background-color: rgb(236, 185, 236);\n    border-radius: 6px;\n    border: rgb(235, 126, 23) 3px solid;\n    \n    width: 45%;\n    height: 85%;\n\n                }\n    \n/*The <p> that reads \"Pick deadline\"*/\n.deadlineDatePickP{\n    position: absolute;\n    top:0px;\n    left:3px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 14px;\n    letter-spacing: 1px;\n    color: rgb(146, 135, 135);\n    width:97%;\n    height: 19px;\n    margin-left: 0px;\n    /*deveopment:\n    border: red 2px dotted;*/\n    padding: 0px;\n    margin: 0px;\n}\n\n/* For the input. The user clcks in \nthis element to make the jQ date \npicker appear. This is where the date\ntext appears after users election from\nthe jQ date picker) */\n.datePickInputClass{\n    position: absolute;\n    top: 25px;\n    left: 2px;\n    background-color: rgb(212, 129, 154);\n    width: 90%;\n    height: fit-content;\n    margin-left: 0px;\n    font-family: 'Open Sans-SemiBold';\n    font-size: 18px;\n    color: rgb(112, 112, 112);\n                   }\n\n\n    /*One way of styling the text in the jquery datepicker.\n    However, it only styles the calendar:\n    .ui-widget { \n        font-family: Verdana,Arial,sans-serif; \n        font-size: 18px;\n        width: 260px;\n        background-color: floralwhite;\n               }\n    */\n    \n/* For all <a>s in the datepicker, which is \nwhat each date number is */ \n.ui-datepicker a {\n        color: #d35c5c;\n    }\n\n    \n    /* All styles that follow that beginwith \n    ui-datepicker are from the css file in jqueryUI\n    for the datepicker: */ \n\n\n    /*For the all-enclosing div of \n    the datepicker*/\n        .ui-datepicker {\n        width: 400px;\n        height: 330px;\n        padding: .2em .2em 0;\n        display: block;\n\n        /*Me:use of \"important!\" overrides the z-index that \n        jQ gives this div inline (a z-index of value 2)*/\n        z-index:16 !important;\n        border-radius: 10px;\n        border: #531010 7px outset;\n        background-color: rgb(235, 209, 241);\n        box-shadow: #070707 15px 15px 15px;\n                    }\n\n    .ui-datepicker .ui-datepicker-header {\n        position: relative;\n        padding: .2em 0;\n\n\n                                         }\n    .ui-datepicker .ui-datepicker-prev,\n    .ui-datepicker .ui-datepicker-next {\n        position: absolute;\n        top: 2px;\n        width: 1.8em;\n        height: 1.8em;\n        \n    }\n    .ui-datepicker .ui-datepicker-prev-hover,\n    .ui-datepicker .ui-datepicker-next-hover {\n        top: 1px;\n    }\n    \n    /*The text \"Prev\"*/\n    .ui-datepicker .ui-datepicker-prev {\n        font-family: 'Open Sans-Condensed-ExtraBold';\n        left: 2px;\n        top: -10px;\n        font-size: 24px;\n        color: rgb(173, 114, 114);\n                                       }\n    /*The text \"Next\"*/\n    .ui-datepicker .ui-datepicker-next {\n        font-family: 'Open Sans-Condensed-ExtraBold';\n        font-size: 24px;\n        color: rgb(173, 114, 114);\n        right: 30px;\n        top: -10px;\n                                        }\n    .ui-datepicker .ui-datepicker-prev-hover {\n        /**/\n        /*left: 1px;*/\n    }\n    .ui-datepicker .ui-datepicker-next-hover {\n        /*right: 1px;*/\n    }\n    .ui-datepicker .ui-datepicker-prev span,\n    .ui-datepicker .ui-datepicker-next span {\n        display: block;\n        position: absolute;\n        left: 50%;\n        margin-left: -8px;\n        top: 50%;\n        margin-top: -8px;\n    }\n    .ui-datepicker .ui-datepicker-title {\n        font-family: 'Open Sans-Italic';\n        font-size: 28px;\n        margin: 0 2.3em;\n        line-height: 1.8em;\n        text-align: center;\n        background-color: #e2c3c3;\n    }\n    .ui-datepicker .ui-datepicker-title select {\n        font-size: 1em;\n        margin: 1px 0;\n    }\n    .ui-datepicker select.ui-datepicker-month,\n    .ui-datepicker select.ui-datepicker-year {\n        width: 45%;\n                                             }\n\n/* Styles follow for the date-picker table*/\n    .ui-datepicker table {\n        width: 100%;\n        font-family: 'Open Sans-Condensed-ExtraBold';\n        font-size: 26px;\n        border-collapse: collapse;\n        margin: 0 0 .4em;\n        \n    }\n    .ui-datepicker th {\n        padding: 0px;\n        /*padding: .7em .3em;*/\n        /*text-align: center;\n        font-weight: bold;*/ \n        border: 0;\n        color: #3a1053;\n    }\n    .ui-datepicker td {\n        border: 0;\n        padding: 0px;\n    }\n    .ui-datepicker td span,\n    .ui-datepicker td a {\n        display: block;\n        padding: .2em;\n        text-align: center;\n        text-decoration: none;\n    }\n    .ui-datepicker .ui-datepicker-buttonpane {\n        background-image: none;\n        margin: .7em 0 0 0;\n        padding: 0 .2em;\n        border-left: 0;\n        border-right: 0;\n        border-bottom: 0;\n    }\n    .ui-datepicker .ui-datepicker-buttonpane button {\n        float: right;\n        margin: .5em .2em .4em;\n        cursor: pointer;\n        padding: .2em .6em .3em .6em;\n        width: auto;\n        overflow: visible;\n    }\n    .ui-datepicker .ui-datepicker-buttonpane button.ui-datepicker-current {\n        float: left;\n    }\n    \n    /* with multiple calendars */\n    .ui-datepicker.ui-datepicker-multi {\n        width: auto;\n    }\n    .ui-datepicker-multi .ui-datepicker-group {\n        float: left;\n    }\n    .ui-datepicker-multi .ui-datepicker-group table {\n        width: 95%;\n        margin: 0 auto .4em;\n    }\n    .ui-datepicker-multi-2 .ui-datepicker-group {\n        width: 50%;\n    }\n    .ui-datepicker-multi-3 .ui-datepicker-group {\n        width: 33.3%;\n    }\n    .ui-datepicker-multi-4 .ui-datepicker-group {\n        width: 25%;\n    }\n    .ui-datepicker-multi .ui-datepicker-group-last .ui-datepicker-header,\n    .ui-datepicker-multi .ui-datepicker-group-middle .ui-datepicker-header {\n        border-left-width: 0;\n    }\n    .ui-datepicker-multi .ui-datepicker-buttonpane {\n        clear: left;\n    }\n    .ui-datepicker-row-break {\n        clear: both;\n        width: 100%;\n        font-size: 0;\n    }\n    \n    /* RTL support */\n    .ui-datepicker-rtl {\n        direction: rtl;\n    }\n    .ui-datepicker-rtl .ui-datepicker-prev {\n        right: 2px;\n        left: auto;\n    }\n    .ui-datepicker-rtl .ui-datepicker-next {\n        left: 2px;\n        right: auto;\n    }\n    .ui-datepicker-rtl .ui-datepicker-prev:hover {\n        right: 1px;\n        left: auto;\n    }\n    .ui-datepicker-rtl .ui-datepicker-next:hover {\n        left: 1px;\n        right: auto;\n    }\n    .ui-datepicker-rtl .ui-datepicker-buttonpane {\n        clear: right;\n    }\n    .ui-datepicker-rtl .ui-datepicker-buttonpane button {\n        float: left;\n    }\n    .ui-datepicker-rtl .ui-datepicker-buttonpane button.ui-datepicker-current,\n    .ui-datepicker-rtl .ui-datepicker-group {\n        float: right;\n    }\n    .ui-datepicker-rtl .ui-datepicker-group-last .ui-datepicker-header,\n    .ui-datepicker-rtl .ui-datepicker-group-middle .ui-datepicker-header {\n        border-right-width: 0;\n        border-left-width: 1px;\n    }\n    \n    /* Icons \n    Me: these are todo with the \"Prev\" and \"Next\" words.\n\n       */\n    .ui-datepicker .ui-icon {\n        display: block;\n        text-indent: 0px; /*-99999px;*/\n        overflow: hidden;\n        background-repeat: no-repeat;\n        left: .5em;\n        top: .3em;\n                            }\n\n/*The form in which user inputs \nthe name of a new project, new \nheading or new todo*/\n.newFormOuterDiv{\nposition: absolute;\ntop: 50px;\nleft: 400px;\n\nz-index: 25;\n\nwidth: 300px;\nheight: fit-content;\n\ndisplay: flex;\nflex-direction: column;\njustify-content: space-around;\nalign-items: center;\n\nbackground-color: rgb(172, 144, 216);\nbox-shadow: rgb(0, 0, 0) 18px 18px 18px;\nborder: 2px solid rgb(179, 105, 105);\nborder-radius: 5px;\n                }\n\n/*The container div for the form <p>\n(which reads \"Type new name\") */\n.newFormPcontainerDiv{\n    position:relative;\n    left: 10px;\n    top: -2px;\n    margin:0px;\n    padding:0px;\n    \n    width: 100%;\n    height: 36px;\n    /*development: \n    border:rgb(0, 0, 0) 1px dotted;*/\n                         }\n\n/*The <p> \n(which reads \"Type new name\") */\n.newFormP{\n    margin:0px;\n    padding:0px;\n\n    position:relative;\n    width: 100%;\n    \n    font-family: 'Open Sans-Italic';\n    font-size: 26px;\n    color: rgb(207, 184, 184);\n    \n                         }\n\n\n\n/*The container div for the form input*/\n.newFormInputContainerDiv{\n    position:relative;\n    width: 100%;\n    height: 36px;\n    /*development:\n    border:rgb(0, 0, 0) 1px dotted; */\n                         }\n\n.newFormInput {\nposition: relative;\nleft: 10px;\n\nheight: 25px;\nwidth: 75%;\n              }\n\n\n.newFormLabel{\nfont-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\nfont-size: 16px;\nposition: relative;\nleft: 10px;\n             }\n\n/*The container div for the form buttons*/\n.newFormButtonsContainerDiv{\n    position:relative;\n    display: flex;\nflex-direction: row;\njustify-content: space-between;\nalign-items: center;\n    width: 95%;\n    height: 46px;\n    /*development: \n    border:rgb(0, 0, 0) 1px dotted;*/\n                         }\n\n             \n\n\n#newFormSubmitButtonID{\n\n}\n\n#newFormCancelButtonID{\n\n}\n\n\n/*-----------------------------------------------------------------------------------*/\n\n\n/*ANIMATION KEYFRAMES FOLLOW*/\n@keyframes grow1 { \n    0% { \n        transform: scaleY(0); \n        transform: scaleX(0); \n        opacity:0.3;\n        } \n\n    50% { \n        /*transform: scaleY(1.2); */\n        transform: scaleX(1.2); \n        opacity:0.5;\n        } \n\n    100% { \n        transform: scaleY(1); \n        transform: scaleX(1); \n        opacity:1.0;\n        } \n\n}\n\n@keyframes growMenu {\n    from {height: 0px;}\n    to {height: fit-content;}\n  }\n\n\n/*-------------------------------------*/\n\n\n/*-- Classes for the rightmost button\nbar and the buttons in it --*/\n.rightMostButtonBar{\n    position: absolute;\n    top: 346px;\n    left: 585px;\n    \n    width: 150px;\n    height: 40px;\n    \n    background-color: rgb(209, 184, 238);\n    border: rgb(224, 134, 134) 3px outset;\n    border-radius: 5px;\n    z-index: 10;\n    }\n\n        \n\n/*-- Classes for ddMenu that uses javascript \nto animate the movement of the ddMenu \n(produces moevement that is a bit clunky \nas you cannot use a timing curve)---*/\n\n/*\nNOTE: NO LONGER USED!\nThe div to which code appends \nthe ddmenus. This div has the copper border\nand is the middle of the three button bars\n\n.testMenuEnclDiv{\nposition: absolute;\ntop: 346px;\nleft: 400px;\n\nwidth: 150px;\nheight: 40px;\n\nbackground-color: rgb(209, 184, 238);\nborder: rgb(224, 134, 134) 3px outset;\nborder-radius: 5px;\nz-index: 10;\n}\n*/\n\n\n\n\n/*-NOTE: code makes the style attributes of the \nmenuAllEnclDiv in the function that makes \nthe ddlist, hence there is no hard-coded class\nfor that div here-*/\n\n.menuDiv{\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n\nposition: relative;\n\n    width: 93%;\nheight: 30px;\n\nbackground-color: rgb(115, 29, 212);\nborder: rgb(224, 134, 134) 3px outset;\nborder-radius: 5px;\n\nz-index: 15;\n        }\n\n\n.menuItemsEnclDiv{\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: center;\n    \n    position: relative;\n    top: -120px;\n\n    width: 95%;\n    \n    background-color: none;\n    /*\n    border: rgb(14, 13, 13) 3px dotted; *//* nearly black*/\n    border-radius: 5px;\n\n    z-index: 10;\n\n    overflow-y: hidden;\n\n    }\n    \n.menuItemDiv{\n        position: relative;\n                \n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n\n        width: 90%;\n        height: 30px;\n        \n        background-color: rgb(115, 29, 212);\n        border: rgb(224, 134, 134) 3px outset;\n        border-radius: 5px;\n        }\n    \n.menuItemP{\nfont-size: 16px;\nline-height: 17px;\nfont-family: 'Open Sans-Condensed-ExtraBold';\ncolor: #e5baba;\n\n          }\n\n/*-------------------------------------*/\n/*-- Classes for ddMenu that uses transform and transition ---*/\n/*-- Note that the div to which to append the menu is \nthe same as in the case of the ddMenu made using javascript,\nhence does not appear here ---*/\n\n/*-NOTE: code makes the style attributes of the \nallEnclDiv in the function that makes \nthe ddlist, hence there is no hard-coded class\nfor that div here-*/\n\n/*For the div that includes text \"Menu\"\n(or whatever the title of the DDmenu is\n(in the case of this app, \"How to use \nthis app\"))*/\n    .menuDiv1{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    \n    position: relative;\n    min-width: 80px;\n    width: fit-content;\n    height: 30px;\n    \n    background-color: rgb(115, 29, 212);\n    border: rgb(224, 134, 134) 3px outset;\n    border-radius: 5px;\n    \n    padding-left: 5px;\n    padding-right: 5px;    \n\n    z-index: 15;\n            }\n\n.menuDiv1:active{   \n    transform: translateY(4px);\n    transform: translateX(4px);\n    box-shadow: black 1px 1px 1px;\n                   } \n\n\n/*A div that encloses all of the \nddmenu items. This div slides up and down\nas the user clicks either the menu items \nor the menu div*/\n    .menuItemsEnclDiv1{\n        \n        \n        position: relative;\n        /*top value set in dynamically*/\n        left: 0px;\n        width: 98%;\n        \n        /* nearly black in dev:\n        border: rgb(14, 13, 13) 3px dotted;  */\n        border-radius: 5px;\n    \n        z-index: 10;\n        \n        overflow-x: hidden;\n            overflow-y: hidden;\n                      }\n\n/*A div for each menu item*/        \n    .menuItemDiv1{\n            position: relative;\n            left:0px;      \n            /* Code sets top dynamically */  \n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n\n            width: 91px;\n            /*width: fit-content;*/\n            height: 30px;\n            \n            background-color: rgb(115, 29, 212);\n            border: rgb(224, 134, 134) 3px outset;\n            border-radius: 5px;\n            /*offsetHeight is height + 2*border\n            or 36px\n            */\n            overflow-x: hidden;\n            overflow-y: hidden;\n\n            }\n.menuItemDiv1:active{   \n    box-shadow: #d6c14c 5px 0px 5px, #d6c14c  -5px 0px 5px; \n    /*\n    transform: translateY(4px);\n    transform: translateX(4px);\n    box-shadow: black 1px 1px 1px;\n    */\n                    } \n\n\n/* The <p> for the title of each menu item*/\n    .menuItemP1{\n    font-size: 16px;\n    line-height: 17px;\n    font-family: 'Open Sans-Condensed-ExtraBold';\n    color: #f5efef;\n    \n              }\n              \n/*-----------------------------------------------------------------------*/\n\n/*-------------------------------------*/\n/* Styles for the mobile-phone menu  */\n/*-------------------------------------*/\n\n/* A div with which you can quickly visually \ncompare an element to get a rough  \nidea of the length of that element */\n.rulerDiv{\n\nposition: absolute;\ntop: 70px;\nright: 0px;\n\nwidth: 78px;\nheight: 40px;\n\nbackground-color: #8a1010;\n\npadding: 0px;\nmargin: 0px;\n\n        }\n\n.rulerDivPosR{\n    top: 80px;\n    right: 0px;\n             }\n\n.rulerDivPosL{\n    top: 150px;\n    left: 0px;\n             }\n\n\n\n.visTestDiv{\nbackground-color: #a2bbe0;\nborder: #58f50a 1px dotted;\n\nposition: absolute;\ntop: 100px;\nleft:100px;\n\nwidth: 260px; \nheight: 250px;\n\nz-index: 35;\n\n/* 'visibility' makes an element\ninvisible but keeps it in its  \noriginal position and maintains\nits size: */\n/* visibility: hidden;  */\n           }\n\n\n/*-- style for the div that \nencloses the main menu items \n--*/\n.menuEncloseDiv{\nposition: absolute;\n\n/*Code sets the left property\nby adding another class*/\n\n/*display: block;*/\n\ndisplay: flex;\nflex-direction: row;\njustify-content: flex-start;\nalign-items: center;\n\n\nborder: #000000 1px dotted;\n/*\nborder-top: #000000 2px dotted;\nborder-bottom: #000000 2px dotted; */\n\n/*  */\nwidth:fit-content;\nheight: 50px;\n\nmargin: 0px;\npadding: 0px;\n\noverflow-x: hidden;\noverflow-y: hidden;\n\n               }\n\n\n/*-- style for the div that \nencloses the \"More...\" menu item\n --*/\n \n.moreEncloseDiv{\n    position: absolute;\n    /*Code sets the right property\n    by adding another class*/\n    \n    \n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: center;\n    \n    /*\n    border: #f20f0f 1px dotted;\n    border-top: #000000 2px dotted;\n    border-bottom: #000000 2px dotted; */\n    \n    border-left: #f20f0f 1px dotted;\n    border-right: #0f31f2 1px dotted;\n\n    margin: 0px;\n    padding: 0px;\n\n    /*  */\n    width:fit-content;\n    height: 50px;\n    \n    overflow-x: hidden;\n    overflow-y: hidden;\n\n    visibility: visible;\n    \n                   }\n\n/*-- for the div that encloses the \nmain menu items (which has main class \nmenuEncloseDiv) --*/\n.mainItemsEnclDivLeftPos{\n    top: 0px;\n    left: 0px;\n    \n                        }\n                        \n/*-- for the div that encloses the \n\"More...\" menu item (which has main class \nmoreEncloseDiv) --*/\n.moreItemEnclDivRightPos{\n    top: 0px;\n    right: 0px;\n    /*Code sets width*/\n                        }\n\n\n/*-- for the div that encloses the \nmain menu items in the case of the \nhard-coded items--*/\n.HCmainItemsEnclDivLeftPos{\n    left: 0px;\n    top: 100px;\n                        }\n\n/*-- for the div that encloses the \n\"More...\" menu item in the case of \nthe hard-coded \nitems --*/\n.HCmoreItemEnclDivRightPos{\n    top: 120px;\n    right: 0px;\n\n    /*Code sets width*/\n                        }\n\n/*-- the div for a menu item \nand the div for the \"More...\"\nitem --*/\n.menuItemDiv{\n\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n\nwidth: fit-content;\nheight: 40px;\n    \noverflow-x: hidden;\noverflow-y: hidden;\n\nbackground-color: #dcdbab;\nborder: #531010 1px solid;\n\nmargin-left: 5px;\nmargin-right: 5px;\n\npadding-left: 10px;\npadding-right: 10px;\n\n            }\n            \n/*-- the <p> for the text \nof the menu item --*/\n.menuItemP{\n/*-- DON\"T USE THE FOLLOWING AS IT MUCKS UP \noffsetWidth:\nfont-family: 'Open Sans-ExtraBold';   --*/\n/*I have tested the following font and it seems \nto work: */\nfont-family: 'Open Sans-Condensed-ExtraBold'; \nfont-size: 14px;\nline-height: 15px;\n/*\nwhite-space: nowrap;\noverflow: hidden;\ntext-overflow: clip;\n*/\n\ncolor: #4a0a6f;\n\npadding: 0px;\nmargin: 0px;\n         }\n\n\n\n/*-- the <p> for the text \nof the \"More\" menu item --*/\n.menuMoreItemP{\n/*I have tested the following font and it seems \nto work:    */    \n    font-family: 'Open Sans-Italic';\n    font-size: 14px;\n    line-height: 16px;\n    color: #52089d;\n    /*NOTE letter-spacing has no effect on this font!!*/\n    \n             }\n\n\n/*-- DON't USE -- DON't USE -- DON't USE \nThis style contains the dodgy font!!\nThe <p> for the text \nof the \"More\" menu item --*/\n.dodgyFontP{\n    font-family: 'Open Sans-ExtraBold';\n    font-size: 14px;\n    line-height: 15px;\n    color: #52089d;\n    \n             }\n\n/* -- \nThe div that drops down \nwhen the user clicks \"More...\" \n--*/ \n.remainderItemsDiv{\ndisplay: flex;\nflex-direction: column;\njustify-content: flex-start;\nalign-items: flex-end;\n\nposition: absolute;\n/* Code sets top and right values*/\n\nbackground-color: none; \nborder-radius: 5px;\ntransform-origin: top left;\ntransition: transform 0.3s ease-in-out 0s;\n                  }\n\n.remainderItemsDivExpand{\n    \ntransform: scaleY(1);\nheight: fit-content;\nwidth: fit-content;\n                        }\n\n.remainderItemsDivShrink{\n    \n    transform: scaleY(0);\n\n    height: fit-content;\n    width: fit-content;\n                        }\n\n\n\n\n\n\n\n\n\n\n/*-------------------------------------*/\n/* End styles for mobile-phone menu  */\n/*-------------------------------------*/\n\n\n\n\n\n\n\n\n\n\n\n\n/*-------------------------------------*/\n/*TEST STUFF TEST STUFF TEST STUFF TEST STUFF TEST STUFF TEST STUFF TEST STUFF*/\n/*-------------------------------------*/\n\n.testDiv0{\n    display: block;\n    position: absolute;\n    left: 500px;\n    top: 200px;    \n\n   width: 200px;\n    height: 200px;\n    background-color: rosybrown;\n    border: royalblue 1px solid;\n\n    padding: 0px;\n    margin: 0px;\n\n    z-index: 10;\n\n        }\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";

      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }

      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }

      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }

      content += cssWithMappingToString(item);

      if (needLayer) {
        content += "}";
      }

      if (item[2]) {
        content += "}";
      }

      if (item[4]) {
        content += "}";
      }

      return content;
    }).join("");
  }; // import a list of modules into the list


  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }

      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }

      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }

      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/getUrl.js":
/*!********************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/getUrl.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (url, options) {
  if (!options) {
    options = {};
  }

  if (!url) {
    return url;
  }

  url = String(url.__esModule ? url.default : url); // If url is already wrapped in quotes, remove them

  if (/^['"].*['"]$/.test(url)) {
    url = url.slice(1, -1);
  }

  if (options.hash) {
    url += options.hash;
  } // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls


  if (/["'() \t\n]|(%20)/.test(url) || options.needQuotes) {
    return "\"".concat(url.replace(/"/g, '\\"').replace(/\n/g, "\\n"), "\"");
  }

  return url;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || "").concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join("\n");
  }

  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}


/***/ }),

/***/ "./node_modules/html-entities/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/html-entities/lib/index.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var named_references_1 = __webpack_require__(/*! ./named-references */ "./node_modules/html-entities/lib/named-references.js");
var numeric_unicode_map_1 = __webpack_require__(/*! ./numeric-unicode-map */ "./node_modules/html-entities/lib/numeric-unicode-map.js");
var surrogate_pairs_1 = __webpack_require__(/*! ./surrogate-pairs */ "./node_modules/html-entities/lib/surrogate-pairs.js");
var allNamedReferences = __assign(__assign({}, named_references_1.namedReferences), { all: named_references_1.namedReferences.html5 });
var encodeRegExps = {
    specialChars: /[<>'"&]/g,
    nonAscii: /(?:[<>'"&\u0080-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,
    nonAsciiPrintable: /(?:[<>'"&\x01-\x08\x11-\x15\x17-\x1F\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g,
    extensive: /(?:[\x01-\x0c\x0e-\x1f\x21-\x2c\x2e-\x2f\x3a-\x40\x5b-\x60\x7b-\x7d\x7f-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g
};
var defaultEncodeOptions = {
    mode: 'specialChars',
    level: 'all',
    numeric: 'decimal'
};
/** Encodes all the necessary (specified by `level`) characters in the text */
function encode(text, _a) {
    var _b = _a === void 0 ? defaultEncodeOptions : _a, _c = _b.mode, mode = _c === void 0 ? 'specialChars' : _c, _d = _b.numeric, numeric = _d === void 0 ? 'decimal' : _d, _e = _b.level, level = _e === void 0 ? 'all' : _e;
    if (!text) {
        return '';
    }
    var encodeRegExp = encodeRegExps[mode];
    var references = allNamedReferences[level].characters;
    var isHex = numeric === 'hexadecimal';
    encodeRegExp.lastIndex = 0;
    var _b = encodeRegExp.exec(text);
    var _c;
    if (_b) {
        _c = '';
        var _d = 0;
        do {
            if (_d !== _b.index) {
                _c += text.substring(_d, _b.index);
            }
            var _e = _b[0];
            var result_1 = references[_e];
            if (!result_1) {
                var code_1 = _e.length > 1 ? surrogate_pairs_1.getCodePoint(_e, 0) : _e.charCodeAt(0);
                result_1 = (isHex ? '&#x' + code_1.toString(16) : '&#' + code_1) + ';';
            }
            _c += result_1;
            _d = _b.index + _e.length;
        } while ((_b = encodeRegExp.exec(text)));
        if (_d !== text.length) {
            _c += text.substring(_d);
        }
    }
    else {
        _c =
            text;
    }
    return _c;
}
exports.encode = encode;
var defaultDecodeOptions = {
    scope: 'body',
    level: 'all'
};
var strict = /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);/g;
var attribute = /&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+)[;=]?/g;
var baseDecodeRegExps = {
    xml: {
        strict: strict,
        attribute: attribute,
        body: named_references_1.bodyRegExps.xml
    },
    html4: {
        strict: strict,
        attribute: attribute,
        body: named_references_1.bodyRegExps.html4
    },
    html5: {
        strict: strict,
        attribute: attribute,
        body: named_references_1.bodyRegExps.html5
    }
};
var decodeRegExps = __assign(__assign({}, baseDecodeRegExps), { all: baseDecodeRegExps.html5 });
var fromCharCode = String.fromCharCode;
var outOfBoundsChar = fromCharCode(65533);
var defaultDecodeEntityOptions = {
    level: 'all'
};
/** Decodes a single entity */
function decodeEntity(entity, _a) {
    var _b = (_a === void 0 ? defaultDecodeEntityOptions : _a).level, level = _b === void 0 ? 'all' : _b;
    if (!entity) {
        return '';
    }
    var _b = entity;
    var decodeEntityLastChar_1 = entity[entity.length - 1];
    if (false) {}
    else if (false) {}
    else {
        var decodeResultByReference_1 = allNamedReferences[level].entities[entity];
        if (decodeResultByReference_1) {
            _b = decodeResultByReference_1;
        }
        else if (entity[0] === '&' && entity[1] === '#') {
            var decodeSecondChar_1 = entity[2];
            var decodeCode_1 = decodeSecondChar_1 == 'x' || decodeSecondChar_1 == 'X'
                ? parseInt(entity.substr(3), 16)
                : parseInt(entity.substr(2));
            _b =
                decodeCode_1 >= 0x10ffff
                    ? outOfBoundsChar
                    : decodeCode_1 > 65535
                        ? surrogate_pairs_1.fromCodePoint(decodeCode_1)
                        : fromCharCode(numeric_unicode_map_1.numericUnicodeMap[decodeCode_1] || decodeCode_1);
        }
    }
    return _b;
}
exports.decodeEntity = decodeEntity;
/** Decodes all entities in the text */
function decode(text, _a) {
    var decodeSecondChar_1 = _a === void 0 ? defaultDecodeOptions : _a, decodeCode_1 = decodeSecondChar_1.level, level = decodeCode_1 === void 0 ? 'all' : decodeCode_1, _b = decodeSecondChar_1.scope, scope = _b === void 0 ? level === 'xml' ? 'strict' : 'body' : _b;
    if (!text) {
        return '';
    }
    var decodeRegExp = decodeRegExps[level][scope];
    var references = allNamedReferences[level].entities;
    var isAttribute = scope === 'attribute';
    var isStrict = scope === 'strict';
    decodeRegExp.lastIndex = 0;
    var replaceMatch_1 = decodeRegExp.exec(text);
    var replaceResult_1;
    if (replaceMatch_1) {
        replaceResult_1 = '';
        var replaceLastIndex_1 = 0;
        do {
            if (replaceLastIndex_1 !== replaceMatch_1.index) {
                replaceResult_1 += text.substring(replaceLastIndex_1, replaceMatch_1.index);
            }
            var replaceInput_1 = replaceMatch_1[0];
            var decodeResult_1 = replaceInput_1;
            var decodeEntityLastChar_2 = replaceInput_1[replaceInput_1.length - 1];
            if (isAttribute
                && decodeEntityLastChar_2 === '=') {
                decodeResult_1 = replaceInput_1;
            }
            else if (isStrict
                && decodeEntityLastChar_2 !== ';') {
                decodeResult_1 = replaceInput_1;
            }
            else {
                var decodeResultByReference_2 = references[replaceInput_1];
                if (decodeResultByReference_2) {
                    decodeResult_1 = decodeResultByReference_2;
                }
                else if (replaceInput_1[0] === '&' && replaceInput_1[1] === '#') {
                    var decodeSecondChar_2 = replaceInput_1[2];
                    var decodeCode_2 = decodeSecondChar_2 == 'x' || decodeSecondChar_2 == 'X'
                        ? parseInt(replaceInput_1.substr(3), 16)
                        : parseInt(replaceInput_1.substr(2));
                    decodeResult_1 =
                        decodeCode_2 >= 0x10ffff
                            ? outOfBoundsChar
                            : decodeCode_2 > 65535
                                ? surrogate_pairs_1.fromCodePoint(decodeCode_2)
                                : fromCharCode(numeric_unicode_map_1.numericUnicodeMap[decodeCode_2] || decodeCode_2);
                }
            }
            replaceResult_1 += decodeResult_1;
            replaceLastIndex_1 = replaceMatch_1.index + replaceInput_1.length;
        } while ((replaceMatch_1 = decodeRegExp.exec(text)));
        if (replaceLastIndex_1 !== text.length) {
            replaceResult_1 += text.substring(replaceLastIndex_1);
        }
    }
    else {
        replaceResult_1 =
            text;
    }
    return replaceResult_1;
}
exports.decode = decode;


/***/ }),

/***/ "./node_modules/html-entities/lib/named-references.js":
/*!************************************************************!*\
  !*** ./node_modules/html-entities/lib/named-references.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
Object.defineProperty(exports, "__esModule", ({value:true}));exports.bodyRegExps={xml:/&(?:#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html4:/&(?:nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|AElig|Ccedil|Egrave|Eacute|Ecirc|Euml|Igrave|Iacute|Icirc|Iuml|ETH|Ntilde|Ograve|Oacute|Ocirc|Otilde|Ouml|times|Oslash|Ugrave|Uacute|Ucirc|Uuml|Yacute|THORN|szlig|agrave|aacute|acirc|atilde|auml|aring|aelig|ccedil|egrave|eacute|ecirc|euml|igrave|iacute|icirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|quot|amp|lt|gt|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g,html5:/&(?:AElig|AMP|Aacute|Acirc|Agrave|Aring|Atilde|Auml|COPY|Ccedil|ETH|Eacute|Ecirc|Egrave|Euml|GT|Iacute|Icirc|Igrave|Iuml|LT|Ntilde|Oacute|Ocirc|Ograve|Oslash|Otilde|Ouml|QUOT|REG|THORN|Uacute|Ucirc|Ugrave|Uuml|Yacute|aacute|acirc|acute|aelig|agrave|amp|aring|atilde|auml|brvbar|ccedil|cedil|cent|copy|curren|deg|divide|eacute|ecirc|egrave|eth|euml|frac12|frac14|frac34|gt|iacute|icirc|iexcl|igrave|iquest|iuml|laquo|lt|macr|micro|middot|nbsp|not|ntilde|oacute|ocirc|ograve|ordf|ordm|oslash|otilde|ouml|para|plusmn|pound|quot|raquo|reg|sect|shy|sup1|sup2|sup3|szlig|thorn|times|uacute|ucirc|ugrave|uml|uuml|yacute|yen|yuml|#\d+|#[xX][\da-fA-F]+|[0-9a-zA-Z]+);?/g};exports.namedReferences={xml:{entities:{"&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},characters:{"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"}},html4:{entities:{"&apos;":"'","&nbsp":" ","&nbsp;":" ","&iexcl":"¡","&iexcl;":"¡","&cent":"¢","&cent;":"¢","&pound":"£","&pound;":"£","&curren":"¤","&curren;":"¤","&yen":"¥","&yen;":"¥","&brvbar":"¦","&brvbar;":"¦","&sect":"§","&sect;":"§","&uml":"¨","&uml;":"¨","&copy":"©","&copy;":"©","&ordf":"ª","&ordf;":"ª","&laquo":"«","&laquo;":"«","&not":"¬","&not;":"¬","&shy":"­","&shy;":"­","&reg":"®","&reg;":"®","&macr":"¯","&macr;":"¯","&deg":"°","&deg;":"°","&plusmn":"±","&plusmn;":"±","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&acute":"´","&acute;":"´","&micro":"µ","&micro;":"µ","&para":"¶","&para;":"¶","&middot":"·","&middot;":"·","&cedil":"¸","&cedil;":"¸","&sup1":"¹","&sup1;":"¹","&ordm":"º","&ordm;":"º","&raquo":"»","&raquo;":"»","&frac14":"¼","&frac14;":"¼","&frac12":"½","&frac12;":"½","&frac34":"¾","&frac34;":"¾","&iquest":"¿","&iquest;":"¿","&Agrave":"À","&Agrave;":"À","&Aacute":"Á","&Aacute;":"Á","&Acirc":"Â","&Acirc;":"Â","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Aring":"Å","&Aring;":"Å","&AElig":"Æ","&AElig;":"Æ","&Ccedil":"Ç","&Ccedil;":"Ç","&Egrave":"È","&Egrave;":"È","&Eacute":"É","&Eacute;":"É","&Ecirc":"Ê","&Ecirc;":"Ê","&Euml":"Ë","&Euml;":"Ë","&Igrave":"Ì","&Igrave;":"Ì","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Iuml":"Ï","&Iuml;":"Ï","&ETH":"Ð","&ETH;":"Ð","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Ograve":"Ò","&Ograve;":"Ò","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Otilde":"Õ","&Otilde;":"Õ","&Ouml":"Ö","&Ouml;":"Ö","&times":"×","&times;":"×","&Oslash":"Ø","&Oslash;":"Ø","&Ugrave":"Ù","&Ugrave;":"Ù","&Uacute":"Ú","&Uacute;":"Ú","&Ucirc":"Û","&Ucirc;":"Û","&Uuml":"Ü","&Uuml;":"Ü","&Yacute":"Ý","&Yacute;":"Ý","&THORN":"Þ","&THORN;":"Þ","&szlig":"ß","&szlig;":"ß","&agrave":"à","&agrave;":"à","&aacute":"á","&aacute;":"á","&acirc":"â","&acirc;":"â","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&aring":"å","&aring;":"å","&aelig":"æ","&aelig;":"æ","&ccedil":"ç","&ccedil;":"ç","&egrave":"è","&egrave;":"è","&eacute":"é","&eacute;":"é","&ecirc":"ê","&ecirc;":"ê","&euml":"ë","&euml;":"ë","&igrave":"ì","&igrave;":"ì","&iacute":"í","&iacute;":"í","&icirc":"î","&icirc;":"î","&iuml":"ï","&iuml;":"ï","&eth":"ð","&eth;":"ð","&ntilde":"ñ","&ntilde;":"ñ","&ograve":"ò","&ograve;":"ò","&oacute":"ó","&oacute;":"ó","&ocirc":"ô","&ocirc;":"ô","&otilde":"õ","&otilde;":"õ","&ouml":"ö","&ouml;":"ö","&divide":"÷","&divide;":"÷","&oslash":"ø","&oslash;":"ø","&ugrave":"ù","&ugrave;":"ù","&uacute":"ú","&uacute;":"ú","&ucirc":"û","&ucirc;":"û","&uuml":"ü","&uuml;":"ü","&yacute":"ý","&yacute;":"ý","&thorn":"þ","&thorn;":"þ","&yuml":"ÿ","&yuml;":"ÿ","&quot":'"',"&quot;":'"',"&amp":"&","&amp;":"&","&lt":"<","&lt;":"<","&gt":">","&gt;":">","&OElig;":"Œ","&oelig;":"œ","&Scaron;":"Š","&scaron;":"š","&Yuml;":"Ÿ","&circ;":"ˆ","&tilde;":"˜","&ensp;":" ","&emsp;":" ","&thinsp;":" ","&zwnj;":"‌","&zwj;":"‍","&lrm;":"‎","&rlm;":"‏","&ndash;":"–","&mdash;":"—","&lsquo;":"‘","&rsquo;":"’","&sbquo;":"‚","&ldquo;":"“","&rdquo;":"”","&bdquo;":"„","&dagger;":"†","&Dagger;":"‡","&permil;":"‰","&lsaquo;":"‹","&rsaquo;":"›","&euro;":"€","&fnof;":"ƒ","&Alpha;":"Α","&Beta;":"Β","&Gamma;":"Γ","&Delta;":"Δ","&Epsilon;":"Ε","&Zeta;":"Ζ","&Eta;":"Η","&Theta;":"Θ","&Iota;":"Ι","&Kappa;":"Κ","&Lambda;":"Λ","&Mu;":"Μ","&Nu;":"Ν","&Xi;":"Ξ","&Omicron;":"Ο","&Pi;":"Π","&Rho;":"Ρ","&Sigma;":"Σ","&Tau;":"Τ","&Upsilon;":"Υ","&Phi;":"Φ","&Chi;":"Χ","&Psi;":"Ψ","&Omega;":"Ω","&alpha;":"α","&beta;":"β","&gamma;":"γ","&delta;":"δ","&epsilon;":"ε","&zeta;":"ζ","&eta;":"η","&theta;":"θ","&iota;":"ι","&kappa;":"κ","&lambda;":"λ","&mu;":"μ","&nu;":"ν","&xi;":"ξ","&omicron;":"ο","&pi;":"π","&rho;":"ρ","&sigmaf;":"ς","&sigma;":"σ","&tau;":"τ","&upsilon;":"υ","&phi;":"φ","&chi;":"χ","&psi;":"ψ","&omega;":"ω","&thetasym;":"ϑ","&upsih;":"ϒ","&piv;":"ϖ","&bull;":"•","&hellip;":"…","&prime;":"′","&Prime;":"″","&oline;":"‾","&frasl;":"⁄","&weierp;":"℘","&image;":"ℑ","&real;":"ℜ","&trade;":"™","&alefsym;":"ℵ","&larr;":"←","&uarr;":"↑","&rarr;":"→","&darr;":"↓","&harr;":"↔","&crarr;":"↵","&lArr;":"⇐","&uArr;":"⇑","&rArr;":"⇒","&dArr;":"⇓","&hArr;":"⇔","&forall;":"∀","&part;":"∂","&exist;":"∃","&empty;":"∅","&nabla;":"∇","&isin;":"∈","&notin;":"∉","&ni;":"∋","&prod;":"∏","&sum;":"∑","&minus;":"−","&lowast;":"∗","&radic;":"√","&prop;":"∝","&infin;":"∞","&ang;":"∠","&and;":"∧","&or;":"∨","&cap;":"∩","&cup;":"∪","&int;":"∫","&there4;":"∴","&sim;":"∼","&cong;":"≅","&asymp;":"≈","&ne;":"≠","&equiv;":"≡","&le;":"≤","&ge;":"≥","&sub;":"⊂","&sup;":"⊃","&nsub;":"⊄","&sube;":"⊆","&supe;":"⊇","&oplus;":"⊕","&otimes;":"⊗","&perp;":"⊥","&sdot;":"⋅","&lceil;":"⌈","&rceil;":"⌉","&lfloor;":"⌊","&rfloor;":"⌋","&lang;":"〈","&rang;":"〉","&loz;":"◊","&spades;":"♠","&clubs;":"♣","&hearts;":"♥","&diams;":"♦"},characters:{"'":"&apos;"," ":"&nbsp;","¡":"&iexcl;","¢":"&cent;","£":"&pound;","¤":"&curren;","¥":"&yen;","¦":"&brvbar;","§":"&sect;","¨":"&uml;","©":"&copy;","ª":"&ordf;","«":"&laquo;","¬":"&not;","­":"&shy;","®":"&reg;","¯":"&macr;","°":"&deg;","±":"&plusmn;","²":"&sup2;","³":"&sup3;","´":"&acute;","µ":"&micro;","¶":"&para;","·":"&middot;","¸":"&cedil;","¹":"&sup1;","º":"&ordm;","»":"&raquo;","¼":"&frac14;","½":"&frac12;","¾":"&frac34;","¿":"&iquest;","À":"&Agrave;","Á":"&Aacute;","Â":"&Acirc;","Ã":"&Atilde;","Ä":"&Auml;","Å":"&Aring;","Æ":"&AElig;","Ç":"&Ccedil;","È":"&Egrave;","É":"&Eacute;","Ê":"&Ecirc;","Ë":"&Euml;","Ì":"&Igrave;","Í":"&Iacute;","Î":"&Icirc;","Ï":"&Iuml;","Ð":"&ETH;","Ñ":"&Ntilde;","Ò":"&Ograve;","Ó":"&Oacute;","Ô":"&Ocirc;","Õ":"&Otilde;","Ö":"&Ouml;","×":"&times;","Ø":"&Oslash;","Ù":"&Ugrave;","Ú":"&Uacute;","Û":"&Ucirc;","Ü":"&Uuml;","Ý":"&Yacute;","Þ":"&THORN;","ß":"&szlig;","à":"&agrave;","á":"&aacute;","â":"&acirc;","ã":"&atilde;","ä":"&auml;","å":"&aring;","æ":"&aelig;","ç":"&ccedil;","è":"&egrave;","é":"&eacute;","ê":"&ecirc;","ë":"&euml;","ì":"&igrave;","í":"&iacute;","î":"&icirc;","ï":"&iuml;","ð":"&eth;","ñ":"&ntilde;","ò":"&ograve;","ó":"&oacute;","ô":"&ocirc;","õ":"&otilde;","ö":"&ouml;","÷":"&divide;","ø":"&oslash;","ù":"&ugrave;","ú":"&uacute;","û":"&ucirc;","ü":"&uuml;","ý":"&yacute;","þ":"&thorn;","ÿ":"&yuml;",'"':"&quot;","&":"&amp;","<":"&lt;",">":"&gt;","Œ":"&OElig;","œ":"&oelig;","Š":"&Scaron;","š":"&scaron;","Ÿ":"&Yuml;","ˆ":"&circ;","˜":"&tilde;"," ":"&ensp;"," ":"&emsp;"," ":"&thinsp;","‌":"&zwnj;","‍":"&zwj;","‎":"&lrm;","‏":"&rlm;","–":"&ndash;","—":"&mdash;","‘":"&lsquo;","’":"&rsquo;","‚":"&sbquo;","“":"&ldquo;","”":"&rdquo;","„":"&bdquo;","†":"&dagger;","‡":"&Dagger;","‰":"&permil;","‹":"&lsaquo;","›":"&rsaquo;","€":"&euro;","ƒ":"&fnof;","Α":"&Alpha;","Β":"&Beta;","Γ":"&Gamma;","Δ":"&Delta;","Ε":"&Epsilon;","Ζ":"&Zeta;","Η":"&Eta;","Θ":"&Theta;","Ι":"&Iota;","Κ":"&Kappa;","Λ":"&Lambda;","Μ":"&Mu;","Ν":"&Nu;","Ξ":"&Xi;","Ο":"&Omicron;","Π":"&Pi;","Ρ":"&Rho;","Σ":"&Sigma;","Τ":"&Tau;","Υ":"&Upsilon;","Φ":"&Phi;","Χ":"&Chi;","Ψ":"&Psi;","Ω":"&Omega;","α":"&alpha;","β":"&beta;","γ":"&gamma;","δ":"&delta;","ε":"&epsilon;","ζ":"&zeta;","η":"&eta;","θ":"&theta;","ι":"&iota;","κ":"&kappa;","λ":"&lambda;","μ":"&mu;","ν":"&nu;","ξ":"&xi;","ο":"&omicron;","π":"&pi;","ρ":"&rho;","ς":"&sigmaf;","σ":"&sigma;","τ":"&tau;","υ":"&upsilon;","φ":"&phi;","χ":"&chi;","ψ":"&psi;","ω":"&omega;","ϑ":"&thetasym;","ϒ":"&upsih;","ϖ":"&piv;","•":"&bull;","…":"&hellip;","′":"&prime;","″":"&Prime;","‾":"&oline;","⁄":"&frasl;","℘":"&weierp;","ℑ":"&image;","ℜ":"&real;","™":"&trade;","ℵ":"&alefsym;","←":"&larr;","↑":"&uarr;","→":"&rarr;","↓":"&darr;","↔":"&harr;","↵":"&crarr;","⇐":"&lArr;","⇑":"&uArr;","⇒":"&rArr;","⇓":"&dArr;","⇔":"&hArr;","∀":"&forall;","∂":"&part;","∃":"&exist;","∅":"&empty;","∇":"&nabla;","∈":"&isin;","∉":"&notin;","∋":"&ni;","∏":"&prod;","∑":"&sum;","−":"&minus;","∗":"&lowast;","√":"&radic;","∝":"&prop;","∞":"&infin;","∠":"&ang;","∧":"&and;","∨":"&or;","∩":"&cap;","∪":"&cup;","∫":"&int;","∴":"&there4;","∼":"&sim;","≅":"&cong;","≈":"&asymp;","≠":"&ne;","≡":"&equiv;","≤":"&le;","≥":"&ge;","⊂":"&sub;","⊃":"&sup;","⊄":"&nsub;","⊆":"&sube;","⊇":"&supe;","⊕":"&oplus;","⊗":"&otimes;","⊥":"&perp;","⋅":"&sdot;","⌈":"&lceil;","⌉":"&rceil;","⌊":"&lfloor;","⌋":"&rfloor;","〈":"&lang;","〉":"&rang;","◊":"&loz;","♠":"&spades;","♣":"&clubs;","♥":"&hearts;","♦":"&diams;"}},html5:{entities:{"&AElig":"Æ","&AElig;":"Æ","&AMP":"&","&AMP;":"&","&Aacute":"Á","&Aacute;":"Á","&Abreve;":"Ă","&Acirc":"Â","&Acirc;":"Â","&Acy;":"А","&Afr;":"𝔄","&Agrave":"À","&Agrave;":"À","&Alpha;":"Α","&Amacr;":"Ā","&And;":"⩓","&Aogon;":"Ą","&Aopf;":"𝔸","&ApplyFunction;":"⁡","&Aring":"Å","&Aring;":"Å","&Ascr;":"𝒜","&Assign;":"≔","&Atilde":"Ã","&Atilde;":"Ã","&Auml":"Ä","&Auml;":"Ä","&Backslash;":"∖","&Barv;":"⫧","&Barwed;":"⌆","&Bcy;":"Б","&Because;":"∵","&Bernoullis;":"ℬ","&Beta;":"Β","&Bfr;":"𝔅","&Bopf;":"𝔹","&Breve;":"˘","&Bscr;":"ℬ","&Bumpeq;":"≎","&CHcy;":"Ч","&COPY":"©","&COPY;":"©","&Cacute;":"Ć","&Cap;":"⋒","&CapitalDifferentialD;":"ⅅ","&Cayleys;":"ℭ","&Ccaron;":"Č","&Ccedil":"Ç","&Ccedil;":"Ç","&Ccirc;":"Ĉ","&Cconint;":"∰","&Cdot;":"Ċ","&Cedilla;":"¸","&CenterDot;":"·","&Cfr;":"ℭ","&Chi;":"Χ","&CircleDot;":"⊙","&CircleMinus;":"⊖","&CirclePlus;":"⊕","&CircleTimes;":"⊗","&ClockwiseContourIntegral;":"∲","&CloseCurlyDoubleQuote;":"”","&CloseCurlyQuote;":"’","&Colon;":"∷","&Colone;":"⩴","&Congruent;":"≡","&Conint;":"∯","&ContourIntegral;":"∮","&Copf;":"ℂ","&Coproduct;":"∐","&CounterClockwiseContourIntegral;":"∳","&Cross;":"⨯","&Cscr;":"𝒞","&Cup;":"⋓","&CupCap;":"≍","&DD;":"ⅅ","&DDotrahd;":"⤑","&DJcy;":"Ђ","&DScy;":"Ѕ","&DZcy;":"Џ","&Dagger;":"‡","&Darr;":"↡","&Dashv;":"⫤","&Dcaron;":"Ď","&Dcy;":"Д","&Del;":"∇","&Delta;":"Δ","&Dfr;":"𝔇","&DiacriticalAcute;":"´","&DiacriticalDot;":"˙","&DiacriticalDoubleAcute;":"˝","&DiacriticalGrave;":"`","&DiacriticalTilde;":"˜","&Diamond;":"⋄","&DifferentialD;":"ⅆ","&Dopf;":"𝔻","&Dot;":"¨","&DotDot;":"⃜","&DotEqual;":"≐","&DoubleContourIntegral;":"∯","&DoubleDot;":"¨","&DoubleDownArrow;":"⇓","&DoubleLeftArrow;":"⇐","&DoubleLeftRightArrow;":"⇔","&DoubleLeftTee;":"⫤","&DoubleLongLeftArrow;":"⟸","&DoubleLongLeftRightArrow;":"⟺","&DoubleLongRightArrow;":"⟹","&DoubleRightArrow;":"⇒","&DoubleRightTee;":"⊨","&DoubleUpArrow;":"⇑","&DoubleUpDownArrow;":"⇕","&DoubleVerticalBar;":"∥","&DownArrow;":"↓","&DownArrowBar;":"⤓","&DownArrowUpArrow;":"⇵","&DownBreve;":"̑","&DownLeftRightVector;":"⥐","&DownLeftTeeVector;":"⥞","&DownLeftVector;":"↽","&DownLeftVectorBar;":"⥖","&DownRightTeeVector;":"⥟","&DownRightVector;":"⇁","&DownRightVectorBar;":"⥗","&DownTee;":"⊤","&DownTeeArrow;":"↧","&Downarrow;":"⇓","&Dscr;":"𝒟","&Dstrok;":"Đ","&ENG;":"Ŋ","&ETH":"Ð","&ETH;":"Ð","&Eacute":"É","&Eacute;":"É","&Ecaron;":"Ě","&Ecirc":"Ê","&Ecirc;":"Ê","&Ecy;":"Э","&Edot;":"Ė","&Efr;":"𝔈","&Egrave":"È","&Egrave;":"È","&Element;":"∈","&Emacr;":"Ē","&EmptySmallSquare;":"◻","&EmptyVerySmallSquare;":"▫","&Eogon;":"Ę","&Eopf;":"𝔼","&Epsilon;":"Ε","&Equal;":"⩵","&EqualTilde;":"≂","&Equilibrium;":"⇌","&Escr;":"ℰ","&Esim;":"⩳","&Eta;":"Η","&Euml":"Ë","&Euml;":"Ë","&Exists;":"∃","&ExponentialE;":"ⅇ","&Fcy;":"Ф","&Ffr;":"𝔉","&FilledSmallSquare;":"◼","&FilledVerySmallSquare;":"▪","&Fopf;":"𝔽","&ForAll;":"∀","&Fouriertrf;":"ℱ","&Fscr;":"ℱ","&GJcy;":"Ѓ","&GT":">","&GT;":">","&Gamma;":"Γ","&Gammad;":"Ϝ","&Gbreve;":"Ğ","&Gcedil;":"Ģ","&Gcirc;":"Ĝ","&Gcy;":"Г","&Gdot;":"Ġ","&Gfr;":"𝔊","&Gg;":"⋙","&Gopf;":"𝔾","&GreaterEqual;":"≥","&GreaterEqualLess;":"⋛","&GreaterFullEqual;":"≧","&GreaterGreater;":"⪢","&GreaterLess;":"≷","&GreaterSlantEqual;":"⩾","&GreaterTilde;":"≳","&Gscr;":"𝒢","&Gt;":"≫","&HARDcy;":"Ъ","&Hacek;":"ˇ","&Hat;":"^","&Hcirc;":"Ĥ","&Hfr;":"ℌ","&HilbertSpace;":"ℋ","&Hopf;":"ℍ","&HorizontalLine;":"─","&Hscr;":"ℋ","&Hstrok;":"Ħ","&HumpDownHump;":"≎","&HumpEqual;":"≏","&IEcy;":"Е","&IJlig;":"Ĳ","&IOcy;":"Ё","&Iacute":"Í","&Iacute;":"Í","&Icirc":"Î","&Icirc;":"Î","&Icy;":"И","&Idot;":"İ","&Ifr;":"ℑ","&Igrave":"Ì","&Igrave;":"Ì","&Im;":"ℑ","&Imacr;":"Ī","&ImaginaryI;":"ⅈ","&Implies;":"⇒","&Int;":"∬","&Integral;":"∫","&Intersection;":"⋂","&InvisibleComma;":"⁣","&InvisibleTimes;":"⁢","&Iogon;":"Į","&Iopf;":"𝕀","&Iota;":"Ι","&Iscr;":"ℐ","&Itilde;":"Ĩ","&Iukcy;":"І","&Iuml":"Ï","&Iuml;":"Ï","&Jcirc;":"Ĵ","&Jcy;":"Й","&Jfr;":"𝔍","&Jopf;":"𝕁","&Jscr;":"𝒥","&Jsercy;":"Ј","&Jukcy;":"Є","&KHcy;":"Х","&KJcy;":"Ќ","&Kappa;":"Κ","&Kcedil;":"Ķ","&Kcy;":"К","&Kfr;":"𝔎","&Kopf;":"𝕂","&Kscr;":"𝒦","&LJcy;":"Љ","&LT":"<","&LT;":"<","&Lacute;":"Ĺ","&Lambda;":"Λ","&Lang;":"⟪","&Laplacetrf;":"ℒ","&Larr;":"↞","&Lcaron;":"Ľ","&Lcedil;":"Ļ","&Lcy;":"Л","&LeftAngleBracket;":"⟨","&LeftArrow;":"←","&LeftArrowBar;":"⇤","&LeftArrowRightArrow;":"⇆","&LeftCeiling;":"⌈","&LeftDoubleBracket;":"⟦","&LeftDownTeeVector;":"⥡","&LeftDownVector;":"⇃","&LeftDownVectorBar;":"⥙","&LeftFloor;":"⌊","&LeftRightArrow;":"↔","&LeftRightVector;":"⥎","&LeftTee;":"⊣","&LeftTeeArrow;":"↤","&LeftTeeVector;":"⥚","&LeftTriangle;":"⊲","&LeftTriangleBar;":"⧏","&LeftTriangleEqual;":"⊴","&LeftUpDownVector;":"⥑","&LeftUpTeeVector;":"⥠","&LeftUpVector;":"↿","&LeftUpVectorBar;":"⥘","&LeftVector;":"↼","&LeftVectorBar;":"⥒","&Leftarrow;":"⇐","&Leftrightarrow;":"⇔","&LessEqualGreater;":"⋚","&LessFullEqual;":"≦","&LessGreater;":"≶","&LessLess;":"⪡","&LessSlantEqual;":"⩽","&LessTilde;":"≲","&Lfr;":"𝔏","&Ll;":"⋘","&Lleftarrow;":"⇚","&Lmidot;":"Ŀ","&LongLeftArrow;":"⟵","&LongLeftRightArrow;":"⟷","&LongRightArrow;":"⟶","&Longleftarrow;":"⟸","&Longleftrightarrow;":"⟺","&Longrightarrow;":"⟹","&Lopf;":"𝕃","&LowerLeftArrow;":"↙","&LowerRightArrow;":"↘","&Lscr;":"ℒ","&Lsh;":"↰","&Lstrok;":"Ł","&Lt;":"≪","&Map;":"⤅","&Mcy;":"М","&MediumSpace;":" ","&Mellintrf;":"ℳ","&Mfr;":"𝔐","&MinusPlus;":"∓","&Mopf;":"𝕄","&Mscr;":"ℳ","&Mu;":"Μ","&NJcy;":"Њ","&Nacute;":"Ń","&Ncaron;":"Ň","&Ncedil;":"Ņ","&Ncy;":"Н","&NegativeMediumSpace;":"​","&NegativeThickSpace;":"​","&NegativeThinSpace;":"​","&NegativeVeryThinSpace;":"​","&NestedGreaterGreater;":"≫","&NestedLessLess;":"≪","&NewLine;":"\n","&Nfr;":"𝔑","&NoBreak;":"⁠","&NonBreakingSpace;":" ","&Nopf;":"ℕ","&Not;":"⫬","&NotCongruent;":"≢","&NotCupCap;":"≭","&NotDoubleVerticalBar;":"∦","&NotElement;":"∉","&NotEqual;":"≠","&NotEqualTilde;":"≂̸","&NotExists;":"∄","&NotGreater;":"≯","&NotGreaterEqual;":"≱","&NotGreaterFullEqual;":"≧̸","&NotGreaterGreater;":"≫̸","&NotGreaterLess;":"≹","&NotGreaterSlantEqual;":"⩾̸","&NotGreaterTilde;":"≵","&NotHumpDownHump;":"≎̸","&NotHumpEqual;":"≏̸","&NotLeftTriangle;":"⋪","&NotLeftTriangleBar;":"⧏̸","&NotLeftTriangleEqual;":"⋬","&NotLess;":"≮","&NotLessEqual;":"≰","&NotLessGreater;":"≸","&NotLessLess;":"≪̸","&NotLessSlantEqual;":"⩽̸","&NotLessTilde;":"≴","&NotNestedGreaterGreater;":"⪢̸","&NotNestedLessLess;":"⪡̸","&NotPrecedes;":"⊀","&NotPrecedesEqual;":"⪯̸","&NotPrecedesSlantEqual;":"⋠","&NotReverseElement;":"∌","&NotRightTriangle;":"⋫","&NotRightTriangleBar;":"⧐̸","&NotRightTriangleEqual;":"⋭","&NotSquareSubset;":"⊏̸","&NotSquareSubsetEqual;":"⋢","&NotSquareSuperset;":"⊐̸","&NotSquareSupersetEqual;":"⋣","&NotSubset;":"⊂⃒","&NotSubsetEqual;":"⊈","&NotSucceeds;":"⊁","&NotSucceedsEqual;":"⪰̸","&NotSucceedsSlantEqual;":"⋡","&NotSucceedsTilde;":"≿̸","&NotSuperset;":"⊃⃒","&NotSupersetEqual;":"⊉","&NotTilde;":"≁","&NotTildeEqual;":"≄","&NotTildeFullEqual;":"≇","&NotTildeTilde;":"≉","&NotVerticalBar;":"∤","&Nscr;":"𝒩","&Ntilde":"Ñ","&Ntilde;":"Ñ","&Nu;":"Ν","&OElig;":"Œ","&Oacute":"Ó","&Oacute;":"Ó","&Ocirc":"Ô","&Ocirc;":"Ô","&Ocy;":"О","&Odblac;":"Ő","&Ofr;":"𝔒","&Ograve":"Ò","&Ograve;":"Ò","&Omacr;":"Ō","&Omega;":"Ω","&Omicron;":"Ο","&Oopf;":"𝕆","&OpenCurlyDoubleQuote;":"“","&OpenCurlyQuote;":"‘","&Or;":"⩔","&Oscr;":"𝒪","&Oslash":"Ø","&Oslash;":"Ø","&Otilde":"Õ","&Otilde;":"Õ","&Otimes;":"⨷","&Ouml":"Ö","&Ouml;":"Ö","&OverBar;":"‾","&OverBrace;":"⏞","&OverBracket;":"⎴","&OverParenthesis;":"⏜","&PartialD;":"∂","&Pcy;":"П","&Pfr;":"𝔓","&Phi;":"Φ","&Pi;":"Π","&PlusMinus;":"±","&Poincareplane;":"ℌ","&Popf;":"ℙ","&Pr;":"⪻","&Precedes;":"≺","&PrecedesEqual;":"⪯","&PrecedesSlantEqual;":"≼","&PrecedesTilde;":"≾","&Prime;":"″","&Product;":"∏","&Proportion;":"∷","&Proportional;":"∝","&Pscr;":"𝒫","&Psi;":"Ψ","&QUOT":'"',"&QUOT;":'"',"&Qfr;":"𝔔","&Qopf;":"ℚ","&Qscr;":"𝒬","&RBarr;":"⤐","&REG":"®","&REG;":"®","&Racute;":"Ŕ","&Rang;":"⟫","&Rarr;":"↠","&Rarrtl;":"⤖","&Rcaron;":"Ř","&Rcedil;":"Ŗ","&Rcy;":"Р","&Re;":"ℜ","&ReverseElement;":"∋","&ReverseEquilibrium;":"⇋","&ReverseUpEquilibrium;":"⥯","&Rfr;":"ℜ","&Rho;":"Ρ","&RightAngleBracket;":"⟩","&RightArrow;":"→","&RightArrowBar;":"⇥","&RightArrowLeftArrow;":"⇄","&RightCeiling;":"⌉","&RightDoubleBracket;":"⟧","&RightDownTeeVector;":"⥝","&RightDownVector;":"⇂","&RightDownVectorBar;":"⥕","&RightFloor;":"⌋","&RightTee;":"⊢","&RightTeeArrow;":"↦","&RightTeeVector;":"⥛","&RightTriangle;":"⊳","&RightTriangleBar;":"⧐","&RightTriangleEqual;":"⊵","&RightUpDownVector;":"⥏","&RightUpTeeVector;":"⥜","&RightUpVector;":"↾","&RightUpVectorBar;":"⥔","&RightVector;":"⇀","&RightVectorBar;":"⥓","&Rightarrow;":"⇒","&Ropf;":"ℝ","&RoundImplies;":"⥰","&Rrightarrow;":"⇛","&Rscr;":"ℛ","&Rsh;":"↱","&RuleDelayed;":"⧴","&SHCHcy;":"Щ","&SHcy;":"Ш","&SOFTcy;":"Ь","&Sacute;":"Ś","&Sc;":"⪼","&Scaron;":"Š","&Scedil;":"Ş","&Scirc;":"Ŝ","&Scy;":"С","&Sfr;":"𝔖","&ShortDownArrow;":"↓","&ShortLeftArrow;":"←","&ShortRightArrow;":"→","&ShortUpArrow;":"↑","&Sigma;":"Σ","&SmallCircle;":"∘","&Sopf;":"𝕊","&Sqrt;":"√","&Square;":"□","&SquareIntersection;":"⊓","&SquareSubset;":"⊏","&SquareSubsetEqual;":"⊑","&SquareSuperset;":"⊐","&SquareSupersetEqual;":"⊒","&SquareUnion;":"⊔","&Sscr;":"𝒮","&Star;":"⋆","&Sub;":"⋐","&Subset;":"⋐","&SubsetEqual;":"⊆","&Succeeds;":"≻","&SucceedsEqual;":"⪰","&SucceedsSlantEqual;":"≽","&SucceedsTilde;":"≿","&SuchThat;":"∋","&Sum;":"∑","&Sup;":"⋑","&Superset;":"⊃","&SupersetEqual;":"⊇","&Supset;":"⋑","&THORN":"Þ","&THORN;":"Þ","&TRADE;":"™","&TSHcy;":"Ћ","&TScy;":"Ц","&Tab;":"\t","&Tau;":"Τ","&Tcaron;":"Ť","&Tcedil;":"Ţ","&Tcy;":"Т","&Tfr;":"𝔗","&Therefore;":"∴","&Theta;":"Θ","&ThickSpace;":"  ","&ThinSpace;":" ","&Tilde;":"∼","&TildeEqual;":"≃","&TildeFullEqual;":"≅","&TildeTilde;":"≈","&Topf;":"𝕋","&TripleDot;":"⃛","&Tscr;":"𝒯","&Tstrok;":"Ŧ","&Uacute":"Ú","&Uacute;":"Ú","&Uarr;":"↟","&Uarrocir;":"⥉","&Ubrcy;":"Ў","&Ubreve;":"Ŭ","&Ucirc":"Û","&Ucirc;":"Û","&Ucy;":"У","&Udblac;":"Ű","&Ufr;":"𝔘","&Ugrave":"Ù","&Ugrave;":"Ù","&Umacr;":"Ū","&UnderBar;":"_","&UnderBrace;":"⏟","&UnderBracket;":"⎵","&UnderParenthesis;":"⏝","&Union;":"⋃","&UnionPlus;":"⊎","&Uogon;":"Ų","&Uopf;":"𝕌","&UpArrow;":"↑","&UpArrowBar;":"⤒","&UpArrowDownArrow;":"⇅","&UpDownArrow;":"↕","&UpEquilibrium;":"⥮","&UpTee;":"⊥","&UpTeeArrow;":"↥","&Uparrow;":"⇑","&Updownarrow;":"⇕","&UpperLeftArrow;":"↖","&UpperRightArrow;":"↗","&Upsi;":"ϒ","&Upsilon;":"Υ","&Uring;":"Ů","&Uscr;":"𝒰","&Utilde;":"Ũ","&Uuml":"Ü","&Uuml;":"Ü","&VDash;":"⊫","&Vbar;":"⫫","&Vcy;":"В","&Vdash;":"⊩","&Vdashl;":"⫦","&Vee;":"⋁","&Verbar;":"‖","&Vert;":"‖","&VerticalBar;":"∣","&VerticalLine;":"|","&VerticalSeparator;":"❘","&VerticalTilde;":"≀","&VeryThinSpace;":" ","&Vfr;":"𝔙","&Vopf;":"𝕍","&Vscr;":"𝒱","&Vvdash;":"⊪","&Wcirc;":"Ŵ","&Wedge;":"⋀","&Wfr;":"𝔚","&Wopf;":"𝕎","&Wscr;":"𝒲","&Xfr;":"𝔛","&Xi;":"Ξ","&Xopf;":"𝕏","&Xscr;":"𝒳","&YAcy;":"Я","&YIcy;":"Ї","&YUcy;":"Ю","&Yacute":"Ý","&Yacute;":"Ý","&Ycirc;":"Ŷ","&Ycy;":"Ы","&Yfr;":"𝔜","&Yopf;":"𝕐","&Yscr;":"𝒴","&Yuml;":"Ÿ","&ZHcy;":"Ж","&Zacute;":"Ź","&Zcaron;":"Ž","&Zcy;":"З","&Zdot;":"Ż","&ZeroWidthSpace;":"​","&Zeta;":"Ζ","&Zfr;":"ℨ","&Zopf;":"ℤ","&Zscr;":"𝒵","&aacute":"á","&aacute;":"á","&abreve;":"ă","&ac;":"∾","&acE;":"∾̳","&acd;":"∿","&acirc":"â","&acirc;":"â","&acute":"´","&acute;":"´","&acy;":"а","&aelig":"æ","&aelig;":"æ","&af;":"⁡","&afr;":"𝔞","&agrave":"à","&agrave;":"à","&alefsym;":"ℵ","&aleph;":"ℵ","&alpha;":"α","&amacr;":"ā","&amalg;":"⨿","&amp":"&","&amp;":"&","&and;":"∧","&andand;":"⩕","&andd;":"⩜","&andslope;":"⩘","&andv;":"⩚","&ang;":"∠","&ange;":"⦤","&angle;":"∠","&angmsd;":"∡","&angmsdaa;":"⦨","&angmsdab;":"⦩","&angmsdac;":"⦪","&angmsdad;":"⦫","&angmsdae;":"⦬","&angmsdaf;":"⦭","&angmsdag;":"⦮","&angmsdah;":"⦯","&angrt;":"∟","&angrtvb;":"⊾","&angrtvbd;":"⦝","&angsph;":"∢","&angst;":"Å","&angzarr;":"⍼","&aogon;":"ą","&aopf;":"𝕒","&ap;":"≈","&apE;":"⩰","&apacir;":"⩯","&ape;":"≊","&apid;":"≋","&apos;":"'","&approx;":"≈","&approxeq;":"≊","&aring":"å","&aring;":"å","&ascr;":"𝒶","&ast;":"*","&asymp;":"≈","&asympeq;":"≍","&atilde":"ã","&atilde;":"ã","&auml":"ä","&auml;":"ä","&awconint;":"∳","&awint;":"⨑","&bNot;":"⫭","&backcong;":"≌","&backepsilon;":"϶","&backprime;":"‵","&backsim;":"∽","&backsimeq;":"⋍","&barvee;":"⊽","&barwed;":"⌅","&barwedge;":"⌅","&bbrk;":"⎵","&bbrktbrk;":"⎶","&bcong;":"≌","&bcy;":"б","&bdquo;":"„","&becaus;":"∵","&because;":"∵","&bemptyv;":"⦰","&bepsi;":"϶","&bernou;":"ℬ","&beta;":"β","&beth;":"ℶ","&between;":"≬","&bfr;":"𝔟","&bigcap;":"⋂","&bigcirc;":"◯","&bigcup;":"⋃","&bigodot;":"⨀","&bigoplus;":"⨁","&bigotimes;":"⨂","&bigsqcup;":"⨆","&bigstar;":"★","&bigtriangledown;":"▽","&bigtriangleup;":"△","&biguplus;":"⨄","&bigvee;":"⋁","&bigwedge;":"⋀","&bkarow;":"⤍","&blacklozenge;":"⧫","&blacksquare;":"▪","&blacktriangle;":"▴","&blacktriangledown;":"▾","&blacktriangleleft;":"◂","&blacktriangleright;":"▸","&blank;":"␣","&blk12;":"▒","&blk14;":"░","&blk34;":"▓","&block;":"█","&bne;":"=⃥","&bnequiv;":"≡⃥","&bnot;":"⌐","&bopf;":"𝕓","&bot;":"⊥","&bottom;":"⊥","&bowtie;":"⋈","&boxDL;":"╗","&boxDR;":"╔","&boxDl;":"╖","&boxDr;":"╓","&boxH;":"═","&boxHD;":"╦","&boxHU;":"╩","&boxHd;":"╤","&boxHu;":"╧","&boxUL;":"╝","&boxUR;":"╚","&boxUl;":"╜","&boxUr;":"╙","&boxV;":"║","&boxVH;":"╬","&boxVL;":"╣","&boxVR;":"╠","&boxVh;":"╫","&boxVl;":"╢","&boxVr;":"╟","&boxbox;":"⧉","&boxdL;":"╕","&boxdR;":"╒","&boxdl;":"┐","&boxdr;":"┌","&boxh;":"─","&boxhD;":"╥","&boxhU;":"╨","&boxhd;":"┬","&boxhu;":"┴","&boxminus;":"⊟","&boxplus;":"⊞","&boxtimes;":"⊠","&boxuL;":"╛","&boxuR;":"╘","&boxul;":"┘","&boxur;":"└","&boxv;":"│","&boxvH;":"╪","&boxvL;":"╡","&boxvR;":"╞","&boxvh;":"┼","&boxvl;":"┤","&boxvr;":"├","&bprime;":"‵","&breve;":"˘","&brvbar":"¦","&brvbar;":"¦","&bscr;":"𝒷","&bsemi;":"⁏","&bsim;":"∽","&bsime;":"⋍","&bsol;":"\\","&bsolb;":"⧅","&bsolhsub;":"⟈","&bull;":"•","&bullet;":"•","&bump;":"≎","&bumpE;":"⪮","&bumpe;":"≏","&bumpeq;":"≏","&cacute;":"ć","&cap;":"∩","&capand;":"⩄","&capbrcup;":"⩉","&capcap;":"⩋","&capcup;":"⩇","&capdot;":"⩀","&caps;":"∩︀","&caret;":"⁁","&caron;":"ˇ","&ccaps;":"⩍","&ccaron;":"č","&ccedil":"ç","&ccedil;":"ç","&ccirc;":"ĉ","&ccups;":"⩌","&ccupssm;":"⩐","&cdot;":"ċ","&cedil":"¸","&cedil;":"¸","&cemptyv;":"⦲","&cent":"¢","&cent;":"¢","&centerdot;":"·","&cfr;":"𝔠","&chcy;":"ч","&check;":"✓","&checkmark;":"✓","&chi;":"χ","&cir;":"○","&cirE;":"⧃","&circ;":"ˆ","&circeq;":"≗","&circlearrowleft;":"↺","&circlearrowright;":"↻","&circledR;":"®","&circledS;":"Ⓢ","&circledast;":"⊛","&circledcirc;":"⊚","&circleddash;":"⊝","&cire;":"≗","&cirfnint;":"⨐","&cirmid;":"⫯","&cirscir;":"⧂","&clubs;":"♣","&clubsuit;":"♣","&colon;":":","&colone;":"≔","&coloneq;":"≔","&comma;":",","&commat;":"@","&comp;":"∁","&compfn;":"∘","&complement;":"∁","&complexes;":"ℂ","&cong;":"≅","&congdot;":"⩭","&conint;":"∮","&copf;":"𝕔","&coprod;":"∐","&copy":"©","&copy;":"©","&copysr;":"℗","&crarr;":"↵","&cross;":"✗","&cscr;":"𝒸","&csub;":"⫏","&csube;":"⫑","&csup;":"⫐","&csupe;":"⫒","&ctdot;":"⋯","&cudarrl;":"⤸","&cudarrr;":"⤵","&cuepr;":"⋞","&cuesc;":"⋟","&cularr;":"↶","&cularrp;":"⤽","&cup;":"∪","&cupbrcap;":"⩈","&cupcap;":"⩆","&cupcup;":"⩊","&cupdot;":"⊍","&cupor;":"⩅","&cups;":"∪︀","&curarr;":"↷","&curarrm;":"⤼","&curlyeqprec;":"⋞","&curlyeqsucc;":"⋟","&curlyvee;":"⋎","&curlywedge;":"⋏","&curren":"¤","&curren;":"¤","&curvearrowleft;":"↶","&curvearrowright;":"↷","&cuvee;":"⋎","&cuwed;":"⋏","&cwconint;":"∲","&cwint;":"∱","&cylcty;":"⌭","&dArr;":"⇓","&dHar;":"⥥","&dagger;":"†","&daleth;":"ℸ","&darr;":"↓","&dash;":"‐","&dashv;":"⊣","&dbkarow;":"⤏","&dblac;":"˝","&dcaron;":"ď","&dcy;":"д","&dd;":"ⅆ","&ddagger;":"‡","&ddarr;":"⇊","&ddotseq;":"⩷","&deg":"°","&deg;":"°","&delta;":"δ","&demptyv;":"⦱","&dfisht;":"⥿","&dfr;":"𝔡","&dharl;":"⇃","&dharr;":"⇂","&diam;":"⋄","&diamond;":"⋄","&diamondsuit;":"♦","&diams;":"♦","&die;":"¨","&digamma;":"ϝ","&disin;":"⋲","&div;":"÷","&divide":"÷","&divide;":"÷","&divideontimes;":"⋇","&divonx;":"⋇","&djcy;":"ђ","&dlcorn;":"⌞","&dlcrop;":"⌍","&dollar;":"$","&dopf;":"𝕕","&dot;":"˙","&doteq;":"≐","&doteqdot;":"≑","&dotminus;":"∸","&dotplus;":"∔","&dotsquare;":"⊡","&doublebarwedge;":"⌆","&downarrow;":"↓","&downdownarrows;":"⇊","&downharpoonleft;":"⇃","&downharpoonright;":"⇂","&drbkarow;":"⤐","&drcorn;":"⌟","&drcrop;":"⌌","&dscr;":"𝒹","&dscy;":"ѕ","&dsol;":"⧶","&dstrok;":"đ","&dtdot;":"⋱","&dtri;":"▿","&dtrif;":"▾","&duarr;":"⇵","&duhar;":"⥯","&dwangle;":"⦦","&dzcy;":"џ","&dzigrarr;":"⟿","&eDDot;":"⩷","&eDot;":"≑","&eacute":"é","&eacute;":"é","&easter;":"⩮","&ecaron;":"ě","&ecir;":"≖","&ecirc":"ê","&ecirc;":"ê","&ecolon;":"≕","&ecy;":"э","&edot;":"ė","&ee;":"ⅇ","&efDot;":"≒","&efr;":"𝔢","&eg;":"⪚","&egrave":"è","&egrave;":"è","&egs;":"⪖","&egsdot;":"⪘","&el;":"⪙","&elinters;":"⏧","&ell;":"ℓ","&els;":"⪕","&elsdot;":"⪗","&emacr;":"ē","&empty;":"∅","&emptyset;":"∅","&emptyv;":"∅","&emsp13;":" ","&emsp14;":" ","&emsp;":" ","&eng;":"ŋ","&ensp;":" ","&eogon;":"ę","&eopf;":"𝕖","&epar;":"⋕","&eparsl;":"⧣","&eplus;":"⩱","&epsi;":"ε","&epsilon;":"ε","&epsiv;":"ϵ","&eqcirc;":"≖","&eqcolon;":"≕","&eqsim;":"≂","&eqslantgtr;":"⪖","&eqslantless;":"⪕","&equals;":"=","&equest;":"≟","&equiv;":"≡","&equivDD;":"⩸","&eqvparsl;":"⧥","&erDot;":"≓","&erarr;":"⥱","&escr;":"ℯ","&esdot;":"≐","&esim;":"≂","&eta;":"η","&eth":"ð","&eth;":"ð","&euml":"ë","&euml;":"ë","&euro;":"€","&excl;":"!","&exist;":"∃","&expectation;":"ℰ","&exponentiale;":"ⅇ","&fallingdotseq;":"≒","&fcy;":"ф","&female;":"♀","&ffilig;":"ﬃ","&fflig;":"ﬀ","&ffllig;":"ﬄ","&ffr;":"𝔣","&filig;":"ﬁ","&fjlig;":"fj","&flat;":"♭","&fllig;":"ﬂ","&fltns;":"▱","&fnof;":"ƒ","&fopf;":"𝕗","&forall;":"∀","&fork;":"⋔","&forkv;":"⫙","&fpartint;":"⨍","&frac12":"½","&frac12;":"½","&frac13;":"⅓","&frac14":"¼","&frac14;":"¼","&frac15;":"⅕","&frac16;":"⅙","&frac18;":"⅛","&frac23;":"⅔","&frac25;":"⅖","&frac34":"¾","&frac34;":"¾","&frac35;":"⅗","&frac38;":"⅜","&frac45;":"⅘","&frac56;":"⅚","&frac58;":"⅝","&frac78;":"⅞","&frasl;":"⁄","&frown;":"⌢","&fscr;":"𝒻","&gE;":"≧","&gEl;":"⪌","&gacute;":"ǵ","&gamma;":"γ","&gammad;":"ϝ","&gap;":"⪆","&gbreve;":"ğ","&gcirc;":"ĝ","&gcy;":"г","&gdot;":"ġ","&ge;":"≥","&gel;":"⋛","&geq;":"≥","&geqq;":"≧","&geqslant;":"⩾","&ges;":"⩾","&gescc;":"⪩","&gesdot;":"⪀","&gesdoto;":"⪂","&gesdotol;":"⪄","&gesl;":"⋛︀","&gesles;":"⪔","&gfr;":"𝔤","&gg;":"≫","&ggg;":"⋙","&gimel;":"ℷ","&gjcy;":"ѓ","&gl;":"≷","&glE;":"⪒","&gla;":"⪥","&glj;":"⪤","&gnE;":"≩","&gnap;":"⪊","&gnapprox;":"⪊","&gne;":"⪈","&gneq;":"⪈","&gneqq;":"≩","&gnsim;":"⋧","&gopf;":"𝕘","&grave;":"`","&gscr;":"ℊ","&gsim;":"≳","&gsime;":"⪎","&gsiml;":"⪐","&gt":">","&gt;":">","&gtcc;":"⪧","&gtcir;":"⩺","&gtdot;":"⋗","&gtlPar;":"⦕","&gtquest;":"⩼","&gtrapprox;":"⪆","&gtrarr;":"⥸","&gtrdot;":"⋗","&gtreqless;":"⋛","&gtreqqless;":"⪌","&gtrless;":"≷","&gtrsim;":"≳","&gvertneqq;":"≩︀","&gvnE;":"≩︀","&hArr;":"⇔","&hairsp;":" ","&half;":"½","&hamilt;":"ℋ","&hardcy;":"ъ","&harr;":"↔","&harrcir;":"⥈","&harrw;":"↭","&hbar;":"ℏ","&hcirc;":"ĥ","&hearts;":"♥","&heartsuit;":"♥","&hellip;":"…","&hercon;":"⊹","&hfr;":"𝔥","&hksearow;":"⤥","&hkswarow;":"⤦","&hoarr;":"⇿","&homtht;":"∻","&hookleftarrow;":"↩","&hookrightarrow;":"↪","&hopf;":"𝕙","&horbar;":"―","&hscr;":"𝒽","&hslash;":"ℏ","&hstrok;":"ħ","&hybull;":"⁃","&hyphen;":"‐","&iacute":"í","&iacute;":"í","&ic;":"⁣","&icirc":"î","&icirc;":"î","&icy;":"и","&iecy;":"е","&iexcl":"¡","&iexcl;":"¡","&iff;":"⇔","&ifr;":"𝔦","&igrave":"ì","&igrave;":"ì","&ii;":"ⅈ","&iiiint;":"⨌","&iiint;":"∭","&iinfin;":"⧜","&iiota;":"℩","&ijlig;":"ĳ","&imacr;":"ī","&image;":"ℑ","&imagline;":"ℐ","&imagpart;":"ℑ","&imath;":"ı","&imof;":"⊷","&imped;":"Ƶ","&in;":"∈","&incare;":"℅","&infin;":"∞","&infintie;":"⧝","&inodot;":"ı","&int;":"∫","&intcal;":"⊺","&integers;":"ℤ","&intercal;":"⊺","&intlarhk;":"⨗","&intprod;":"⨼","&iocy;":"ё","&iogon;":"į","&iopf;":"𝕚","&iota;":"ι","&iprod;":"⨼","&iquest":"¿","&iquest;":"¿","&iscr;":"𝒾","&isin;":"∈","&isinE;":"⋹","&isindot;":"⋵","&isins;":"⋴","&isinsv;":"⋳","&isinv;":"∈","&it;":"⁢","&itilde;":"ĩ","&iukcy;":"і","&iuml":"ï","&iuml;":"ï","&jcirc;":"ĵ","&jcy;":"й","&jfr;":"𝔧","&jmath;":"ȷ","&jopf;":"𝕛","&jscr;":"𝒿","&jsercy;":"ј","&jukcy;":"є","&kappa;":"κ","&kappav;":"ϰ","&kcedil;":"ķ","&kcy;":"к","&kfr;":"𝔨","&kgreen;":"ĸ","&khcy;":"х","&kjcy;":"ќ","&kopf;":"𝕜","&kscr;":"𝓀","&lAarr;":"⇚","&lArr;":"⇐","&lAtail;":"⤛","&lBarr;":"⤎","&lE;":"≦","&lEg;":"⪋","&lHar;":"⥢","&lacute;":"ĺ","&laemptyv;":"⦴","&lagran;":"ℒ","&lambda;":"λ","&lang;":"⟨","&langd;":"⦑","&langle;":"⟨","&lap;":"⪅","&laquo":"«","&laquo;":"«","&larr;":"←","&larrb;":"⇤","&larrbfs;":"⤟","&larrfs;":"⤝","&larrhk;":"↩","&larrlp;":"↫","&larrpl;":"⤹","&larrsim;":"⥳","&larrtl;":"↢","&lat;":"⪫","&latail;":"⤙","&late;":"⪭","&lates;":"⪭︀","&lbarr;":"⤌","&lbbrk;":"❲","&lbrace;":"{","&lbrack;":"[","&lbrke;":"⦋","&lbrksld;":"⦏","&lbrkslu;":"⦍","&lcaron;":"ľ","&lcedil;":"ļ","&lceil;":"⌈","&lcub;":"{","&lcy;":"л","&ldca;":"⤶","&ldquo;":"“","&ldquor;":"„","&ldrdhar;":"⥧","&ldrushar;":"⥋","&ldsh;":"↲","&le;":"≤","&leftarrow;":"←","&leftarrowtail;":"↢","&leftharpoondown;":"↽","&leftharpoonup;":"↼","&leftleftarrows;":"⇇","&leftrightarrow;":"↔","&leftrightarrows;":"⇆","&leftrightharpoons;":"⇋","&leftrightsquigarrow;":"↭","&leftthreetimes;":"⋋","&leg;":"⋚","&leq;":"≤","&leqq;":"≦","&leqslant;":"⩽","&les;":"⩽","&lescc;":"⪨","&lesdot;":"⩿","&lesdoto;":"⪁","&lesdotor;":"⪃","&lesg;":"⋚︀","&lesges;":"⪓","&lessapprox;":"⪅","&lessdot;":"⋖","&lesseqgtr;":"⋚","&lesseqqgtr;":"⪋","&lessgtr;":"≶","&lesssim;":"≲","&lfisht;":"⥼","&lfloor;":"⌊","&lfr;":"𝔩","&lg;":"≶","&lgE;":"⪑","&lhard;":"↽","&lharu;":"↼","&lharul;":"⥪","&lhblk;":"▄","&ljcy;":"љ","&ll;":"≪","&llarr;":"⇇","&llcorner;":"⌞","&llhard;":"⥫","&lltri;":"◺","&lmidot;":"ŀ","&lmoust;":"⎰","&lmoustache;":"⎰","&lnE;":"≨","&lnap;":"⪉","&lnapprox;":"⪉","&lne;":"⪇","&lneq;":"⪇","&lneqq;":"≨","&lnsim;":"⋦","&loang;":"⟬","&loarr;":"⇽","&lobrk;":"⟦","&longleftarrow;":"⟵","&longleftrightarrow;":"⟷","&longmapsto;":"⟼","&longrightarrow;":"⟶","&looparrowleft;":"↫","&looparrowright;":"↬","&lopar;":"⦅","&lopf;":"𝕝","&loplus;":"⨭","&lotimes;":"⨴","&lowast;":"∗","&lowbar;":"_","&loz;":"◊","&lozenge;":"◊","&lozf;":"⧫","&lpar;":"(","&lparlt;":"⦓","&lrarr;":"⇆","&lrcorner;":"⌟","&lrhar;":"⇋","&lrhard;":"⥭","&lrm;":"‎","&lrtri;":"⊿","&lsaquo;":"‹","&lscr;":"𝓁","&lsh;":"↰","&lsim;":"≲","&lsime;":"⪍","&lsimg;":"⪏","&lsqb;":"[","&lsquo;":"‘","&lsquor;":"‚","&lstrok;":"ł","&lt":"<","&lt;":"<","&ltcc;":"⪦","&ltcir;":"⩹","&ltdot;":"⋖","&lthree;":"⋋","&ltimes;":"⋉","&ltlarr;":"⥶","&ltquest;":"⩻","&ltrPar;":"⦖","&ltri;":"◃","&ltrie;":"⊴","&ltrif;":"◂","&lurdshar;":"⥊","&luruhar;":"⥦","&lvertneqq;":"≨︀","&lvnE;":"≨︀","&mDDot;":"∺","&macr":"¯","&macr;":"¯","&male;":"♂","&malt;":"✠","&maltese;":"✠","&map;":"↦","&mapsto;":"↦","&mapstodown;":"↧","&mapstoleft;":"↤","&mapstoup;":"↥","&marker;":"▮","&mcomma;":"⨩","&mcy;":"м","&mdash;":"—","&measuredangle;":"∡","&mfr;":"𝔪","&mho;":"℧","&micro":"µ","&micro;":"µ","&mid;":"∣","&midast;":"*","&midcir;":"⫰","&middot":"·","&middot;":"·","&minus;":"−","&minusb;":"⊟","&minusd;":"∸","&minusdu;":"⨪","&mlcp;":"⫛","&mldr;":"…","&mnplus;":"∓","&models;":"⊧","&mopf;":"𝕞","&mp;":"∓","&mscr;":"𝓂","&mstpos;":"∾","&mu;":"μ","&multimap;":"⊸","&mumap;":"⊸","&nGg;":"⋙̸","&nGt;":"≫⃒","&nGtv;":"≫̸","&nLeftarrow;":"⇍","&nLeftrightarrow;":"⇎","&nLl;":"⋘̸","&nLt;":"≪⃒","&nLtv;":"≪̸","&nRightarrow;":"⇏","&nVDash;":"⊯","&nVdash;":"⊮","&nabla;":"∇","&nacute;":"ń","&nang;":"∠⃒","&nap;":"≉","&napE;":"⩰̸","&napid;":"≋̸","&napos;":"ŉ","&napprox;":"≉","&natur;":"♮","&natural;":"♮","&naturals;":"ℕ","&nbsp":" ","&nbsp;":" ","&nbump;":"≎̸","&nbumpe;":"≏̸","&ncap;":"⩃","&ncaron;":"ň","&ncedil;":"ņ","&ncong;":"≇","&ncongdot;":"⩭̸","&ncup;":"⩂","&ncy;":"н","&ndash;":"–","&ne;":"≠","&neArr;":"⇗","&nearhk;":"⤤","&nearr;":"↗","&nearrow;":"↗","&nedot;":"≐̸","&nequiv;":"≢","&nesear;":"⤨","&nesim;":"≂̸","&nexist;":"∄","&nexists;":"∄","&nfr;":"𝔫","&ngE;":"≧̸","&nge;":"≱","&ngeq;":"≱","&ngeqq;":"≧̸","&ngeqslant;":"⩾̸","&nges;":"⩾̸","&ngsim;":"≵","&ngt;":"≯","&ngtr;":"≯","&nhArr;":"⇎","&nharr;":"↮","&nhpar;":"⫲","&ni;":"∋","&nis;":"⋼","&nisd;":"⋺","&niv;":"∋","&njcy;":"њ","&nlArr;":"⇍","&nlE;":"≦̸","&nlarr;":"↚","&nldr;":"‥","&nle;":"≰","&nleftarrow;":"↚","&nleftrightarrow;":"↮","&nleq;":"≰","&nleqq;":"≦̸","&nleqslant;":"⩽̸","&nles;":"⩽̸","&nless;":"≮","&nlsim;":"≴","&nlt;":"≮","&nltri;":"⋪","&nltrie;":"⋬","&nmid;":"∤","&nopf;":"𝕟","&not":"¬","&not;":"¬","&notin;":"∉","&notinE;":"⋹̸","&notindot;":"⋵̸","&notinva;":"∉","&notinvb;":"⋷","&notinvc;":"⋶","&notni;":"∌","&notniva;":"∌","&notnivb;":"⋾","&notnivc;":"⋽","&npar;":"∦","&nparallel;":"∦","&nparsl;":"⫽⃥","&npart;":"∂̸","&npolint;":"⨔","&npr;":"⊀","&nprcue;":"⋠","&npre;":"⪯̸","&nprec;":"⊀","&npreceq;":"⪯̸","&nrArr;":"⇏","&nrarr;":"↛","&nrarrc;":"⤳̸","&nrarrw;":"↝̸","&nrightarrow;":"↛","&nrtri;":"⋫","&nrtrie;":"⋭","&nsc;":"⊁","&nsccue;":"⋡","&nsce;":"⪰̸","&nscr;":"𝓃","&nshortmid;":"∤","&nshortparallel;":"∦","&nsim;":"≁","&nsime;":"≄","&nsimeq;":"≄","&nsmid;":"∤","&nspar;":"∦","&nsqsube;":"⋢","&nsqsupe;":"⋣","&nsub;":"⊄","&nsubE;":"⫅̸","&nsube;":"⊈","&nsubset;":"⊂⃒","&nsubseteq;":"⊈","&nsubseteqq;":"⫅̸","&nsucc;":"⊁","&nsucceq;":"⪰̸","&nsup;":"⊅","&nsupE;":"⫆̸","&nsupe;":"⊉","&nsupset;":"⊃⃒","&nsupseteq;":"⊉","&nsupseteqq;":"⫆̸","&ntgl;":"≹","&ntilde":"ñ","&ntilde;":"ñ","&ntlg;":"≸","&ntriangleleft;":"⋪","&ntrianglelefteq;":"⋬","&ntriangleright;":"⋫","&ntrianglerighteq;":"⋭","&nu;":"ν","&num;":"#","&numero;":"№","&numsp;":" ","&nvDash;":"⊭","&nvHarr;":"⤄","&nvap;":"≍⃒","&nvdash;":"⊬","&nvge;":"≥⃒","&nvgt;":">⃒","&nvinfin;":"⧞","&nvlArr;":"⤂","&nvle;":"≤⃒","&nvlt;":"<⃒","&nvltrie;":"⊴⃒","&nvrArr;":"⤃","&nvrtrie;":"⊵⃒","&nvsim;":"∼⃒","&nwArr;":"⇖","&nwarhk;":"⤣","&nwarr;":"↖","&nwarrow;":"↖","&nwnear;":"⤧","&oS;":"Ⓢ","&oacute":"ó","&oacute;":"ó","&oast;":"⊛","&ocir;":"⊚","&ocirc":"ô","&ocirc;":"ô","&ocy;":"о","&odash;":"⊝","&odblac;":"ő","&odiv;":"⨸","&odot;":"⊙","&odsold;":"⦼","&oelig;":"œ","&ofcir;":"⦿","&ofr;":"𝔬","&ogon;":"˛","&ograve":"ò","&ograve;":"ò","&ogt;":"⧁","&ohbar;":"⦵","&ohm;":"Ω","&oint;":"∮","&olarr;":"↺","&olcir;":"⦾","&olcross;":"⦻","&oline;":"‾","&olt;":"⧀","&omacr;":"ō","&omega;":"ω","&omicron;":"ο","&omid;":"⦶","&ominus;":"⊖","&oopf;":"𝕠","&opar;":"⦷","&operp;":"⦹","&oplus;":"⊕","&or;":"∨","&orarr;":"↻","&ord;":"⩝","&order;":"ℴ","&orderof;":"ℴ","&ordf":"ª","&ordf;":"ª","&ordm":"º","&ordm;":"º","&origof;":"⊶","&oror;":"⩖","&orslope;":"⩗","&orv;":"⩛","&oscr;":"ℴ","&oslash":"ø","&oslash;":"ø","&osol;":"⊘","&otilde":"õ","&otilde;":"õ","&otimes;":"⊗","&otimesas;":"⨶","&ouml":"ö","&ouml;":"ö","&ovbar;":"⌽","&par;":"∥","&para":"¶","&para;":"¶","&parallel;":"∥","&parsim;":"⫳","&parsl;":"⫽","&part;":"∂","&pcy;":"п","&percnt;":"%","&period;":".","&permil;":"‰","&perp;":"⊥","&pertenk;":"‱","&pfr;":"𝔭","&phi;":"φ","&phiv;":"ϕ","&phmmat;":"ℳ","&phone;":"☎","&pi;":"π","&pitchfork;":"⋔","&piv;":"ϖ","&planck;":"ℏ","&planckh;":"ℎ","&plankv;":"ℏ","&plus;":"+","&plusacir;":"⨣","&plusb;":"⊞","&pluscir;":"⨢","&plusdo;":"∔","&plusdu;":"⨥","&pluse;":"⩲","&plusmn":"±","&plusmn;":"±","&plussim;":"⨦","&plustwo;":"⨧","&pm;":"±","&pointint;":"⨕","&popf;":"𝕡","&pound":"£","&pound;":"£","&pr;":"≺","&prE;":"⪳","&prap;":"⪷","&prcue;":"≼","&pre;":"⪯","&prec;":"≺","&precapprox;":"⪷","&preccurlyeq;":"≼","&preceq;":"⪯","&precnapprox;":"⪹","&precneqq;":"⪵","&precnsim;":"⋨","&precsim;":"≾","&prime;":"′","&primes;":"ℙ","&prnE;":"⪵","&prnap;":"⪹","&prnsim;":"⋨","&prod;":"∏","&profalar;":"⌮","&profline;":"⌒","&profsurf;":"⌓","&prop;":"∝","&propto;":"∝","&prsim;":"≾","&prurel;":"⊰","&pscr;":"𝓅","&psi;":"ψ","&puncsp;":" ","&qfr;":"𝔮","&qint;":"⨌","&qopf;":"𝕢","&qprime;":"⁗","&qscr;":"𝓆","&quaternions;":"ℍ","&quatint;":"⨖","&quest;":"?","&questeq;":"≟","&quot":'"',"&quot;":'"',"&rAarr;":"⇛","&rArr;":"⇒","&rAtail;":"⤜","&rBarr;":"⤏","&rHar;":"⥤","&race;":"∽̱","&racute;":"ŕ","&radic;":"√","&raemptyv;":"⦳","&rang;":"⟩","&rangd;":"⦒","&range;":"⦥","&rangle;":"⟩","&raquo":"»","&raquo;":"»","&rarr;":"→","&rarrap;":"⥵","&rarrb;":"⇥","&rarrbfs;":"⤠","&rarrc;":"⤳","&rarrfs;":"⤞","&rarrhk;":"↪","&rarrlp;":"↬","&rarrpl;":"⥅","&rarrsim;":"⥴","&rarrtl;":"↣","&rarrw;":"↝","&ratail;":"⤚","&ratio;":"∶","&rationals;":"ℚ","&rbarr;":"⤍","&rbbrk;":"❳","&rbrace;":"}","&rbrack;":"]","&rbrke;":"⦌","&rbrksld;":"⦎","&rbrkslu;":"⦐","&rcaron;":"ř","&rcedil;":"ŗ","&rceil;":"⌉","&rcub;":"}","&rcy;":"р","&rdca;":"⤷","&rdldhar;":"⥩","&rdquo;":"”","&rdquor;":"”","&rdsh;":"↳","&real;":"ℜ","&realine;":"ℛ","&realpart;":"ℜ","&reals;":"ℝ","&rect;":"▭","&reg":"®","&reg;":"®","&rfisht;":"⥽","&rfloor;":"⌋","&rfr;":"𝔯","&rhard;":"⇁","&rharu;":"⇀","&rharul;":"⥬","&rho;":"ρ","&rhov;":"ϱ","&rightarrow;":"→","&rightarrowtail;":"↣","&rightharpoondown;":"⇁","&rightharpoonup;":"⇀","&rightleftarrows;":"⇄","&rightleftharpoons;":"⇌","&rightrightarrows;":"⇉","&rightsquigarrow;":"↝","&rightthreetimes;":"⋌","&ring;":"˚","&risingdotseq;":"≓","&rlarr;":"⇄","&rlhar;":"⇌","&rlm;":"‏","&rmoust;":"⎱","&rmoustache;":"⎱","&rnmid;":"⫮","&roang;":"⟭","&roarr;":"⇾","&robrk;":"⟧","&ropar;":"⦆","&ropf;":"𝕣","&roplus;":"⨮","&rotimes;":"⨵","&rpar;":")","&rpargt;":"⦔","&rppolint;":"⨒","&rrarr;":"⇉","&rsaquo;":"›","&rscr;":"𝓇","&rsh;":"↱","&rsqb;":"]","&rsquo;":"’","&rsquor;":"’","&rthree;":"⋌","&rtimes;":"⋊","&rtri;":"▹","&rtrie;":"⊵","&rtrif;":"▸","&rtriltri;":"⧎","&ruluhar;":"⥨","&rx;":"℞","&sacute;":"ś","&sbquo;":"‚","&sc;":"≻","&scE;":"⪴","&scap;":"⪸","&scaron;":"š","&sccue;":"≽","&sce;":"⪰","&scedil;":"ş","&scirc;":"ŝ","&scnE;":"⪶","&scnap;":"⪺","&scnsim;":"⋩","&scpolint;":"⨓","&scsim;":"≿","&scy;":"с","&sdot;":"⋅","&sdotb;":"⊡","&sdote;":"⩦","&seArr;":"⇘","&searhk;":"⤥","&searr;":"↘","&searrow;":"↘","&sect":"§","&sect;":"§","&semi;":";","&seswar;":"⤩","&setminus;":"∖","&setmn;":"∖","&sext;":"✶","&sfr;":"𝔰","&sfrown;":"⌢","&sharp;":"♯","&shchcy;":"щ","&shcy;":"ш","&shortmid;":"∣","&shortparallel;":"∥","&shy":"­","&shy;":"­","&sigma;":"σ","&sigmaf;":"ς","&sigmav;":"ς","&sim;":"∼","&simdot;":"⩪","&sime;":"≃","&simeq;":"≃","&simg;":"⪞","&simgE;":"⪠","&siml;":"⪝","&simlE;":"⪟","&simne;":"≆","&simplus;":"⨤","&simrarr;":"⥲","&slarr;":"←","&smallsetminus;":"∖","&smashp;":"⨳","&smeparsl;":"⧤","&smid;":"∣","&smile;":"⌣","&smt;":"⪪","&smte;":"⪬","&smtes;":"⪬︀","&softcy;":"ь","&sol;":"/","&solb;":"⧄","&solbar;":"⌿","&sopf;":"𝕤","&spades;":"♠","&spadesuit;":"♠","&spar;":"∥","&sqcap;":"⊓","&sqcaps;":"⊓︀","&sqcup;":"⊔","&sqcups;":"⊔︀","&sqsub;":"⊏","&sqsube;":"⊑","&sqsubset;":"⊏","&sqsubseteq;":"⊑","&sqsup;":"⊐","&sqsupe;":"⊒","&sqsupset;":"⊐","&sqsupseteq;":"⊒","&squ;":"□","&square;":"□","&squarf;":"▪","&squf;":"▪","&srarr;":"→","&sscr;":"𝓈","&ssetmn;":"∖","&ssmile;":"⌣","&sstarf;":"⋆","&star;":"☆","&starf;":"★","&straightepsilon;":"ϵ","&straightphi;":"ϕ","&strns;":"¯","&sub;":"⊂","&subE;":"⫅","&subdot;":"⪽","&sube;":"⊆","&subedot;":"⫃","&submult;":"⫁","&subnE;":"⫋","&subne;":"⊊","&subplus;":"⪿","&subrarr;":"⥹","&subset;":"⊂","&subseteq;":"⊆","&subseteqq;":"⫅","&subsetneq;":"⊊","&subsetneqq;":"⫋","&subsim;":"⫇","&subsub;":"⫕","&subsup;":"⫓","&succ;":"≻","&succapprox;":"⪸","&succcurlyeq;":"≽","&succeq;":"⪰","&succnapprox;":"⪺","&succneqq;":"⪶","&succnsim;":"⋩","&succsim;":"≿","&sum;":"∑","&sung;":"♪","&sup1":"¹","&sup1;":"¹","&sup2":"²","&sup2;":"²","&sup3":"³","&sup3;":"³","&sup;":"⊃","&supE;":"⫆","&supdot;":"⪾","&supdsub;":"⫘","&supe;":"⊇","&supedot;":"⫄","&suphsol;":"⟉","&suphsub;":"⫗","&suplarr;":"⥻","&supmult;":"⫂","&supnE;":"⫌","&supne;":"⊋","&supplus;":"⫀","&supset;":"⊃","&supseteq;":"⊇","&supseteqq;":"⫆","&supsetneq;":"⊋","&supsetneqq;":"⫌","&supsim;":"⫈","&supsub;":"⫔","&supsup;":"⫖","&swArr;":"⇙","&swarhk;":"⤦","&swarr;":"↙","&swarrow;":"↙","&swnwar;":"⤪","&szlig":"ß","&szlig;":"ß","&target;":"⌖","&tau;":"τ","&tbrk;":"⎴","&tcaron;":"ť","&tcedil;":"ţ","&tcy;":"т","&tdot;":"⃛","&telrec;":"⌕","&tfr;":"𝔱","&there4;":"∴","&therefore;":"∴","&theta;":"θ","&thetasym;":"ϑ","&thetav;":"ϑ","&thickapprox;":"≈","&thicksim;":"∼","&thinsp;":" ","&thkap;":"≈","&thksim;":"∼","&thorn":"þ","&thorn;":"þ","&tilde;":"˜","&times":"×","&times;":"×","&timesb;":"⊠","&timesbar;":"⨱","&timesd;":"⨰","&tint;":"∭","&toea;":"⤨","&top;":"⊤","&topbot;":"⌶","&topcir;":"⫱","&topf;":"𝕥","&topfork;":"⫚","&tosa;":"⤩","&tprime;":"‴","&trade;":"™","&triangle;":"▵","&triangledown;":"▿","&triangleleft;":"◃","&trianglelefteq;":"⊴","&triangleq;":"≜","&triangleright;":"▹","&trianglerighteq;":"⊵","&tridot;":"◬","&trie;":"≜","&triminus;":"⨺","&triplus;":"⨹","&trisb;":"⧍","&tritime;":"⨻","&trpezium;":"⏢","&tscr;":"𝓉","&tscy;":"ц","&tshcy;":"ћ","&tstrok;":"ŧ","&twixt;":"≬","&twoheadleftarrow;":"↞","&twoheadrightarrow;":"↠","&uArr;":"⇑","&uHar;":"⥣","&uacute":"ú","&uacute;":"ú","&uarr;":"↑","&ubrcy;":"ў","&ubreve;":"ŭ","&ucirc":"û","&ucirc;":"û","&ucy;":"у","&udarr;":"⇅","&udblac;":"ű","&udhar;":"⥮","&ufisht;":"⥾","&ufr;":"𝔲","&ugrave":"ù","&ugrave;":"ù","&uharl;":"↿","&uharr;":"↾","&uhblk;":"▀","&ulcorn;":"⌜","&ulcorner;":"⌜","&ulcrop;":"⌏","&ultri;":"◸","&umacr;":"ū","&uml":"¨","&uml;":"¨","&uogon;":"ų","&uopf;":"𝕦","&uparrow;":"↑","&updownarrow;":"↕","&upharpoonleft;":"↿","&upharpoonright;":"↾","&uplus;":"⊎","&upsi;":"υ","&upsih;":"ϒ","&upsilon;":"υ","&upuparrows;":"⇈","&urcorn;":"⌝","&urcorner;":"⌝","&urcrop;":"⌎","&uring;":"ů","&urtri;":"◹","&uscr;":"𝓊","&utdot;":"⋰","&utilde;":"ũ","&utri;":"▵","&utrif;":"▴","&uuarr;":"⇈","&uuml":"ü","&uuml;":"ü","&uwangle;":"⦧","&vArr;":"⇕","&vBar;":"⫨","&vBarv;":"⫩","&vDash;":"⊨","&vangrt;":"⦜","&varepsilon;":"ϵ","&varkappa;":"ϰ","&varnothing;":"∅","&varphi;":"ϕ","&varpi;":"ϖ","&varpropto;":"∝","&varr;":"↕","&varrho;":"ϱ","&varsigma;":"ς","&varsubsetneq;":"⊊︀","&varsubsetneqq;":"⫋︀","&varsupsetneq;":"⊋︀","&varsupsetneqq;":"⫌︀","&vartheta;":"ϑ","&vartriangleleft;":"⊲","&vartriangleright;":"⊳","&vcy;":"в","&vdash;":"⊢","&vee;":"∨","&veebar;":"⊻","&veeeq;":"≚","&vellip;":"⋮","&verbar;":"|","&vert;":"|","&vfr;":"𝔳","&vltri;":"⊲","&vnsub;":"⊂⃒","&vnsup;":"⊃⃒","&vopf;":"𝕧","&vprop;":"∝","&vrtri;":"⊳","&vscr;":"𝓋","&vsubnE;":"⫋︀","&vsubne;":"⊊︀","&vsupnE;":"⫌︀","&vsupne;":"⊋︀","&vzigzag;":"⦚","&wcirc;":"ŵ","&wedbar;":"⩟","&wedge;":"∧","&wedgeq;":"≙","&weierp;":"℘","&wfr;":"𝔴","&wopf;":"𝕨","&wp;":"℘","&wr;":"≀","&wreath;":"≀","&wscr;":"𝓌","&xcap;":"⋂","&xcirc;":"◯","&xcup;":"⋃","&xdtri;":"▽","&xfr;":"𝔵","&xhArr;":"⟺","&xharr;":"⟷","&xi;":"ξ","&xlArr;":"⟸","&xlarr;":"⟵","&xmap;":"⟼","&xnis;":"⋻","&xodot;":"⨀","&xopf;":"𝕩","&xoplus;":"⨁","&xotime;":"⨂","&xrArr;":"⟹","&xrarr;":"⟶","&xscr;":"𝓍","&xsqcup;":"⨆","&xuplus;":"⨄","&xutri;":"△","&xvee;":"⋁","&xwedge;":"⋀","&yacute":"ý","&yacute;":"ý","&yacy;":"я","&ycirc;":"ŷ","&ycy;":"ы","&yen":"¥","&yen;":"¥","&yfr;":"𝔶","&yicy;":"ї","&yopf;":"𝕪","&yscr;":"𝓎","&yucy;":"ю","&yuml":"ÿ","&yuml;":"ÿ","&zacute;":"ź","&zcaron;":"ž","&zcy;":"з","&zdot;":"ż","&zeetrf;":"ℨ","&zeta;":"ζ","&zfr;":"𝔷","&zhcy;":"ж","&zigrarr;":"⇝","&zopf;":"𝕫","&zscr;":"𝓏","&zwj;":"‍","&zwnj;":"‌"},characters:{"Æ":"&AElig;","&":"&amp;","Á":"&Aacute;","Ă":"&Abreve;","Â":"&Acirc;","А":"&Acy;","𝔄":"&Afr;","À":"&Agrave;","Α":"&Alpha;","Ā":"&Amacr;","⩓":"&And;","Ą":"&Aogon;","𝔸":"&Aopf;","⁡":"&af;","Å":"&angst;","𝒜":"&Ascr;","≔":"&coloneq;","Ã":"&Atilde;","Ä":"&Auml;","∖":"&ssetmn;","⫧":"&Barv;","⌆":"&doublebarwedge;","Б":"&Bcy;","∵":"&because;","ℬ":"&bernou;","Β":"&Beta;","𝔅":"&Bfr;","𝔹":"&Bopf;","˘":"&breve;","≎":"&bump;","Ч":"&CHcy;","©":"&copy;","Ć":"&Cacute;","⋒":"&Cap;","ⅅ":"&DD;","ℭ":"&Cfr;","Č":"&Ccaron;","Ç":"&Ccedil;","Ĉ":"&Ccirc;","∰":"&Cconint;","Ċ":"&Cdot;","¸":"&cedil;","·":"&middot;","Χ":"&Chi;","⊙":"&odot;","⊖":"&ominus;","⊕":"&oplus;","⊗":"&otimes;","∲":"&cwconint;","”":"&rdquor;","’":"&rsquor;","∷":"&Proportion;","⩴":"&Colone;","≡":"&equiv;","∯":"&DoubleContourIntegral;","∮":"&oint;","ℂ":"&complexes;","∐":"&coprod;","∳":"&awconint;","⨯":"&Cross;","𝒞":"&Cscr;","⋓":"&Cup;","≍":"&asympeq;","⤑":"&DDotrahd;","Ђ":"&DJcy;","Ѕ":"&DScy;","Џ":"&DZcy;","‡":"&ddagger;","↡":"&Darr;","⫤":"&DoubleLeftTee;","Ď":"&Dcaron;","Д":"&Dcy;","∇":"&nabla;","Δ":"&Delta;","𝔇":"&Dfr;","´":"&acute;","˙":"&dot;","˝":"&dblac;","`":"&grave;","˜":"&tilde;","⋄":"&diamond;","ⅆ":"&dd;","𝔻":"&Dopf;","¨":"&uml;","⃜":"&DotDot;","≐":"&esdot;","⇓":"&dArr;","⇐":"&lArr;","⇔":"&iff;","⟸":"&xlArr;","⟺":"&xhArr;","⟹":"&xrArr;","⇒":"&rArr;","⊨":"&vDash;","⇑":"&uArr;","⇕":"&vArr;","∥":"&spar;","↓":"&downarrow;","⤓":"&DownArrowBar;","⇵":"&duarr;","̑":"&DownBreve;","⥐":"&DownLeftRightVector;","⥞":"&DownLeftTeeVector;","↽":"&lhard;","⥖":"&DownLeftVectorBar;","⥟":"&DownRightTeeVector;","⇁":"&rightharpoondown;","⥗":"&DownRightVectorBar;","⊤":"&top;","↧":"&mapstodown;","𝒟":"&Dscr;","Đ":"&Dstrok;","Ŋ":"&ENG;","Ð":"&ETH;","É":"&Eacute;","Ě":"&Ecaron;","Ê":"&Ecirc;","Э":"&Ecy;","Ė":"&Edot;","𝔈":"&Efr;","È":"&Egrave;","∈":"&isinv;","Ē":"&Emacr;","◻":"&EmptySmallSquare;","▫":"&EmptyVerySmallSquare;","Ę":"&Eogon;","𝔼":"&Eopf;","Ε":"&Epsilon;","⩵":"&Equal;","≂":"&esim;","⇌":"&rlhar;","ℰ":"&expectation;","⩳":"&Esim;","Η":"&Eta;","Ë":"&Euml;","∃":"&exist;","ⅇ":"&exponentiale;","Ф":"&Fcy;","𝔉":"&Ffr;","◼":"&FilledSmallSquare;","▪":"&squf;","𝔽":"&Fopf;","∀":"&forall;","ℱ":"&Fscr;","Ѓ":"&GJcy;",">":"&gt;","Γ":"&Gamma;","Ϝ":"&Gammad;","Ğ":"&Gbreve;","Ģ":"&Gcedil;","Ĝ":"&Gcirc;","Г":"&Gcy;","Ġ":"&Gdot;","𝔊":"&Gfr;","⋙":"&ggg;","𝔾":"&Gopf;","≥":"&geq;","⋛":"&gtreqless;","≧":"&geqq;","⪢":"&GreaterGreater;","≷":"&gtrless;","⩾":"&ges;","≳":"&gtrsim;","𝒢":"&Gscr;","≫":"&gg;","Ъ":"&HARDcy;","ˇ":"&caron;","^":"&Hat;","Ĥ":"&Hcirc;","ℌ":"&Poincareplane;","ℋ":"&hamilt;","ℍ":"&quaternions;","─":"&boxh;","Ħ":"&Hstrok;","≏":"&bumpeq;","Е":"&IEcy;","Ĳ":"&IJlig;","Ё":"&IOcy;","Í":"&Iacute;","Î":"&Icirc;","И":"&Icy;","İ":"&Idot;","ℑ":"&imagpart;","Ì":"&Igrave;","Ī":"&Imacr;","ⅈ":"&ii;","∬":"&Int;","∫":"&int;","⋂":"&xcap;","⁣":"&ic;","⁢":"&it;","Į":"&Iogon;","𝕀":"&Iopf;","Ι":"&Iota;","ℐ":"&imagline;","Ĩ":"&Itilde;","І":"&Iukcy;","Ï":"&Iuml;","Ĵ":"&Jcirc;","Й":"&Jcy;","𝔍":"&Jfr;","𝕁":"&Jopf;","𝒥":"&Jscr;","Ј":"&Jsercy;","Є":"&Jukcy;","Х":"&KHcy;","Ќ":"&KJcy;","Κ":"&Kappa;","Ķ":"&Kcedil;","К":"&Kcy;","𝔎":"&Kfr;","𝕂":"&Kopf;","𝒦":"&Kscr;","Љ":"&LJcy;","<":"&lt;","Ĺ":"&Lacute;","Λ":"&Lambda;","⟪":"&Lang;","ℒ":"&lagran;","↞":"&twoheadleftarrow;","Ľ":"&Lcaron;","Ļ":"&Lcedil;","Л":"&Lcy;","⟨":"&langle;","←":"&slarr;","⇤":"&larrb;","⇆":"&lrarr;","⌈":"&lceil;","⟦":"&lobrk;","⥡":"&LeftDownTeeVector;","⇃":"&downharpoonleft;","⥙":"&LeftDownVectorBar;","⌊":"&lfloor;","↔":"&leftrightarrow;","⥎":"&LeftRightVector;","⊣":"&dashv;","↤":"&mapstoleft;","⥚":"&LeftTeeVector;","⊲":"&vltri;","⧏":"&LeftTriangleBar;","⊴":"&trianglelefteq;","⥑":"&LeftUpDownVector;","⥠":"&LeftUpTeeVector;","↿":"&upharpoonleft;","⥘":"&LeftUpVectorBar;","↼":"&lharu;","⥒":"&LeftVectorBar;","⋚":"&lesseqgtr;","≦":"&leqq;","≶":"&lg;","⪡":"&LessLess;","⩽":"&les;","≲":"&lsim;","𝔏":"&Lfr;","⋘":"&Ll;","⇚":"&lAarr;","Ŀ":"&Lmidot;","⟵":"&xlarr;","⟷":"&xharr;","⟶":"&xrarr;","𝕃":"&Lopf;","↙":"&swarrow;","↘":"&searrow;","↰":"&lsh;","Ł":"&Lstrok;","≪":"&ll;","⤅":"&Map;","М":"&Mcy;"," ":"&MediumSpace;","ℳ":"&phmmat;","𝔐":"&Mfr;","∓":"&mp;","𝕄":"&Mopf;","Μ":"&Mu;","Њ":"&NJcy;","Ń":"&Nacute;","Ň":"&Ncaron;","Ņ":"&Ncedil;","Н":"&Ncy;","​":"&ZeroWidthSpace;","\n":"&NewLine;","𝔑":"&Nfr;","⁠":"&NoBreak;"," ":"&nbsp;","ℕ":"&naturals;","⫬":"&Not;","≢":"&nequiv;","≭":"&NotCupCap;","∦":"&nspar;","∉":"&notinva;","≠":"&ne;","≂̸":"&nesim;","∄":"&nexists;","≯":"&ngtr;","≱":"&ngeq;","≧̸":"&ngeqq;","≫̸":"&nGtv;","≹":"&ntgl;","⩾̸":"&nges;","≵":"&ngsim;","≎̸":"&nbump;","≏̸":"&nbumpe;","⋪":"&ntriangleleft;","⧏̸":"&NotLeftTriangleBar;","⋬":"&ntrianglelefteq;","≮":"&nlt;","≰":"&nleq;","≸":"&ntlg;","≪̸":"&nLtv;","⩽̸":"&nles;","≴":"&nlsim;","⪢̸":"&NotNestedGreaterGreater;","⪡̸":"&NotNestedLessLess;","⊀":"&nprec;","⪯̸":"&npreceq;","⋠":"&nprcue;","∌":"&notniva;","⋫":"&ntriangleright;","⧐̸":"&NotRightTriangleBar;","⋭":"&ntrianglerighteq;","⊏̸":"&NotSquareSubset;","⋢":"&nsqsube;","⊐̸":"&NotSquareSuperset;","⋣":"&nsqsupe;","⊂⃒":"&vnsub;","⊈":"&nsubseteq;","⊁":"&nsucc;","⪰̸":"&nsucceq;","⋡":"&nsccue;","≿̸":"&NotSucceedsTilde;","⊃⃒":"&vnsup;","⊉":"&nsupseteq;","≁":"&nsim;","≄":"&nsimeq;","≇":"&ncong;","≉":"&napprox;","∤":"&nsmid;","𝒩":"&Nscr;","Ñ":"&Ntilde;","Ν":"&Nu;","Œ":"&OElig;","Ó":"&Oacute;","Ô":"&Ocirc;","О":"&Ocy;","Ő":"&Odblac;","𝔒":"&Ofr;","Ò":"&Ograve;","Ō":"&Omacr;","Ω":"&ohm;","Ο":"&Omicron;","𝕆":"&Oopf;","“":"&ldquo;","‘":"&lsquo;","⩔":"&Or;","𝒪":"&Oscr;","Ø":"&Oslash;","Õ":"&Otilde;","⨷":"&Otimes;","Ö":"&Ouml;","‾":"&oline;","⏞":"&OverBrace;","⎴":"&tbrk;","⏜":"&OverParenthesis;","∂":"&part;","П":"&Pcy;","𝔓":"&Pfr;","Φ":"&Phi;","Π":"&Pi;","±":"&pm;","ℙ":"&primes;","⪻":"&Pr;","≺":"&prec;","⪯":"&preceq;","≼":"&preccurlyeq;","≾":"&prsim;","″":"&Prime;","∏":"&prod;","∝":"&vprop;","𝒫":"&Pscr;","Ψ":"&Psi;",'"':"&quot;","𝔔":"&Qfr;","ℚ":"&rationals;","𝒬":"&Qscr;","⤐":"&drbkarow;","®":"&reg;","Ŕ":"&Racute;","⟫":"&Rang;","↠":"&twoheadrightarrow;","⤖":"&Rarrtl;","Ř":"&Rcaron;","Ŗ":"&Rcedil;","Р":"&Rcy;","ℜ":"&realpart;","∋":"&niv;","⇋":"&lrhar;","⥯":"&duhar;","Ρ":"&Rho;","⟩":"&rangle;","→":"&srarr;","⇥":"&rarrb;","⇄":"&rlarr;","⌉":"&rceil;","⟧":"&robrk;","⥝":"&RightDownTeeVector;","⇂":"&downharpoonright;","⥕":"&RightDownVectorBar;","⌋":"&rfloor;","⊢":"&vdash;","↦":"&mapsto;","⥛":"&RightTeeVector;","⊳":"&vrtri;","⧐":"&RightTriangleBar;","⊵":"&trianglerighteq;","⥏":"&RightUpDownVector;","⥜":"&RightUpTeeVector;","↾":"&upharpoonright;","⥔":"&RightUpVectorBar;","⇀":"&rightharpoonup;","⥓":"&RightVectorBar;","ℝ":"&reals;","⥰":"&RoundImplies;","⇛":"&rAarr;","ℛ":"&realine;","↱":"&rsh;","⧴":"&RuleDelayed;","Щ":"&SHCHcy;","Ш":"&SHcy;","Ь":"&SOFTcy;","Ś":"&Sacute;","⪼":"&Sc;","Š":"&Scaron;","Ş":"&Scedil;","Ŝ":"&Scirc;","С":"&Scy;","𝔖":"&Sfr;","↑":"&uparrow;","Σ":"&Sigma;","∘":"&compfn;","𝕊":"&Sopf;","√":"&radic;","□":"&square;","⊓":"&sqcap;","⊏":"&sqsubset;","⊑":"&sqsubseteq;","⊐":"&sqsupset;","⊒":"&sqsupseteq;","⊔":"&sqcup;","𝒮":"&Sscr;","⋆":"&sstarf;","⋐":"&Subset;","⊆":"&subseteq;","≻":"&succ;","⪰":"&succeq;","≽":"&succcurlyeq;","≿":"&succsim;","∑":"&sum;","⋑":"&Supset;","⊃":"&supset;","⊇":"&supseteq;","Þ":"&THORN;","™":"&trade;","Ћ":"&TSHcy;","Ц":"&TScy;","\t":"&Tab;","Τ":"&Tau;","Ť":"&Tcaron;","Ţ":"&Tcedil;","Т":"&Tcy;","𝔗":"&Tfr;","∴":"&therefore;","Θ":"&Theta;","  ":"&ThickSpace;"," ":"&thinsp;","∼":"&thksim;","≃":"&simeq;","≅":"&cong;","≈":"&thkap;","𝕋":"&Topf;","⃛":"&tdot;","𝒯":"&Tscr;","Ŧ":"&Tstrok;","Ú":"&Uacute;","↟":"&Uarr;","⥉":"&Uarrocir;","Ў":"&Ubrcy;","Ŭ":"&Ubreve;","Û":"&Ucirc;","У":"&Ucy;","Ű":"&Udblac;","𝔘":"&Ufr;","Ù":"&Ugrave;","Ū":"&Umacr;",_:"&lowbar;","⏟":"&UnderBrace;","⎵":"&bbrk;","⏝":"&UnderParenthesis;","⋃":"&xcup;","⊎":"&uplus;","Ų":"&Uogon;","𝕌":"&Uopf;","⤒":"&UpArrowBar;","⇅":"&udarr;","↕":"&varr;","⥮":"&udhar;","⊥":"&perp;","↥":"&mapstoup;","↖":"&nwarrow;","↗":"&nearrow;","ϒ":"&upsih;","Υ":"&Upsilon;","Ů":"&Uring;","𝒰":"&Uscr;","Ũ":"&Utilde;","Ü":"&Uuml;","⊫":"&VDash;","⫫":"&Vbar;","В":"&Vcy;","⊩":"&Vdash;","⫦":"&Vdashl;","⋁":"&xvee;","‖":"&Vert;","∣":"&smid;","|":"&vert;","❘":"&VerticalSeparator;","≀":"&wreath;"," ":"&hairsp;","𝔙":"&Vfr;","𝕍":"&Vopf;","𝒱":"&Vscr;","⊪":"&Vvdash;","Ŵ":"&Wcirc;","⋀":"&xwedge;","𝔚":"&Wfr;","𝕎":"&Wopf;","𝒲":"&Wscr;","𝔛":"&Xfr;","Ξ":"&Xi;","𝕏":"&Xopf;","𝒳":"&Xscr;","Я":"&YAcy;","Ї":"&YIcy;","Ю":"&YUcy;","Ý":"&Yacute;","Ŷ":"&Ycirc;","Ы":"&Ycy;","𝔜":"&Yfr;","𝕐":"&Yopf;","𝒴":"&Yscr;","Ÿ":"&Yuml;","Ж":"&ZHcy;","Ź":"&Zacute;","Ž":"&Zcaron;","З":"&Zcy;","Ż":"&Zdot;","Ζ":"&Zeta;","ℨ":"&zeetrf;","ℤ":"&integers;","𝒵":"&Zscr;","á":"&aacute;","ă":"&abreve;","∾":"&mstpos;","∾̳":"&acE;","∿":"&acd;","â":"&acirc;","а":"&acy;","æ":"&aelig;","𝔞":"&afr;","à":"&agrave;","ℵ":"&aleph;","α":"&alpha;","ā":"&amacr;","⨿":"&amalg;","∧":"&wedge;","⩕":"&andand;","⩜":"&andd;","⩘":"&andslope;","⩚":"&andv;","∠":"&angle;","⦤":"&ange;","∡":"&measuredangle;","⦨":"&angmsdaa;","⦩":"&angmsdab;","⦪":"&angmsdac;","⦫":"&angmsdad;","⦬":"&angmsdae;","⦭":"&angmsdaf;","⦮":"&angmsdag;","⦯":"&angmsdah;","∟":"&angrt;","⊾":"&angrtvb;","⦝":"&angrtvbd;","∢":"&angsph;","⍼":"&angzarr;","ą":"&aogon;","𝕒":"&aopf;","⩰":"&apE;","⩯":"&apacir;","≊":"&approxeq;","≋":"&apid;","'":"&apos;","å":"&aring;","𝒶":"&ascr;","*":"&midast;","ã":"&atilde;","ä":"&auml;","⨑":"&awint;","⫭":"&bNot;","≌":"&bcong;","϶":"&bepsi;","‵":"&bprime;","∽":"&bsim;","⋍":"&bsime;","⊽":"&barvee;","⌅":"&barwedge;","⎶":"&bbrktbrk;","б":"&bcy;","„":"&ldquor;","⦰":"&bemptyv;","β":"&beta;","ℶ":"&beth;","≬":"&twixt;","𝔟":"&bfr;","◯":"&xcirc;","⨀":"&xodot;","⨁":"&xoplus;","⨂":"&xotime;","⨆":"&xsqcup;","★":"&starf;","▽":"&xdtri;","△":"&xutri;","⨄":"&xuplus;","⤍":"&rbarr;","⧫":"&lozf;","▴":"&utrif;","▾":"&dtrif;","◂":"&ltrif;","▸":"&rtrif;","␣":"&blank;","▒":"&blk12;","░":"&blk14;","▓":"&blk34;","█":"&block;","=⃥":"&bne;","≡⃥":"&bnequiv;","⌐":"&bnot;","𝕓":"&bopf;","⋈":"&bowtie;","╗":"&boxDL;","╔":"&boxDR;","╖":"&boxDl;","╓":"&boxDr;","═":"&boxH;","╦":"&boxHD;","╩":"&boxHU;","╤":"&boxHd;","╧":"&boxHu;","╝":"&boxUL;","╚":"&boxUR;","╜":"&boxUl;","╙":"&boxUr;","║":"&boxV;","╬":"&boxVH;","╣":"&boxVL;","╠":"&boxVR;","╫":"&boxVh;","╢":"&boxVl;","╟":"&boxVr;","⧉":"&boxbox;","╕":"&boxdL;","╒":"&boxdR;","┐":"&boxdl;","┌":"&boxdr;","╥":"&boxhD;","╨":"&boxhU;","┬":"&boxhd;","┴":"&boxhu;","⊟":"&minusb;","⊞":"&plusb;","⊠":"&timesb;","╛":"&boxuL;","╘":"&boxuR;","┘":"&boxul;","└":"&boxur;","│":"&boxv;","╪":"&boxvH;","╡":"&boxvL;","╞":"&boxvR;","┼":"&boxvh;","┤":"&boxvl;","├":"&boxvr;","¦":"&brvbar;","𝒷":"&bscr;","⁏":"&bsemi;","\\":"&bsol;","⧅":"&bsolb;","⟈":"&bsolhsub;","•":"&bullet;","⪮":"&bumpE;","ć":"&cacute;","∩":"&cap;","⩄":"&capand;","⩉":"&capbrcup;","⩋":"&capcap;","⩇":"&capcup;","⩀":"&capdot;","∩︀":"&caps;","⁁":"&caret;","⩍":"&ccaps;","č":"&ccaron;","ç":"&ccedil;","ĉ":"&ccirc;","⩌":"&ccups;","⩐":"&ccupssm;","ċ":"&cdot;","⦲":"&cemptyv;","¢":"&cent;","𝔠":"&cfr;","ч":"&chcy;","✓":"&checkmark;","χ":"&chi;","○":"&cir;","⧃":"&cirE;","ˆ":"&circ;","≗":"&cire;","↺":"&olarr;","↻":"&orarr;","Ⓢ":"&oS;","⊛":"&oast;","⊚":"&ocir;","⊝":"&odash;","⨐":"&cirfnint;","⫯":"&cirmid;","⧂":"&cirscir;","♣":"&clubsuit;",":":"&colon;",",":"&comma;","@":"&commat;","∁":"&complement;","⩭":"&congdot;","𝕔":"&copf;","℗":"&copysr;","↵":"&crarr;","✗":"&cross;","𝒸":"&cscr;","⫏":"&csub;","⫑":"&csube;","⫐":"&csup;","⫒":"&csupe;","⋯":"&ctdot;","⤸":"&cudarrl;","⤵":"&cudarrr;","⋞":"&curlyeqprec;","⋟":"&curlyeqsucc;","↶":"&curvearrowleft;","⤽":"&cularrp;","∪":"&cup;","⩈":"&cupbrcap;","⩆":"&cupcap;","⩊":"&cupcup;","⊍":"&cupdot;","⩅":"&cupor;","∪︀":"&cups;","↷":"&curvearrowright;","⤼":"&curarrm;","⋎":"&cuvee;","⋏":"&cuwed;","¤":"&curren;","∱":"&cwint;","⌭":"&cylcty;","⥥":"&dHar;","†":"&dagger;","ℸ":"&daleth;","‐":"&hyphen;","⤏":"&rBarr;","ď":"&dcaron;","д":"&dcy;","⇊":"&downdownarrows;","⩷":"&eDDot;","°":"&deg;","δ":"&delta;","⦱":"&demptyv;","⥿":"&dfisht;","𝔡":"&dfr;","♦":"&diams;","ϝ":"&gammad;","⋲":"&disin;","÷":"&divide;","⋇":"&divonx;","ђ":"&djcy;","⌞":"&llcorner;","⌍":"&dlcrop;",$:"&dollar;","𝕕":"&dopf;","≑":"&eDot;","∸":"&minusd;","∔":"&plusdo;","⊡":"&sdotb;","⌟":"&lrcorner;","⌌":"&drcrop;","𝒹":"&dscr;","ѕ":"&dscy;","⧶":"&dsol;","đ":"&dstrok;","⋱":"&dtdot;","▿":"&triangledown;","⦦":"&dwangle;","џ":"&dzcy;","⟿":"&dzigrarr;","é":"&eacute;","⩮":"&easter;","ě":"&ecaron;","≖":"&eqcirc;","ê":"&ecirc;","≕":"&eqcolon;","э":"&ecy;","ė":"&edot;","≒":"&fallingdotseq;","𝔢":"&efr;","⪚":"&eg;","è":"&egrave;","⪖":"&eqslantgtr;","⪘":"&egsdot;","⪙":"&el;","⏧":"&elinters;","ℓ":"&ell;","⪕":"&eqslantless;","⪗":"&elsdot;","ē":"&emacr;","∅":"&varnothing;"," ":"&emsp13;"," ":"&emsp14;"," ":"&emsp;","ŋ":"&eng;"," ":"&ensp;","ę":"&eogon;","𝕖":"&eopf;","⋕":"&epar;","⧣":"&eparsl;","⩱":"&eplus;","ε":"&epsilon;","ϵ":"&varepsilon;","=":"&equals;","≟":"&questeq;","⩸":"&equivDD;","⧥":"&eqvparsl;","≓":"&risingdotseq;","⥱":"&erarr;","ℯ":"&escr;","η":"&eta;","ð":"&eth;","ë":"&euml;","€":"&euro;","!":"&excl;","ф":"&fcy;","♀":"&female;","ﬃ":"&ffilig;","ﬀ":"&fflig;","ﬄ":"&ffllig;","𝔣":"&ffr;","ﬁ":"&filig;",fj:"&fjlig;","♭":"&flat;","ﬂ":"&fllig;","▱":"&fltns;","ƒ":"&fnof;","𝕗":"&fopf;","⋔":"&pitchfork;","⫙":"&forkv;","⨍":"&fpartint;","½":"&half;","⅓":"&frac13;","¼":"&frac14;","⅕":"&frac15;","⅙":"&frac16;","⅛":"&frac18;","⅔":"&frac23;","⅖":"&frac25;","¾":"&frac34;","⅗":"&frac35;","⅜":"&frac38;","⅘":"&frac45;","⅚":"&frac56;","⅝":"&frac58;","⅞":"&frac78;","⁄":"&frasl;","⌢":"&sfrown;","𝒻":"&fscr;","⪌":"&gtreqqless;","ǵ":"&gacute;","γ":"&gamma;","⪆":"&gtrapprox;","ğ":"&gbreve;","ĝ":"&gcirc;","г":"&gcy;","ġ":"&gdot;","⪩":"&gescc;","⪀":"&gesdot;","⪂":"&gesdoto;","⪄":"&gesdotol;","⋛︀":"&gesl;","⪔":"&gesles;","𝔤":"&gfr;","ℷ":"&gimel;","ѓ":"&gjcy;","⪒":"&glE;","⪥":"&gla;","⪤":"&glj;","≩":"&gneqq;","⪊":"&gnapprox;","⪈":"&gneq;","⋧":"&gnsim;","𝕘":"&gopf;","ℊ":"&gscr;","⪎":"&gsime;","⪐":"&gsiml;","⪧":"&gtcc;","⩺":"&gtcir;","⋗":"&gtrdot;","⦕":"&gtlPar;","⩼":"&gtquest;","⥸":"&gtrarr;","≩︀":"&gvnE;","ъ":"&hardcy;","⥈":"&harrcir;","↭":"&leftrightsquigarrow;","ℏ":"&plankv;","ĥ":"&hcirc;","♥":"&heartsuit;","…":"&mldr;","⊹":"&hercon;","𝔥":"&hfr;","⤥":"&searhk;","⤦":"&swarhk;","⇿":"&hoarr;","∻":"&homtht;","↩":"&larrhk;","↪":"&rarrhk;","𝕙":"&hopf;","―":"&horbar;","𝒽":"&hscr;","ħ":"&hstrok;","⁃":"&hybull;","í":"&iacute;","î":"&icirc;","и":"&icy;","е":"&iecy;","¡":"&iexcl;","𝔦":"&ifr;","ì":"&igrave;","⨌":"&qint;","∭":"&tint;","⧜":"&iinfin;","℩":"&iiota;","ĳ":"&ijlig;","ī":"&imacr;","ı":"&inodot;","⊷":"&imof;","Ƶ":"&imped;","℅":"&incare;","∞":"&infin;","⧝":"&infintie;","⊺":"&intercal;","⨗":"&intlarhk;","⨼":"&iprod;","ё":"&iocy;","į":"&iogon;","𝕚":"&iopf;","ι":"&iota;","¿":"&iquest;","𝒾":"&iscr;","⋹":"&isinE;","⋵":"&isindot;","⋴":"&isins;","⋳":"&isinsv;","ĩ":"&itilde;","і":"&iukcy;","ï":"&iuml;","ĵ":"&jcirc;","й":"&jcy;","𝔧":"&jfr;","ȷ":"&jmath;","𝕛":"&jopf;","𝒿":"&jscr;","ј":"&jsercy;","є":"&jukcy;","κ":"&kappa;","ϰ":"&varkappa;","ķ":"&kcedil;","к":"&kcy;","𝔨":"&kfr;","ĸ":"&kgreen;","х":"&khcy;","ќ":"&kjcy;","𝕜":"&kopf;","𝓀":"&kscr;","⤛":"&lAtail;","⤎":"&lBarr;","⪋":"&lesseqqgtr;","⥢":"&lHar;","ĺ":"&lacute;","⦴":"&laemptyv;","λ":"&lambda;","⦑":"&langd;","⪅":"&lessapprox;","«":"&laquo;","⤟":"&larrbfs;","⤝":"&larrfs;","↫":"&looparrowleft;","⤹":"&larrpl;","⥳":"&larrsim;","↢":"&leftarrowtail;","⪫":"&lat;","⤙":"&latail;","⪭":"&late;","⪭︀":"&lates;","⤌":"&lbarr;","❲":"&lbbrk;","{":"&lcub;","[":"&lsqb;","⦋":"&lbrke;","⦏":"&lbrksld;","⦍":"&lbrkslu;","ľ":"&lcaron;","ļ":"&lcedil;","л":"&lcy;","⤶":"&ldca;","⥧":"&ldrdhar;","⥋":"&ldrushar;","↲":"&ldsh;","≤":"&leq;","⇇":"&llarr;","⋋":"&lthree;","⪨":"&lescc;","⩿":"&lesdot;","⪁":"&lesdoto;","⪃":"&lesdotor;","⋚︀":"&lesg;","⪓":"&lesges;","⋖":"&ltdot;","⥼":"&lfisht;","𝔩":"&lfr;","⪑":"&lgE;","⥪":"&lharul;","▄":"&lhblk;","љ":"&ljcy;","⥫":"&llhard;","◺":"&lltri;","ŀ":"&lmidot;","⎰":"&lmoustache;","≨":"&lneqq;","⪉":"&lnapprox;","⪇":"&lneq;","⋦":"&lnsim;","⟬":"&loang;","⇽":"&loarr;","⟼":"&xmap;","↬":"&rarrlp;","⦅":"&lopar;","𝕝":"&lopf;","⨭":"&loplus;","⨴":"&lotimes;","∗":"&lowast;","◊":"&lozenge;","(":"&lpar;","⦓":"&lparlt;","⥭":"&lrhard;","‎":"&lrm;","⊿":"&lrtri;","‹":"&lsaquo;","𝓁":"&lscr;","⪍":"&lsime;","⪏":"&lsimg;","‚":"&sbquo;","ł":"&lstrok;","⪦":"&ltcc;","⩹":"&ltcir;","⋉":"&ltimes;","⥶":"&ltlarr;","⩻":"&ltquest;","⦖":"&ltrPar;","◃":"&triangleleft;","⥊":"&lurdshar;","⥦":"&luruhar;","≨︀":"&lvnE;","∺":"&mDDot;","¯":"&strns;","♂":"&male;","✠":"&maltese;","▮":"&marker;","⨩":"&mcomma;","м":"&mcy;","—":"&mdash;","𝔪":"&mfr;","℧":"&mho;","µ":"&micro;","⫰":"&midcir;","−":"&minus;","⨪":"&minusdu;","⫛":"&mlcp;","⊧":"&models;","𝕞":"&mopf;","𝓂":"&mscr;","μ":"&mu;","⊸":"&mumap;","⋙̸":"&nGg;","≫⃒":"&nGt;","⇍":"&nlArr;","⇎":"&nhArr;","⋘̸":"&nLl;","≪⃒":"&nLt;","⇏":"&nrArr;","⊯":"&nVDash;","⊮":"&nVdash;","ń":"&nacute;","∠⃒":"&nang;","⩰̸":"&napE;","≋̸":"&napid;","ŉ":"&napos;","♮":"&natural;","⩃":"&ncap;","ň":"&ncaron;","ņ":"&ncedil;","⩭̸":"&ncongdot;","⩂":"&ncup;","н":"&ncy;","–":"&ndash;","⇗":"&neArr;","⤤":"&nearhk;","≐̸":"&nedot;","⤨":"&toea;","𝔫":"&nfr;","↮":"&nleftrightarrow;","⫲":"&nhpar;","⋼":"&nis;","⋺":"&nisd;","њ":"&njcy;","≦̸":"&nleqq;","↚":"&nleftarrow;","‥":"&nldr;","𝕟":"&nopf;","¬":"&not;","⋹̸":"&notinE;","⋵̸":"&notindot;","⋷":"&notinvb;","⋶":"&notinvc;","⋾":"&notnivb;","⋽":"&notnivc;","⫽⃥":"&nparsl;","∂̸":"&npart;","⨔":"&npolint;","↛":"&nrightarrow;","⤳̸":"&nrarrc;","↝̸":"&nrarrw;","𝓃":"&nscr;","⊄":"&nsub;","⫅̸":"&nsubseteqq;","⊅":"&nsup;","⫆̸":"&nsupseteqq;","ñ":"&ntilde;","ν":"&nu;","#":"&num;","№":"&numero;"," ":"&numsp;","⊭":"&nvDash;","⤄":"&nvHarr;","≍⃒":"&nvap;","⊬":"&nvdash;","≥⃒":"&nvge;",">⃒":"&nvgt;","⧞":"&nvinfin;","⤂":"&nvlArr;","≤⃒":"&nvle;","<⃒":"&nvlt;","⊴⃒":"&nvltrie;","⤃":"&nvrArr;","⊵⃒":"&nvrtrie;","∼⃒":"&nvsim;","⇖":"&nwArr;","⤣":"&nwarhk;","⤧":"&nwnear;","ó":"&oacute;","ô":"&ocirc;","о":"&ocy;","ő":"&odblac;","⨸":"&odiv;","⦼":"&odsold;","œ":"&oelig;","⦿":"&ofcir;","𝔬":"&ofr;","˛":"&ogon;","ò":"&ograve;","⧁":"&ogt;","⦵":"&ohbar;","⦾":"&olcir;","⦻":"&olcross;","⧀":"&olt;","ō":"&omacr;","ω":"&omega;","ο":"&omicron;","⦶":"&omid;","𝕠":"&oopf;","⦷":"&opar;","⦹":"&operp;","∨":"&vee;","⩝":"&ord;","ℴ":"&oscr;","ª":"&ordf;","º":"&ordm;","⊶":"&origof;","⩖":"&oror;","⩗":"&orslope;","⩛":"&orv;","ø":"&oslash;","⊘":"&osol;","õ":"&otilde;","⨶":"&otimesas;","ö":"&ouml;","⌽":"&ovbar;","¶":"&para;","⫳":"&parsim;","⫽":"&parsl;","п":"&pcy;","%":"&percnt;",".":"&period;","‰":"&permil;","‱":"&pertenk;","𝔭":"&pfr;","φ":"&phi;","ϕ":"&varphi;","☎":"&phone;","π":"&pi;","ϖ":"&varpi;","ℎ":"&planckh;","+":"&plus;","⨣":"&plusacir;","⨢":"&pluscir;","⨥":"&plusdu;","⩲":"&pluse;","⨦":"&plussim;","⨧":"&plustwo;","⨕":"&pointint;","𝕡":"&popf;","£":"&pound;","⪳":"&prE;","⪷":"&precapprox;","⪹":"&prnap;","⪵":"&prnE;","⋨":"&prnsim;","′":"&prime;","⌮":"&profalar;","⌒":"&profline;","⌓":"&profsurf;","⊰":"&prurel;","𝓅":"&pscr;","ψ":"&psi;"," ":"&puncsp;","𝔮":"&qfr;","𝕢":"&qopf;","⁗":"&qprime;","𝓆":"&qscr;","⨖":"&quatint;","?":"&quest;","⤜":"&rAtail;","⥤":"&rHar;","∽̱":"&race;","ŕ":"&racute;","⦳":"&raemptyv;","⦒":"&rangd;","⦥":"&range;","»":"&raquo;","⥵":"&rarrap;","⤠":"&rarrbfs;","⤳":"&rarrc;","⤞":"&rarrfs;","⥅":"&rarrpl;","⥴":"&rarrsim;","↣":"&rightarrowtail;","↝":"&rightsquigarrow;","⤚":"&ratail;","∶":"&ratio;","❳":"&rbbrk;","}":"&rcub;","]":"&rsqb;","⦌":"&rbrke;","⦎":"&rbrksld;","⦐":"&rbrkslu;","ř":"&rcaron;","ŗ":"&rcedil;","р":"&rcy;","⤷":"&rdca;","⥩":"&rdldhar;","↳":"&rdsh;","▭":"&rect;","⥽":"&rfisht;","𝔯":"&rfr;","⥬":"&rharul;","ρ":"&rho;","ϱ":"&varrho;","⇉":"&rrarr;","⋌":"&rthree;","˚":"&ring;","‏":"&rlm;","⎱":"&rmoustache;","⫮":"&rnmid;","⟭":"&roang;","⇾":"&roarr;","⦆":"&ropar;","𝕣":"&ropf;","⨮":"&roplus;","⨵":"&rotimes;",")":"&rpar;","⦔":"&rpargt;","⨒":"&rppolint;","›":"&rsaquo;","𝓇":"&rscr;","⋊":"&rtimes;","▹":"&triangleright;","⧎":"&rtriltri;","⥨":"&ruluhar;","℞":"&rx;","ś":"&sacute;","⪴":"&scE;","⪸":"&succapprox;","š":"&scaron;","ş":"&scedil;","ŝ":"&scirc;","⪶":"&succneqq;","⪺":"&succnapprox;","⋩":"&succnsim;","⨓":"&scpolint;","с":"&scy;","⋅":"&sdot;","⩦":"&sdote;","⇘":"&seArr;","§":"&sect;",";":"&semi;","⤩":"&tosa;","✶":"&sext;","𝔰":"&sfr;","♯":"&sharp;","щ":"&shchcy;","ш":"&shcy;","­":"&shy;","σ":"&sigma;","ς":"&varsigma;","⩪":"&simdot;","⪞":"&simg;","⪠":"&simgE;","⪝":"&siml;","⪟":"&simlE;","≆":"&simne;","⨤":"&simplus;","⥲":"&simrarr;","⨳":"&smashp;","⧤":"&smeparsl;","⌣":"&ssmile;","⪪":"&smt;","⪬":"&smte;","⪬︀":"&smtes;","ь":"&softcy;","/":"&sol;","⧄":"&solb;","⌿":"&solbar;","𝕤":"&sopf;","♠":"&spadesuit;","⊓︀":"&sqcaps;","⊔︀":"&sqcups;","𝓈":"&sscr;","☆":"&star;","⊂":"&subset;","⫅":"&subseteqq;","⪽":"&subdot;","⫃":"&subedot;","⫁":"&submult;","⫋":"&subsetneqq;","⊊":"&subsetneq;","⪿":"&subplus;","⥹":"&subrarr;","⫇":"&subsim;","⫕":"&subsub;","⫓":"&subsup;","♪":"&sung;","¹":"&sup1;","²":"&sup2;","³":"&sup3;","⫆":"&supseteqq;","⪾":"&supdot;","⫘":"&supdsub;","⫄":"&supedot;","⟉":"&suphsol;","⫗":"&suphsub;","⥻":"&suplarr;","⫂":"&supmult;","⫌":"&supsetneqq;","⊋":"&supsetneq;","⫀":"&supplus;","⫈":"&supsim;","⫔":"&supsub;","⫖":"&supsup;","⇙":"&swArr;","⤪":"&swnwar;","ß":"&szlig;","⌖":"&target;","τ":"&tau;","ť":"&tcaron;","ţ":"&tcedil;","т":"&tcy;","⌕":"&telrec;","𝔱":"&tfr;","θ":"&theta;","ϑ":"&vartheta;","þ":"&thorn;","×":"&times;","⨱":"&timesbar;","⨰":"&timesd;","⌶":"&topbot;","⫱":"&topcir;","𝕥":"&topf;","⫚":"&topfork;","‴":"&tprime;","▵":"&utri;","≜":"&trie;","◬":"&tridot;","⨺":"&triminus;","⨹":"&triplus;","⧍":"&trisb;","⨻":"&tritime;","⏢":"&trpezium;","𝓉":"&tscr;","ц":"&tscy;","ћ":"&tshcy;","ŧ":"&tstrok;","⥣":"&uHar;","ú":"&uacute;","ў":"&ubrcy;","ŭ":"&ubreve;","û":"&ucirc;","у":"&ucy;","ű":"&udblac;","⥾":"&ufisht;","𝔲":"&ufr;","ù":"&ugrave;","▀":"&uhblk;","⌜":"&ulcorner;","⌏":"&ulcrop;","◸":"&ultri;","ū":"&umacr;","ų":"&uogon;","𝕦":"&uopf;","υ":"&upsilon;","⇈":"&uuarr;","⌝":"&urcorner;","⌎":"&urcrop;","ů":"&uring;","◹":"&urtri;","𝓊":"&uscr;","⋰":"&utdot;","ũ":"&utilde;","ü":"&uuml;","⦧":"&uwangle;","⫨":"&vBar;","⫩":"&vBarv;","⦜":"&vangrt;","⊊︀":"&vsubne;","⫋︀":"&vsubnE;","⊋︀":"&vsupne;","⫌︀":"&vsupnE;","в":"&vcy;","⊻":"&veebar;","≚":"&veeeq;","⋮":"&vellip;","𝔳":"&vfr;","𝕧":"&vopf;","𝓋":"&vscr;","⦚":"&vzigzag;","ŵ":"&wcirc;","⩟":"&wedbar;","≙":"&wedgeq;","℘":"&wp;","𝔴":"&wfr;","𝕨":"&wopf;","𝓌":"&wscr;","𝔵":"&xfr;","ξ":"&xi;","⋻":"&xnis;","𝕩":"&xopf;","𝓍":"&xscr;","ý":"&yacute;","я":"&yacy;","ŷ":"&ycirc;","ы":"&ycy;","¥":"&yen;","𝔶":"&yfr;","ї":"&yicy;","𝕪":"&yopf;","𝓎":"&yscr;","ю":"&yucy;","ÿ":"&yuml;","ź":"&zacute;","ž":"&zcaron;","з":"&zcy;","ż":"&zdot;","ζ":"&zeta;","𝔷":"&zfr;","ж":"&zhcy;","⇝":"&zigrarr;","𝕫":"&zopf;","𝓏":"&zscr;","‍":"&zwj;","‌":"&zwnj;"}}};

/***/ }),

/***/ "./node_modules/html-entities/lib/numeric-unicode-map.js":
/*!***************************************************************!*\
  !*** ./node_modules/html-entities/lib/numeric-unicode-map.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
Object.defineProperty(exports, "__esModule", ({value:true}));exports.numericUnicodeMap={0:65533,128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376};

/***/ }),

/***/ "./node_modules/html-entities/lib/surrogate-pairs.js":
/*!***********************************************************!*\
  !*** ./node_modules/html-entities/lib/surrogate-pairs.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
Object.defineProperty(exports, "__esModule", ({value:true}));exports.fromCodePoint=String.fromCodePoint||function(astralCodePoint){return String.fromCharCode(Math.floor((astralCodePoint-65536)/1024)+55296,(astralCodePoint-65536)%1024+56320)};exports.getCodePoint=String.prototype.codePointAt?function(input,position){return input.codePointAt(position)}:function(input,position){return(input.charCodeAt(position)-55296)*1024+input.charCodeAt(position+1)-56320+65536};exports.highSurrogateFrom=55296;exports.highSurrogateTo=56319;

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/***/ ((module) => {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./src/styles.css":
/*!************************!*\
  !*** ./src/styles.css ***!
  \************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!./styles.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);


if (true) {
  if (!_node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals || module.hot.invalidate) {
    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {
  if (!a && b || a && !b) {
    return false;
  }

  var p;

  for (p in a) {
    if (isNamedExport && p === "default") {
      // eslint-disable-next-line no-continue
      continue;
    }

    if (a[p] !== b[p]) {
      return false;
    }
  }

  for (p in b) {
    if (isNamedExport && p === "default") {
      // eslint-disable-next-line no-continue
      continue;
    }

    if (!a[p]) {
      return false;
    }
  }

  return true;
};
    var isNamedExport = !_node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals;
    var oldLocals = isNamedExport ? _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__ : _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals;

    module.hot.accept(
      /*! !!../node_modules/css-loader/dist/cjs.js!./styles.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles.css",
      __WEBPACK_OUTDATED_DEPENDENCIES__ => { /* harmony import */ _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!./styles.css */ "./node_modules/css-loader/dist/cjs.js!./src/styles.css");
(function () {
        if (!isEqualLocals(oldLocals, isNamedExport ? _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__ : _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals, isNamedExport)) {
                module.hot.invalidate();

                return;
              }

              oldLocals = isNamedExport ? _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__ : _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals;

              update(_node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"]);
      })(__WEBPACK_OUTDATED_DEPENDENCIES__); }
    )
  }

  module.hot.dispose(function() {
    update();
  });
}



       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_styles_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";


var stylesInDOM = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };

    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);

  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }

      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };

  return updater;
}

module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();

        stylesInDOM.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";


var memo = {};
/* istanbul ignore next  */

function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }

    memo[target] = styleTarget;
  }

  return memo[target];
}
/* istanbul ignore next  */


function insertBySelector(insert, style) {
  var target = getTarget(insert);

  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }

  target.appendChild(style);
}

module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}

module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;

  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}

module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";

  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }

  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }

  var needLayer = typeof obj.layer !== "undefined";

  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }

  css += obj.css;

  if (needLayer) {
    css += "}";
  }

  if (obj.media) {
    css += "}";
  }

  if (obj.supports) {
    css += "}";
  }

  var sourceMap = obj.sourceMap;

  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  options.styleTagTransform(css, styleElement, options.options);
}

function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }

  styleElement.parentNode.removeChild(styleElement);
}
/* istanbul ignore next  */


function domAPI(options) {
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}

module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }

    styleElement.appendChild(document.createTextNode(css));
  }
}

module.exports = styleTagTransform;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/clients/WebSocketClient.js":
/*!***************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/clients/WebSocketClient.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ WebSocketClient)
/* harmony export */ });
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/log.js */ "./node_modules/webpack-dev-server/client/utils/log.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }



var WebSocketClient = /*#__PURE__*/function () {
  /**
   * @param {string} url
   */
  function WebSocketClient(url) {
    _classCallCheck(this, WebSocketClient);

    this.client = new WebSocket(url);

    this.client.onerror = function (error) {
      _utils_log_js__WEBPACK_IMPORTED_MODULE_0__.log.error(error);
    };
  }
  /**
   * @param {(...args: any[]) => void} f
   */


  _createClass(WebSocketClient, [{
    key: "onOpen",
    value: function onOpen(f) {
      this.client.onopen = f;
    }
    /**
     * @param {(...args: any[]) => void} f
     */

  }, {
    key: "onClose",
    value: function onClose(f) {
      this.client.onclose = f;
    } // call f with the message string as the first argument

    /**
     * @param {(...args: any[]) => void} f
     */

  }, {
    key: "onMessage",
    value: function onMessage(f) {
      this.client.onmessage = function (e) {
        f(e.data);
      };
    }
  }]);

  return WebSocketClient;
}();



/***/ }),

/***/ "./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8015&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true":
/*!***********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8015&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true ***!
  \***********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
var __resourceQuery = "?protocol=ws%3A&hostname=0.0.0.0&port=8015&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webpack/hot/log.js */ "./node_modules/webpack/hot/log.js");
/* harmony import */ var webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_stripAnsi_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/stripAnsi.js */ "./node_modules/webpack-dev-server/client/utils/stripAnsi.js");
/* harmony import */ var _utils_parseURL_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/parseURL.js */ "./node_modules/webpack-dev-server/client/utils/parseURL.js");
/* harmony import */ var _socket_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./socket.js */ "./node_modules/webpack-dev-server/client/socket.js");
/* harmony import */ var _overlay_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./overlay.js */ "./node_modules/webpack-dev-server/client/overlay.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/log.js */ "./node_modules/webpack-dev-server/client/utils/log.js");
/* harmony import */ var _utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils/sendMessage.js */ "./node_modules/webpack-dev-server/client/utils/sendMessage.js");
/* harmony import */ var _utils_reloadApp_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/reloadApp.js */ "./node_modules/webpack-dev-server/client/utils/reloadApp.js");
/* harmony import */ var _utils_createSocketURL_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/createSocketURL.js */ "./node_modules/webpack-dev-server/client/utils/createSocketURL.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* global __resourceQuery, __webpack_hash__ */
/// <reference types="webpack/module" />









/**
 * @typedef {Object} Options
 * @property {boolean} hot
 * @property {boolean} liveReload
 * @property {boolean} progress
 * @property {boolean | { warnings?: boolean, errors?: boolean, trustedTypesPolicyName?: string }} overlay
 * @property {string} [logging]
 * @property {number} [reconnect]
 */

/**
 * @typedef {Object} Status
 * @property {boolean} isUnloading
 * @property {string} currentHash
 * @property {string} [previousHash]
 */

/**
 * @type {Status}
 */

var status = {
  isUnloading: false,
  // TODO Workaround for webpack v4, `__webpack_hash__` is not replaced without HotModuleReplacement
  // eslint-disable-next-line camelcase
  currentHash:  true ? __webpack_require__.h() : 0
};
/** @type {Options} */

var options = {
  hot: false,
  liveReload: false,
  progress: false,
  overlay: false
};
var parsedResourceQuery = (0,_utils_parseURL_js__WEBPACK_IMPORTED_MODULE_2__["default"])(__resourceQuery);
var enabledFeatures = {
  "Hot Module Replacement": false,
  "Live Reloading": false,
  Progress: false,
  Overlay: false
};

if (parsedResourceQuery.hot === "true") {
  options.hot = true;
  enabledFeatures["Hot Module Replacement"] = true;
}

if (parsedResourceQuery["live-reload"] === "true") {
  options.liveReload = true;
  enabledFeatures["Live Reloading"] = true;
}

if (parsedResourceQuery.progress === "true") {
  options.progress = true;
  enabledFeatures.Progress = true;
}

if (parsedResourceQuery.overlay) {
  try {
    options.overlay = JSON.parse(parsedResourceQuery.overlay);
  } catch (e) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.error("Error parsing overlay options from resource query:", e);
  } // Fill in default "true" params for partially-specified objects.


  if (typeof options.overlay === "object") {
    options.overlay = _objectSpread({
      errors: true,
      warnings: true
    }, options.overlay);
  }

  enabledFeatures.Overlay = true;
}

if (parsedResourceQuery.logging) {
  options.logging = parsedResourceQuery.logging;
}

if (typeof parsedResourceQuery.reconnect !== "undefined") {
  options.reconnect = Number(parsedResourceQuery.reconnect);
}

(0,_utils_log_js__WEBPACK_IMPORTED_MODULE_5__.logEnabledFeatures)(enabledFeatures);
/**
 * @param {string} level
 */

function setAllLogLevel(level) {
  // This is needed because the HMR logger operate separately from dev server logger
  webpack_hot_log_js__WEBPACK_IMPORTED_MODULE_0___default().setLogLevel(level === "verbose" || level === "log" ? "info" : level);
  (0,_utils_log_js__WEBPACK_IMPORTED_MODULE_5__.setLogLevel)(level);
}

if (options.logging) {
  setAllLogLevel(options.logging);
}

self.addEventListener("beforeunload", function () {
  status.isUnloading = true;
});
var onSocketMessage = {
  hot: function hot() {
    if (parsedResourceQuery.hot === "false") {
      return;
    }

    options.hot = true;
  },
  liveReload: function liveReload() {
    if (parsedResourceQuery["live-reload"] === "false") {
      return;
    }

    options.liveReload = true;
  },
  invalid: function invalid() {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("App updated. Recompiling..."); // Fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.

    if (options.overlay) {
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.hide)();
    }

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Invalid");
  },

  /**
   * @param {string} hash
   */
  hash: function hash(_hash) {
    status.previousHash = status.currentHash;
    status.currentHash = _hash;
  },
  logging: setAllLogLevel,

  /**
   * @param {boolean} value
   */
  overlay: function overlay(value) {
    if (typeof document === "undefined") {
      return;
    }

    options.overlay = value;
  },

  /**
   * @param {number} value
   */
  reconnect: function reconnect(value) {
    if (parsedResourceQuery.reconnect === "false") {
      return;
    }

    options.reconnect = value;
  },

  /**
   * @param {boolean} value
   */
  progress: function progress(value) {
    options.progress = value;
  },

  /**
   * @param {{ pluginName?: string, percent: number, msg: string }} data
   */
  "progress-update": function progressUpdate(data) {
    if (options.progress) {
      _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("".concat(data.pluginName ? "[".concat(data.pluginName, "] ") : "").concat(data.percent, "% - ").concat(data.msg, "."));
    }

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Progress", data);
  },
  "still-ok": function stillOk() {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Nothing changed.");

    if (options.overlay) {
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.hide)();
    }

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("StillOk");
  },
  ok: function ok() {
    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Ok");

    if (options.overlay) {
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.hide)();
    }

    (0,_utils_reloadApp_js__WEBPACK_IMPORTED_MODULE_7__["default"])(options, status);
  },
  // TODO: remove in v5 in favor of 'static-changed'

  /**
   * @param {string} file
   */
  "content-changed": function contentChanged(file) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("".concat(file ? "\"".concat(file, "\"") : "Content", " from static directory was changed. Reloading..."));
    self.location.reload();
  },

  /**
   * @param {string} file
   */
  "static-changed": function staticChanged(file) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("".concat(file ? "\"".concat(file, "\"") : "Content", " from static directory was changed. Reloading..."));
    self.location.reload();
  },

  /**
   * @param {Error[]} warnings
   * @param {any} params
   */
  warnings: function warnings(_warnings, params) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.warn("Warnings while compiling.");

    var printableWarnings = _warnings.map(function (error) {
      var _formatProblem = (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.formatProblem)("warning", error),
          header = _formatProblem.header,
          body = _formatProblem.body;

      return "".concat(header, "\n").concat((0,_utils_stripAnsi_js__WEBPACK_IMPORTED_MODULE_1__["default"])(body));
    });

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Warnings", printableWarnings);

    for (var i = 0; i < printableWarnings.length; i++) {
      _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.warn(printableWarnings[i]);
    }

    var needShowOverlayForWarnings = typeof options.overlay === "boolean" ? options.overlay : options.overlay && options.overlay.warnings;

    if (needShowOverlayForWarnings) {
      var trustedTypesPolicyName = typeof options.overlay === "object" && options.overlay.trustedTypesPolicyName;
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.show)("warning", _warnings, trustedTypesPolicyName || null);
    }

    if (params && params.preventReloading) {
      return;
    }

    (0,_utils_reloadApp_js__WEBPACK_IMPORTED_MODULE_7__["default"])(options, status);
  },

  /**
   * @param {Error[]} errors
   */
  errors: function errors(_errors) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.error("Errors while compiling. Reload prevented.");

    var printableErrors = _errors.map(function (error) {
      var _formatProblem2 = (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.formatProblem)("error", error),
          header = _formatProblem2.header,
          body = _formatProblem2.body;

      return "".concat(header, "\n").concat((0,_utils_stripAnsi_js__WEBPACK_IMPORTED_MODULE_1__["default"])(body));
    });

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Errors", printableErrors);

    for (var i = 0; i < printableErrors.length; i++) {
      _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.error(printableErrors[i]);
    }

    var needShowOverlayForErrors = typeof options.overlay === "boolean" ? options.overlay : options.overlay && options.overlay.errors;

    if (needShowOverlayForErrors) {
      var trustedTypesPolicyName = typeof options.overlay === "object" && options.overlay.trustedTypesPolicyName;
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.show)("error", _errors, trustedTypesPolicyName || null);
    }
  },

  /**
   * @param {Error} error
   */
  error: function error(_error) {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.error(_error);
  },
  close: function close() {
    _utils_log_js__WEBPACK_IMPORTED_MODULE_5__.log.info("Disconnected!");

    if (options.overlay) {
      (0,_overlay_js__WEBPACK_IMPORTED_MODULE_4__.hide)();
    }

    (0,_utils_sendMessage_js__WEBPACK_IMPORTED_MODULE_6__["default"])("Close");
  }
};
var socketURL = (0,_utils_createSocketURL_js__WEBPACK_IMPORTED_MODULE_8__["default"])(parsedResourceQuery);
(0,_socket_js__WEBPACK_IMPORTED_MODULE_3__["default"])(socketURL, onSocketMessage, options.reconnect);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/modules/logger/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/modules/logger/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* provided dependency */ var process = __webpack_require__(/*! process/browser */ "./node_modules/process/browser.js");
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./client-src/modules/logger/SyncBailHookFake.js":
/*!*******************************************************!*\
  !*** ./client-src/modules/logger/SyncBailHookFake.js ***!
  \*******************************************************/
/***/ (function(module) {


/**
 * Client stub for tapable SyncBailHook
 */

module.exports = function clientTapableSyncBailHook() {
  return {
    call: function call() {}
  };
};

/***/ }),

/***/ "./node_modules/webpack/lib/logging/Logger.js":
/*!****************************************************!*\
  !*** ./node_modules/webpack/lib/logging/Logger.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/


function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _iterableToArray(iter) {
  if (typeof (typeof Symbol !== "undefined" ? Symbol : function (i) { return i; }) !== "undefined" && iter[(typeof Symbol !== "undefined" ? Symbol : function (i) { return i; }).iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

var LogType = Object.freeze({
  error:
  /** @type {"error"} */
  "error",
  // message, c style arguments
  warn:
  /** @type {"warn"} */
  "warn",
  // message, c style arguments
  info:
  /** @type {"info"} */
  "info",
  // message, c style arguments
  log:
  /** @type {"log"} */
  "log",
  // message, c style arguments
  debug:
  /** @type {"debug"} */
  "debug",
  // message, c style arguments
  trace:
  /** @type {"trace"} */
  "trace",
  // no arguments
  group:
  /** @type {"group"} */
  "group",
  // [label]
  groupCollapsed:
  /** @type {"groupCollapsed"} */
  "groupCollapsed",
  // [label]
  groupEnd:
  /** @type {"groupEnd"} */
  "groupEnd",
  // [label]
  profile:
  /** @type {"profile"} */
  "profile",
  // [profileName]
  profileEnd:
  /** @type {"profileEnd"} */
  "profileEnd",
  // [profileName]
  time:
  /** @type {"time"} */
  "time",
  // name, time as [seconds, nanoseconds]
  clear:
  /** @type {"clear"} */
  "clear",
  // no arguments
  status:
  /** @type {"status"} */
  "status" // message, arguments

});
exports.LogType = LogType;
/** @typedef {typeof LogType[keyof typeof LogType]} LogTypeEnum */

var LOG_SYMBOL = (typeof Symbol !== "undefined" ? Symbol : function (i) { return i; })("webpack logger raw log method");
var TIMERS_SYMBOL = (typeof Symbol !== "undefined" ? Symbol : function (i) { return i; })("webpack logger times");
var TIMERS_AGGREGATES_SYMBOL = (typeof Symbol !== "undefined" ? Symbol : function (i) { return i; })("webpack logger aggregated times");

var WebpackLogger = /*#__PURE__*/function () {
  /**
   * @param {function(LogTypeEnum, any[]=): void} log log function
   * @param {function(string | function(): string): WebpackLogger} getChildLogger function to create child logger
   */
  function WebpackLogger(log, getChildLogger) {
    _classCallCheck(this, WebpackLogger);

    this[LOG_SYMBOL] = log;
    this.getChildLogger = getChildLogger;
  }

  _createClass(WebpackLogger, [{
    key: "error",
    value: function error() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      this[LOG_SYMBOL](LogType.error, args);
    }
  }, {
    key: "warn",
    value: function warn() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      this[LOG_SYMBOL](LogType.warn, args);
    }
  }, {
    key: "info",
    value: function info() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      this[LOG_SYMBOL](LogType.info, args);
    }
  }, {
    key: "log",
    value: function log() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      this[LOG_SYMBOL](LogType.log, args);
    }
  }, {
    key: "debug",
    value: function debug() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      this[LOG_SYMBOL](LogType.debug, args);
    }
  }, {
    key: "assert",
    value: function assert(assertion) {
      if (!assertion) {
        for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
          args[_key6 - 1] = arguments[_key6];
        }

        this[LOG_SYMBOL](LogType.error, args);
      }
    }
  }, {
    key: "trace",
    value: function trace() {
      this[LOG_SYMBOL](LogType.trace, ["Trace"]);
    }
  }, {
    key: "clear",
    value: function clear() {
      this[LOG_SYMBOL](LogType.clear);
    }
  }, {
    key: "status",
    value: function status() {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }

      this[LOG_SYMBOL](LogType.status, args);
    }
  }, {
    key: "group",
    value: function group() {
      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        args[_key8] = arguments[_key8];
      }

      this[LOG_SYMBOL](LogType.group, args);
    }
  }, {
    key: "groupCollapsed",
    value: function groupCollapsed() {
      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
        args[_key9] = arguments[_key9];
      }

      this[LOG_SYMBOL](LogType.groupCollapsed, args);
    }
  }, {
    key: "groupEnd",
    value: function groupEnd() {
      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
        args[_key10] = arguments[_key10];
      }

      this[LOG_SYMBOL](LogType.groupEnd, args);
    }
  }, {
    key: "profile",
    value: function profile(label) {
      this[LOG_SYMBOL](LogType.profile, [label]);
    }
  }, {
    key: "profileEnd",
    value: function profileEnd(label) {
      this[LOG_SYMBOL](LogType.profileEnd, [label]);
    }
  }, {
    key: "time",
    value: function time(label) {
      this[TIMERS_SYMBOL] = this[TIMERS_SYMBOL] || new Map();
      this[TIMERS_SYMBOL].set(label, process.hrtime());
    }
  }, {
    key: "timeLog",
    value: function timeLog(label) {
      var prev = this[TIMERS_SYMBOL] && this[TIMERS_SYMBOL].get(label);

      if (!prev) {
        throw new Error("No such label '".concat(label, "' for WebpackLogger.timeLog()"));
      }

      var time = process.hrtime(prev);
      this[LOG_SYMBOL](LogType.time, [label].concat(_toConsumableArray(time)));
    }
  }, {
    key: "timeEnd",
    value: function timeEnd(label) {
      var prev = this[TIMERS_SYMBOL] && this[TIMERS_SYMBOL].get(label);

      if (!prev) {
        throw new Error("No such label '".concat(label, "' for WebpackLogger.timeEnd()"));
      }

      var time = process.hrtime(prev);
      this[TIMERS_SYMBOL].delete(label);
      this[LOG_SYMBOL](LogType.time, [label].concat(_toConsumableArray(time)));
    }
  }, {
    key: "timeAggregate",
    value: function timeAggregate(label) {
      var prev = this[TIMERS_SYMBOL] && this[TIMERS_SYMBOL].get(label);

      if (!prev) {
        throw new Error("No such label '".concat(label, "' for WebpackLogger.timeAggregate()"));
      }

      var time = process.hrtime(prev);
      this[TIMERS_SYMBOL].delete(label);
      this[TIMERS_AGGREGATES_SYMBOL] = this[TIMERS_AGGREGATES_SYMBOL] || new Map();
      var current = this[TIMERS_AGGREGATES_SYMBOL].get(label);

      if (current !== undefined) {
        if (time[1] + current[1] > 1e9) {
          time[0] += current[0] + 1;
          time[1] = time[1] - 1e9 + current[1];
        } else {
          time[0] += current[0];
          time[1] += current[1];
        }
      }

      this[TIMERS_AGGREGATES_SYMBOL].set(label, time);
    }
  }, {
    key: "timeAggregateEnd",
    value: function timeAggregateEnd(label) {
      if (this[TIMERS_AGGREGATES_SYMBOL] === undefined) return;
      var time = this[TIMERS_AGGREGATES_SYMBOL].get(label);
      if (time === undefined) return;
      this[TIMERS_AGGREGATES_SYMBOL].delete(label);
      this[LOG_SYMBOL](LogType.time, [label].concat(_toConsumableArray(time)));
    }
  }]);

  return WebpackLogger;
}();

exports.Logger = WebpackLogger;

/***/ }),

/***/ "./node_modules/webpack/lib/logging/createConsoleLogger.js":
/*!*****************************************************************!*\
  !*** ./node_modules/webpack/lib/logging/createConsoleLogger.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_10785__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/


function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _iterableToArray(iter) {
  if (typeof (typeof Symbol !== "undefined" ? Symbol : function (i) { return i; }) !== "undefined" && iter[(typeof Symbol !== "undefined" ? Symbol : function (i) { return i; }).iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

var _require = __nested_webpack_require_10785__(/*! ./Logger */ "./node_modules/webpack/lib/logging/Logger.js"),
    LogType = _require.LogType;
/** @typedef {import("../../declarations/WebpackOptions").FilterItemTypes} FilterItemTypes */

/** @typedef {import("../../declarations/WebpackOptions").FilterTypes} FilterTypes */

/** @typedef {import("./Logger").LogTypeEnum} LogTypeEnum */

/** @typedef {function(string): boolean} FilterFunction */

/**
 * @typedef {Object} LoggerConsole
 * @property {function(): void} clear
 * @property {function(): void} trace
 * @property {(...args: any[]) => void} info
 * @property {(...args: any[]) => void} log
 * @property {(...args: any[]) => void} warn
 * @property {(...args: any[]) => void} error
 * @property {(...args: any[]) => void=} debug
 * @property {(...args: any[]) => void=} group
 * @property {(...args: any[]) => void=} groupCollapsed
 * @property {(...args: any[]) => void=} groupEnd
 * @property {(...args: any[]) => void=} status
 * @property {(...args: any[]) => void=} profile
 * @property {(...args: any[]) => void=} profileEnd
 * @property {(...args: any[]) => void=} logTime
 */

/**
 * @typedef {Object} LoggerOptions
 * @property {false|true|"none"|"error"|"warn"|"info"|"log"|"verbose"} level loglevel
 * @property {FilterTypes|boolean} debug filter for debug logging
 * @property {LoggerConsole} console the console to log to
 */

/**
 * @param {FilterItemTypes} item an input item
 * @returns {FilterFunction} filter function
 */


var filterToFunction = function filterToFunction(item) {
  if (typeof item === "string") {
    var regExp = new RegExp("[\\\\/]".concat(item.replace( // eslint-disable-next-line no-useless-escape
    /[-[\]{}()*+?.\\^$|]/g, "\\$&"), "([\\\\/]|$|!|\\?)"));
    return function (ident) {
      return regExp.test(ident);
    };
  }

  if (item && typeof item === "object" && typeof item.test === "function") {
    return function (ident) {
      return item.test(ident);
    };
  }

  if (typeof item === "function") {
    return item;
  }

  if (typeof item === "boolean") {
    return function () {
      return item;
    };
  }
};
/**
 * @enum {number}
 */


var LogLevel = {
  none: 6,
  false: 6,
  error: 5,
  warn: 4,
  info: 3,
  log: 2,
  true: 2,
  verbose: 1
};
/**
 * @param {LoggerOptions} options options object
 * @returns {function(string, LogTypeEnum, any[]): void} logging function
 */

module.exports = function (_ref) {
  var _ref$level = _ref.level,
      level = _ref$level === void 0 ? "info" : _ref$level,
      _ref$debug = _ref.debug,
      debug = _ref$debug === void 0 ? false : _ref$debug,
      console = _ref.console;
  var debugFilters = typeof debug === "boolean" ? [function () {
    return debug;
  }] :
  /** @type {FilterItemTypes[]} */
  [].concat(debug).map(filterToFunction);
  /** @type {number} */

  var loglevel = LogLevel["".concat(level)] || 0;
  /**
   * @param {string} name name of the logger
   * @param {LogTypeEnum} type type of the log entry
   * @param {any[]} args arguments of the log entry
   * @returns {void}
   */

  var logger = function logger(name, type, args) {
    var labeledArgs = function labeledArgs() {
      if (Array.isArray(args)) {
        if (args.length > 0 && typeof args[0] === "string") {
          return ["[".concat(name, "] ").concat(args[0])].concat(_toConsumableArray(args.slice(1)));
        } else {
          return ["[".concat(name, "]")].concat(_toConsumableArray(args));
        }
      } else {
        return [];
      }
    };

    var debug = debugFilters.some(function (f) {
      return f(name);
    });

    switch (type) {
      case LogType.debug:
        if (!debug) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins

        if (typeof console.debug === "function") {
          // eslint-disable-next-line node/no-unsupported-features/node-builtins
          console.debug.apply(console, _toConsumableArray(labeledArgs()));
        } else {
          console.log.apply(console, _toConsumableArray(labeledArgs()));
        }

        break;

      case LogType.log:
        if (!debug && loglevel > LogLevel.log) return;
        console.log.apply(console, _toConsumableArray(labeledArgs()));
        break;

      case LogType.info:
        if (!debug && loglevel > LogLevel.info) return;
        console.info.apply(console, _toConsumableArray(labeledArgs()));
        break;

      case LogType.warn:
        if (!debug && loglevel > LogLevel.warn) return;
        console.warn.apply(console, _toConsumableArray(labeledArgs()));
        break;

      case LogType.error:
        if (!debug && loglevel > LogLevel.error) return;
        console.error.apply(console, _toConsumableArray(labeledArgs()));
        break;

      case LogType.trace:
        if (!debug) return;
        console.trace();
        break;

      case LogType.groupCollapsed:
        if (!debug && loglevel > LogLevel.log) return;

        if (!debug && loglevel > LogLevel.verbose) {
          // eslint-disable-next-line node/no-unsupported-features/node-builtins
          if (typeof console.groupCollapsed === "function") {
            // eslint-disable-next-line node/no-unsupported-features/node-builtins
            console.groupCollapsed.apply(console, _toConsumableArray(labeledArgs()));
          } else {
            console.log.apply(console, _toConsumableArray(labeledArgs()));
          }

          break;
        }

      // falls through

      case LogType.group:
        if (!debug && loglevel > LogLevel.log) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins

        if (typeof console.group === "function") {
          // eslint-disable-next-line node/no-unsupported-features/node-builtins
          console.group.apply(console, _toConsumableArray(labeledArgs()));
        } else {
          console.log.apply(console, _toConsumableArray(labeledArgs()));
        }

        break;

      case LogType.groupEnd:
        if (!debug && loglevel > LogLevel.log) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins

        if (typeof console.groupEnd === "function") {
          // eslint-disable-next-line node/no-unsupported-features/node-builtins
          console.groupEnd();
        }

        break;

      case LogType.time:
        {
          if (!debug && loglevel > LogLevel.log) return;
          var ms = args[1] * 1000 + args[2] / 1000000;
          var msg = "[".concat(name, "] ").concat(args[0], ": ").concat(ms, " ms");

          if (typeof console.logTime === "function") {
            console.logTime(msg);
          } else {
            console.log(msg);
          }

          break;
        }

      case LogType.profile:
        // eslint-disable-next-line node/no-unsupported-features/node-builtins
        if (typeof console.profile === "function") {
          // eslint-disable-next-line node/no-unsupported-features/node-builtins
          console.profile.apply(console, _toConsumableArray(labeledArgs()));
        }

        break;

      case LogType.profileEnd:
        // eslint-disable-next-line node/no-unsupported-features/node-builtins
        if (typeof console.profileEnd === "function") {
          // eslint-disable-next-line node/no-unsupported-features/node-builtins
          console.profileEnd.apply(console, _toConsumableArray(labeledArgs()));
        }

        break;

      case LogType.clear:
        if (!debug && loglevel > LogLevel.log) return; // eslint-disable-next-line node/no-unsupported-features/node-builtins

        if (typeof console.clear === "function") {
          // eslint-disable-next-line node/no-unsupported-features/node-builtins
          console.clear();
        }

        break;

      case LogType.status:
        if (!debug && loglevel > LogLevel.info) return;

        if (typeof console.status === "function") {
          if (args.length === 0) {
            console.status();
          } else {
            console.status.apply(console, _toConsumableArray(labeledArgs()));
          }
        } else {
          if (args.length !== 0) {
            console.info.apply(console, _toConsumableArray(labeledArgs()));
          }
        }

        break;

      default:
        throw new Error("Unexpected LogType ".concat(type));
    }
  };

  return logger;
};

/***/ }),

/***/ "./node_modules/webpack/lib/logging/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/webpack/lib/logging/runtime.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_20872__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/


function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

var SyncBailHook = __nested_webpack_require_20872__(/*! tapable/lib/SyncBailHook */ "./client-src/modules/logger/SyncBailHookFake.js");

var _require = __nested_webpack_require_20872__(/*! ./Logger */ "./node_modules/webpack/lib/logging/Logger.js"),
    Logger = _require.Logger;

var createConsoleLogger = __nested_webpack_require_20872__(/*! ./createConsoleLogger */ "./node_modules/webpack/lib/logging/createConsoleLogger.js");
/** @type {createConsoleLogger.LoggerOptions} */


var currentDefaultLoggerOptions = {
  level: "info",
  debug: false,
  console: console
};
var currentDefaultLogger = createConsoleLogger(currentDefaultLoggerOptions);
/**
 * @param {string} name name of the logger
 * @returns {Logger} a logger
 */

exports.getLogger = function (name) {
  return new Logger(function (type, args) {
    if (exports.hooks.log.call(name, type, args) === undefined) {
      currentDefaultLogger(name, type, args);
    }
  }, function (childName) {
    return exports.getLogger("".concat(name, "/").concat(childName));
  });
};
/**
 * @param {createConsoleLogger.LoggerOptions} options new options, merge with old options
 * @returns {void}
 */


exports.configureDefaultLogger = function (options) {
  _extends(currentDefaultLoggerOptions, options);

  currentDefaultLogger = createConsoleLogger(currentDefaultLoggerOptions);
};

exports.hooks = {
  log: new SyncBailHook(["origin", "type", "args"])
};

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_23009__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_23009__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__nested_webpack_require_23009__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__nested_webpack_require_23009__.o(definition, key) && !__nested_webpack_require_23009__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__nested_webpack_require_23009__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__nested_webpack_require_23009__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
!function() {
/*!********************************************!*\
  !*** ./client-src/modules/logger/index.js ***!
  \********************************************/
__nested_webpack_require_23009__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_23009__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* reexport default export from named module */ webpack_lib_logging_runtime_js__WEBPACK_IMPORTED_MODULE_0__; }
/* harmony export */ });
/* harmony import */ var webpack_lib_logging_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_23009__(/*! webpack/lib/logging/runtime.js */ "./node_modules/webpack/lib/logging/runtime.js");

}();
var __webpack_export_target__ = exports;
for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ })()
;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/overlay.js":
/*!***********************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/overlay.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "formatProblem": () => (/* binding */ formatProblem),
/* harmony export */   "hide": () => (/* binding */ hide),
/* harmony export */   "show": () => (/* binding */ show)
/* harmony export */ });
/* harmony import */ var ansi_html_community__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ansi-html-community */ "./node_modules/ansi-html-community/index.js");
/* harmony import */ var ansi_html_community__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ansi_html_community__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var html_entities__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! html-entities */ "./node_modules/html-entities/lib/index.js");
/* harmony import */ var html_entities__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(html_entities__WEBPACK_IMPORTED_MODULE_1__);
// The error overlay is inspired (and mostly copied) from Create React App (https://github.com/facebookincubator/create-react-app)
// They, in turn, got inspired by webpack-hot-middleware (https://github.com/glenjamin/webpack-hot-middleware).


var colors = {
  reset: ["transparent", "transparent"],
  black: "181818",
  red: "E36049",
  green: "B3CB74",
  yellow: "FFD080",
  blue: "7CAFC2",
  magenta: "7FACCA",
  cyan: "C3C2EF",
  lightgrey: "EBE7E3",
  darkgrey: "6D7891"
};
/** @type {HTMLIFrameElement | null | undefined} */

var iframeContainerElement;
/** @type {HTMLDivElement | null | undefined} */

var containerElement;
/** @type {Array<(element: HTMLDivElement) => void>} */

var onLoadQueue = [];
/** @type {TrustedTypePolicy | undefined} */

var overlayTrustedTypesPolicy;
ansi_html_community__WEBPACK_IMPORTED_MODULE_0___default().setColors(colors);
/**
 * @param {string | null} trustedTypesPolicyName
 */

function createContainer(trustedTypesPolicyName) {
  // Enable Trusted Types if they are available in the current browser.
  if (window.trustedTypes) {
    overlayTrustedTypesPolicy = window.trustedTypes.createPolicy(trustedTypesPolicyName || "webpack-dev-server#overlay", {
      createHTML: function createHTML(value) {
        return value;
      }
    });
  }

  iframeContainerElement = document.createElement("iframe");
  iframeContainerElement.id = "webpack-dev-server-client-overlay";
  iframeContainerElement.src = "about:blank";
  iframeContainerElement.style.position = "fixed";
  iframeContainerElement.style.left = 0;
  iframeContainerElement.style.top = 0;
  iframeContainerElement.style.right = 0;
  iframeContainerElement.style.bottom = 0;
  iframeContainerElement.style.width = "100vw";
  iframeContainerElement.style.height = "100vh";
  iframeContainerElement.style.border = "none";
  iframeContainerElement.style.zIndex = 9999999999;

  iframeContainerElement.onload = function () {
    containerElement =
    /** @type {Document} */

    /** @type {HTMLIFrameElement} */
    iframeContainerElement.contentDocument.createElement("div");
    containerElement.id = "webpack-dev-server-client-overlay-div";
    containerElement.style.position = "fixed";
    containerElement.style.boxSizing = "border-box";
    containerElement.style.left = 0;
    containerElement.style.top = 0;
    containerElement.style.right = 0;
    containerElement.style.bottom = 0;
    containerElement.style.width = "100vw";
    containerElement.style.height = "100vh";
    containerElement.style.backgroundColor = "rgba(0, 0, 0, 0.85)";
    containerElement.style.color = "#E8E8E8";
    containerElement.style.fontFamily = "Menlo, Consolas, monospace";
    containerElement.style.fontSize = "large";
    containerElement.style.padding = "2rem";
    containerElement.style.lineHeight = "1.2";
    containerElement.style.whiteSpace = "pre-wrap";
    containerElement.style.overflow = "auto";
    var headerElement = document.createElement("span");
    headerElement.innerText = "Compiled with problems:";
    var closeButtonElement = document.createElement("button");
    closeButtonElement.innerText = "X";
    closeButtonElement.style.background = "transparent";
    closeButtonElement.style.border = "none";
    closeButtonElement.style.fontSize = "20px";
    closeButtonElement.style.fontWeight = "bold";
    closeButtonElement.style.color = "white";
    closeButtonElement.style.cursor = "pointer";
    closeButtonElement.style.cssFloat = "right"; // @ts-ignore

    closeButtonElement.style.styleFloat = "right";
    closeButtonElement.addEventListener("click", function () {
      hide();
    });
    containerElement.appendChild(headerElement);
    containerElement.appendChild(closeButtonElement);
    containerElement.appendChild(document.createElement("br"));
    containerElement.appendChild(document.createElement("br"));
    /** @type {Document} */

    /** @type {HTMLIFrameElement} */
    iframeContainerElement.contentDocument.body.appendChild(containerElement);
    onLoadQueue.forEach(function (onLoad) {
      onLoad(
      /** @type {HTMLDivElement} */
      containerElement);
    });
    onLoadQueue = [];
    /** @type {HTMLIFrameElement} */

    iframeContainerElement.onload = null;
  };

  document.body.appendChild(iframeContainerElement);
}
/**
 * @param {(element: HTMLDivElement) => void} callback
 * @param {string | null} trustedTypesPolicyName
 */


function ensureOverlayExists(callback, trustedTypesPolicyName) {
  if (containerElement) {
    // Everything is ready, call the callback right away.
    callback(containerElement);
    return;
  }

  onLoadQueue.push(callback);

  if (iframeContainerElement) {
    return;
  }

  createContainer(trustedTypesPolicyName);
} // Successful compilation.


function hide() {
  if (!iframeContainerElement) {
    return;
  } // Clean up and reset internal state.


  document.body.removeChild(iframeContainerElement);
  iframeContainerElement = null;
  containerElement = null;
}
/**
 * @param {string} type
 * @param {string  | { file?: string, moduleName?: string, loc?: string, message?: string }} item
 * @returns {{ header: string, body: string }}
 */


function formatProblem(type, item) {
  var header = type === "warning" ? "WARNING" : "ERROR";
  var body = "";

  if (typeof item === "string") {
    body += item;
  } else {
    var file = item.file || ""; // eslint-disable-next-line no-nested-ternary

    var moduleName = item.moduleName ? item.moduleName.indexOf("!") !== -1 ? "".concat(item.moduleName.replace(/^(\s|\S)*!/, ""), " (").concat(item.moduleName, ")") : "".concat(item.moduleName) : "";
    var loc = item.loc;
    header += "".concat(moduleName || file ? " in ".concat(moduleName ? "".concat(moduleName).concat(file ? " (".concat(file, ")") : "") : file).concat(loc ? " ".concat(loc) : "") : "");
    body += item.message || "";
  }

  return {
    header: header,
    body: body
  };
} // Compilation with errors (e.g. syntax error or missing modules).

/**
 * @param {string} type
 * @param {Array<string  | { file?: string, moduleName?: string, loc?: string, message?: string }>} messages
 * @param {string | null} trustedTypesPolicyName
 */


function show(type, messages, trustedTypesPolicyName) {
  ensureOverlayExists(function () {
    messages.forEach(function (message) {
      var entryElement = document.createElement("div");
      var typeElement = document.createElement("span");

      var _formatProblem = formatProblem(type, message),
          header = _formatProblem.header,
          body = _formatProblem.body;

      typeElement.innerText = header;
      typeElement.style.color = "#".concat(colors.red); // Make it look similar to our terminal.

      var text = ansi_html_community__WEBPACK_IMPORTED_MODULE_0___default()((0,html_entities__WEBPACK_IMPORTED_MODULE_1__.encode)(body));
      var messageTextNode = document.createElement("div");
      messageTextNode.innerHTML = overlayTrustedTypesPolicy ? overlayTrustedTypesPolicy.createHTML(text) : text;
      entryElement.appendChild(typeElement);
      entryElement.appendChild(document.createElement("br"));
      entryElement.appendChild(document.createElement("br"));
      entryElement.appendChild(messageTextNode);
      entryElement.appendChild(document.createElement("br"));
      entryElement.appendChild(document.createElement("br"));
      /** @type {HTMLDivElement} */

      containerElement.appendChild(entryElement);
    });
  }, trustedTypesPolicyName);
}



/***/ }),

/***/ "./node_modules/webpack-dev-server/client/socket.js":
/*!**********************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/socket.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "client": () => (/* binding */ client),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _clients_WebSocketClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./clients/WebSocketClient.js */ "./node_modules/webpack-dev-server/client/clients/WebSocketClient.js");
/* harmony import */ var _utils_log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/log.js */ "./node_modules/webpack-dev-server/client/utils/log.js");
/* provided dependency */ var __webpack_dev_server_client__ = __webpack_require__(/*! ./node_modules/webpack-dev-server/client/clients/WebSocketClient.js */ "./node_modules/webpack-dev-server/client/clients/WebSocketClient.js");
/* global __webpack_dev_server_client__ */

 // this WebsocketClient is here as a default fallback, in case the client is not injected

/* eslint-disable camelcase */

var Client = // eslint-disable-next-line no-nested-ternary
typeof __webpack_dev_server_client__ !== "undefined" ? typeof __webpack_dev_server_client__.default !== "undefined" ? __webpack_dev_server_client__.default : __webpack_dev_server_client__ : _clients_WebSocketClient_js__WEBPACK_IMPORTED_MODULE_0__["default"];
/* eslint-enable camelcase */

var retries = 0;
var maxRetries = 10; // Initialized client is exported so external consumers can utilize the same instance
// It is mutable to enforce singleton
// eslint-disable-next-line import/no-mutable-exports

var client = null;
/**
 * @param {string} url
 * @param {{ [handler: string]: (data?: any, params?: any) => any }} handlers
 * @param {number} [reconnect]
 */

var socket = function initSocket(url, handlers, reconnect) {
  client = new Client(url);
  client.onOpen(function () {
    retries = 0;

    if (typeof reconnect !== "undefined") {
      maxRetries = reconnect;
    }
  });
  client.onClose(function () {
    if (retries === 0) {
      handlers.close();
    } // Try to reconnect.


    client = null; // After 10 retries stop trying, to prevent logspam.

    if (retries < maxRetries) {
      // Exponentially increase timeout to reconnect.
      // Respectfully copied from the package `got`.
      // eslint-disable-next-line no-restricted-properties
      var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;
      retries += 1;
      _utils_log_js__WEBPACK_IMPORTED_MODULE_1__.log.info("Trying to reconnect...");
      setTimeout(function () {
        socket(url, handlers, reconnect);
      }, retryInMs);
    }
  });
  client.onMessage(
  /**
   * @param {any} data
   */
  function (data) {
    var message = JSON.parse(data);

    if (handlers[message.type]) {
      handlers[message.type](message.data, message.params);
    }
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (socket);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/createSocketURL.js":
/*!*************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/createSocketURL.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @param {{ protocol?: string, auth?: string, hostname?: string, port?: string, pathname?: string, search?: string, hash?: string, slashes?: boolean }} objURL
 * @returns {string}
 */
function format(objURL) {
  var protocol = objURL.protocol || "";

  if (protocol && protocol.substr(-1) !== ":") {
    protocol += ":";
  }

  var auth = objURL.auth || "";

  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ":");
    auth += "@";
  }

  var host = "";

  if (objURL.hostname) {
    host = auth + (objURL.hostname.indexOf(":") === -1 ? objURL.hostname : "[".concat(objURL.hostname, "]"));

    if (objURL.port) {
      host += ":".concat(objURL.port);
    }
  }

  var pathname = objURL.pathname || "";

  if (objURL.slashes) {
    host = "//".concat(host || "");

    if (pathname && pathname.charAt(0) !== "/") {
      pathname = "/".concat(pathname);
    }
  } else if (!host) {
    host = "";
  }

  var search = objURL.search || "";

  if (search && search.charAt(0) !== "?") {
    search = "?".concat(search);
  }

  var hash = objURL.hash || "";

  if (hash && hash.charAt(0) !== "#") {
    hash = "#".concat(hash);
  }

  pathname = pathname.replace(/[?#]/g,
  /**
   * @param {string} match
   * @returns {string}
   */
  function (match) {
    return encodeURIComponent(match);
  });
  search = search.replace("#", "%23");
  return "".concat(protocol).concat(host).concat(pathname).concat(search).concat(hash);
}
/**
 * @param {URL & { fromCurrentScript?: boolean }} parsedURL
 * @returns {string}
 */


function createSocketURL(parsedURL) {
  var hostname = parsedURL.hostname; // Node.js module parses it as `::`
  // `new URL(urlString, [baseURLString])` parses it as '[::]'

  var isInAddrAny = hostname === "0.0.0.0" || hostname === "::" || hostname === "[::]"; // why do we need this check?
  // hostname n/a for file protocol (example, when using electron, ionic)
  // see: https://github.com/webpack/webpack-dev-server/pull/384

  if (isInAddrAny && self.location.hostname && self.location.protocol.indexOf("http") === 0) {
    hostname = self.location.hostname;
  }

  var socketURLProtocol = parsedURL.protocol || self.location.protocol; // When https is used in the app, secure web sockets are always necessary because the browser doesn't accept non-secure web sockets.

  if (socketURLProtocol === "auto:" || hostname && isInAddrAny && self.location.protocol === "https:") {
    socketURLProtocol = self.location.protocol;
  }

  socketURLProtocol = socketURLProtocol.replace(/^(?:http|.+-extension|file)/i, "ws");
  var socketURLAuth = ""; // `new URL(urlString, [baseURLstring])` doesn't have `auth` property
  // Parse authentication credentials in case we need them

  if (parsedURL.username) {
    socketURLAuth = parsedURL.username; // Since HTTP basic authentication does not allow empty username,
    // we only include password if the username is not empty.

    if (parsedURL.password) {
      // Result: <username>:<password>
      socketURLAuth = socketURLAuth.concat(":", parsedURL.password);
    }
  } // In case the host is a raw IPv6 address, it can be enclosed in
  // the brackets as the brackets are needed in the final URL string.
  // Need to remove those as url.format blindly adds its own set of brackets
  // if the host string contains colons. That would lead to non-working
  // double brackets (e.g. [[::]]) host
  //
  // All of these web socket url params are optionally passed in through resourceQuery,
  // so we need to fall back to the default if they are not provided


  var socketURLHostname = (hostname || self.location.hostname || "localhost").replace(/^\[(.*)\]$/, "$1");
  var socketURLPort = parsedURL.port;

  if (!socketURLPort || socketURLPort === "0") {
    socketURLPort = self.location.port;
  } // If path is provided it'll be passed in via the resourceQuery as a
  // query param so it has to be parsed out of the querystring in order for the
  // client to open the socket to the correct location.


  var socketURLPathname = "/ws";

  if (parsedURL.pathname && !parsedURL.fromCurrentScript) {
    socketURLPathname = parsedURL.pathname;
  }

  return format({
    protocol: socketURLProtocol,
    auth: socketURLAuth,
    hostname: socketURLHostname,
    port: socketURLPort,
    pathname: socketURLPathname,
    slashes: true
  });
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createSocketURL);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":
/*!********************************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * @returns {string}
 */
function getCurrentScriptSource() {
  // `document.currentScript` is the most accurate way to find the current script,
  // but is not supported in all browsers.
  if (document.currentScript) {
    return document.currentScript.getAttribute("src");
  } // Fallback to getting all scripts running in the document.


  var scriptElements = document.scripts || [];
  var scriptElementsWithSrc = Array.prototype.filter.call(scriptElements, function (element) {
    return element.getAttribute("src");
  });

  if (scriptElementsWithSrc.length > 0) {
    var currentScript = scriptElementsWithSrc[scriptElementsWithSrc.length - 1];
    return currentScript.getAttribute("src");
  } // Fail as there was no script to use.


  throw new Error("[webpack-dev-server] Failed to get current script source.");
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getCurrentScriptSource);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/log.js":
/*!*************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/log.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "log": () => (/* binding */ log),
/* harmony export */   "logEnabledFeatures": () => (/* binding */ logEnabledFeatures),
/* harmony export */   "setLogLevel": () => (/* binding */ setLogLevel)
/* harmony export */ });
/* harmony import */ var _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/logger/index.js */ "./node_modules/webpack-dev-server/client/modules/logger/index.js");
/* harmony import */ var _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0__);
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }


var name = "webpack-dev-server"; // default level is set on the client side, so it does not need
// to be set by the CLI or API

var defaultLevel = "info"; // options new options, merge with old options

/**
 * @param {false | true | "none" | "error" | "warn" | "info" | "log" | "verbose"} level
 * @returns {void}
 */

function setLogLevel(level) {
  _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default().configureDefaultLogger({
    level: level
  });
}

setLogLevel(defaultLevel);
var log = _modules_logger_index_js__WEBPACK_IMPORTED_MODULE_0___default().getLogger(name);

var logEnabledFeatures = function logEnabledFeatures(features) {
  var enabledFeatures = Object.entries(features);

  if (!features || enabledFeatures.length === 0) {
    return;
  }

  var logString = "Server started:"; // Server started: Hot Module Replacement enabled, Live Reloading enabled, Overlay disabled.

  for (var _i = 0, _Object$entries = Object.entries(features); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
        key = _Object$entries$_i[0],
        value = _Object$entries$_i[1];

    logString += " ".concat(key, " ").concat(value ? "enabled" : "disabled", ",");
  } // replace last comma with a period


  logString = logString.slice(0, -1).concat(".");
  log.info(logString);
};



/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/parseURL.js":
/*!******************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/parseURL.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _getCurrentScriptSource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getCurrentScriptSource.js */ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");

/**
 * @param {string} resourceQuery
 * @returns {{ [key: string]: string | boolean }}
 */

function parseURL(resourceQuery) {
  /** @type {{ [key: string]: string }} */
  var options = {};

  if (typeof resourceQuery === "string" && resourceQuery !== "") {
    var searchParams = resourceQuery.slice(1).split("&");

    for (var i = 0; i < searchParams.length; i++) {
      var pair = searchParams[i].split("=");
      options[pair[0]] = decodeURIComponent(pair[1]);
    }
  } else {
    // Else, get the url from the <script> this file was called with.
    var scriptSource = (0,_getCurrentScriptSource_js__WEBPACK_IMPORTED_MODULE_0__["default"])();
    var scriptSourceURL;

    try {
      // The placeholder `baseURL` with `window.location.href`,
      // is to allow parsing of path-relative or protocol-relative URLs,
      // and will have no effect if `scriptSource` is a fully valid URL.
      scriptSourceURL = new URL(scriptSource, self.location.href);
    } catch (error) {// URL parsing failed, do nothing.
      // We will still proceed to see if we can recover using `resourceQuery`
    }

    if (scriptSourceURL) {
      options = scriptSourceURL;
      options.fromCurrentScript = true;
    }
  }

  return options;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parseURL);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/reloadApp.js":
/*!*******************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/reloadApp.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webpack/hot/emitter.js */ "./node_modules/webpack/hot/emitter.js");
/* harmony import */ var webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./log.js */ "./node_modules/webpack-dev-server/client/utils/log.js");


/** @typedef {import("../index").Options} Options
/** @typedef {import("../index").Status} Status

/**
 * @param {Options} options
 * @param {Status} status
 */

function reloadApp(_ref, status) {
  var hot = _ref.hot,
      liveReload = _ref.liveReload;

  if (status.isUnloading) {
    return;
  }

  var currentHash = status.currentHash,
      previousHash = status.previousHash;
  var isInitial = currentHash.indexOf(
  /** @type {string} */
  previousHash) >= 0;

  if (isInitial) {
    return;
  }
  /**
   * @param {Window} rootWindow
   * @param {number} intervalId
   */


  function applyReload(rootWindow, intervalId) {
    clearInterval(intervalId);
    _log_js__WEBPACK_IMPORTED_MODULE_1__.log.info("App updated. Reloading...");
    rootWindow.location.reload();
  }

  var search = self.location.search.toLowerCase();
  var allowToHot = search.indexOf("webpack-dev-server-hot=false") === -1;
  var allowToLiveReload = search.indexOf("webpack-dev-server-live-reload=false") === -1;

  if (hot && allowToHot) {
    _log_js__WEBPACK_IMPORTED_MODULE_1__.log.info("App hot update...");
    webpack_hot_emitter_js__WEBPACK_IMPORTED_MODULE_0___default().emit("webpackHotUpdate", status.currentHash);

    if (typeof self !== "undefined" && self.window) {
      // broadcast update to window
      self.postMessage("webpackHotUpdate".concat(status.currentHash), "*");
    }
  } // allow refreshing the page only if liveReload isn't disabled
  else if (liveReload && allowToLiveReload) {
    var rootWindow = self; // use parent window for reload (in case we're in an iframe with no valid src)

    var intervalId = self.setInterval(function () {
      if (rootWindow.location.protocol !== "about:") {
        // reload immediately if protocol is valid
        applyReload(rootWindow, intervalId);
      } else {
        rootWindow = rootWindow.parent;

        if (rootWindow.parent === rootWindow) {
          // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways
          applyReload(rootWindow, intervalId);
        }
      }
    });
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (reloadApp);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/sendMessage.js":
/*!*********************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/sendMessage.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* global __resourceQuery WorkerGlobalScope */
// Send messages to the outside, so plugins can consume it.

/**
 * @param {string} type
 * @param {any} [data]
 */
function sendMsg(type, data) {
  if (typeof self !== "undefined" && (typeof WorkerGlobalScope === "undefined" || !(self instanceof WorkerGlobalScope))) {
    self.postMessage({
      type: "webpack".concat(type),
      data: data
    }, "*");
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sendMsg);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/stripAnsi.js":
/*!*******************************************************************!*\
  !*** ./node_modules/webpack-dev-server/client/utils/stripAnsi.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var ansiRegex = new RegExp(["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]))"].join("|"), "g");
/**
 *
 * Strip [ANSI escape codes](https://en.wikipedia.org/wiki/ANSI_escape_code) from a string.
 * Adapted from code originally released by Sindre Sorhus
 * Licensed the MIT License
 *
 * @param {string} string
 * @return {string}
 */

function stripAnsi(string) {
  if (typeof string !== "string") {
    throw new TypeError("Expected a `string`, got `".concat(typeof string, "`"));
  }

  return string.replace(ansiRegex, "");
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stripAnsi);

/***/ }),

/***/ "./node_modules/webpack/hot/dev-server.js":
/*!************************************************!*\
  !*** ./node_modules/webpack/hot/dev-server.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
/* globals __webpack_hash__ */
if (true) {
	var lastHash;
	var upToDate = function upToDate() {
		return lastHash.indexOf(__webpack_require__.h()) >= 0;
	};
	var log = __webpack_require__(/*! ./log */ "./node_modules/webpack/hot/log.js");
	var check = function check() {
		module.hot
			.check(true)
			.then(function (updatedModules) {
				if (!updatedModules) {
					log("warning", "[HMR] Cannot find update. Need to do a full reload!");
					log(
						"warning",
						"[HMR] (Probably because of restarting the webpack-dev-server)"
					);
					window.location.reload();
					return;
				}

				if (!upToDate()) {
					check();
				}

				__webpack_require__(/*! ./log-apply-result */ "./node_modules/webpack/hot/log-apply-result.js")(updatedModules, updatedModules);

				if (upToDate()) {
					log("info", "[HMR] App is up to date.");
				}
			})
			.catch(function (err) {
				var status = module.hot.status();
				if (["abort", "fail"].indexOf(status) >= 0) {
					log(
						"warning",
						"[HMR] Cannot apply update. Need to do a full reload!"
					);
					log("warning", "[HMR] " + log.formatError(err));
					window.location.reload();
				} else {
					log("warning", "[HMR] Update failed: " + log.formatError(err));
				}
			});
	};
	var hotEmitter = __webpack_require__(/*! ./emitter */ "./node_modules/webpack/hot/emitter.js");
	hotEmitter.on("webpackHotUpdate", function (currentHash) {
		lastHash = currentHash;
		if (!upToDate() && module.hot.status() === "idle") {
			log("info", "[HMR] Checking for updates on the server...");
			check();
		}
	});
	log("info", "[HMR] Waiting for update signal from WDS...");
} else {}


/***/ }),

/***/ "./node_modules/webpack/hot/emitter.js":
/*!*********************************************!*\
  !*** ./node_modules/webpack/hot/emitter.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var EventEmitter = __webpack_require__(/*! events */ "./node_modules/events/events.js");
module.exports = new EventEmitter();


/***/ }),

/***/ "./node_modules/webpack/hot/log-apply-result.js":
/*!******************************************************!*\
  !*** ./node_modules/webpack/hot/log-apply-result.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
module.exports = function (updatedModules, renewedModules) {
	var unacceptedModules = updatedModules.filter(function (moduleId) {
		return renewedModules && renewedModules.indexOf(moduleId) < 0;
	});
	var log = __webpack_require__(/*! ./log */ "./node_modules/webpack/hot/log.js");

	if (unacceptedModules.length > 0) {
		log(
			"warning",
			"[HMR] The following modules couldn't be hot updated: (They would need a full reload!)"
		);
		unacceptedModules.forEach(function (moduleId) {
			log("warning", "[HMR]  - " + moduleId);
		});
	}

	if (!renewedModules || renewedModules.length === 0) {
		log("info", "[HMR] Nothing hot updated.");
	} else {
		log("info", "[HMR] Updated modules:");
		renewedModules.forEach(function (moduleId) {
			if (typeof moduleId === "string" && moduleId.indexOf("!") !== -1) {
				var parts = moduleId.split("!");
				log.groupCollapsed("info", "[HMR]  - " + parts.pop());
				log("info", "[HMR]  - " + moduleId);
				log.groupEnd("info");
			} else {
				log("info", "[HMR]  - " + moduleId);
			}
		});
		var numberIds = renewedModules.every(function (moduleId) {
			return typeof moduleId === "number";
		});
		if (numberIds)
			log(
				"info",
				'[HMR] Consider using the optimization.moduleIds: "named" for module names.'
			);
	}
};


/***/ }),

/***/ "./node_modules/webpack/hot/log.js":
/*!*****************************************!*\
  !*** ./node_modules/webpack/hot/log.js ***!
  \*****************************************/
/***/ ((module) => {

var logLevel = "info";

function dummy() {}

function shouldLog(level) {
	var shouldLog =
		(logLevel === "info" && level === "info") ||
		(["info", "warning"].indexOf(logLevel) >= 0 && level === "warning") ||
		(["info", "warning", "error"].indexOf(logLevel) >= 0 && level === "error");
	return shouldLog;
}

function logGroup(logFn) {
	return function (level, msg) {
		if (shouldLog(level)) {
			logFn(msg);
		}
	};
}

module.exports = function (level, msg) {
	if (shouldLog(level)) {
		if (level === "info") {
			console.log(msg);
		} else if (level === "warning") {
			console.warn(msg);
		} else if (level === "error") {
			console.error(msg);
		}
	}
};

/* eslint-disable node/no-unsupported-features/node-builtins */
var group = console.group || dummy;
var groupCollapsed = console.groupCollapsed || dummy;
var groupEnd = console.groupEnd || dummy;
/* eslint-enable node/no-unsupported-features/node-builtins */

module.exports.group = logGroup(group);

module.exports.groupCollapsed = logGroup(groupCollapsed);

module.exports.groupEnd = logGroup(groupEnd);

module.exports.setLogLevel = function (level) {
	logLevel = level;
};

module.exports.formatError = function (err) {
	var message = err.message;
	var stack = err.stack;
	if (!stack) {
		return message;
	} else if (stack.indexOf(message) < 0) {
		return message + "\n" + stack;
	} else {
		return stack;
	}
};


/***/ }),

/***/ "./src/fonts/Big_Shoulders_Stencil_Text/static/BigShouldersStencilText-Black.ttf":
/*!***************************************************************************************!*\
  !*** ./src/fonts/Big_Shoulders_Stencil_Text/static/BigShouldersStencilText-Black.ttf ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "72dde6ddc94be7176cc7.ttf";

/***/ }),

/***/ "./src/fonts/Big_Shoulders_Stencil_Text/static/BigShouldersStencilText-Light.ttf":
/*!***************************************************************************************!*\
  !*** ./src/fonts/Big_Shoulders_Stencil_Text/static/BigShouldersStencilText-Light.ttf ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "07ba9842feeea2d895b8.ttf";

/***/ }),

/***/ "./src/fonts/DotGothic16/DotGothic16-Regular.ttf":
/*!*******************************************************!*\
  !*** ./src/fonts/DotGothic16/DotGothic16-Regular.ttf ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "7317ef6fed091a7e2f39.ttf";

/***/ }),

/***/ "./src/fonts/Open_Sans/static/OpenSans/OpenSans-Bold.ttf":
/*!***************************************************************!*\
  !*** ./src/fonts/Open_Sans/static/OpenSans/OpenSans-Bold.ttf ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "6e27168fc8a5a200a026.ttf";

/***/ }),

/***/ "./src/fonts/Open_Sans/static/OpenSans/OpenSans-ExtraBold.ttf":
/*!********************************************************************!*\
  !*** ./src/fonts/Open_Sans/static/OpenSans/OpenSans-ExtraBold.ttf ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "312244ca5ea57843f749.ttf";

/***/ }),

/***/ "./src/fonts/Open_Sans/static/OpenSans/OpenSans-Italic.ttf":
/*!*****************************************************************!*\
  !*** ./src/fonts/Open_Sans/static/OpenSans/OpenSans-Italic.ttf ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "79c81eb67c8c53b33a29.ttf";

/***/ }),

/***/ "./src/fonts/Open_Sans/static/OpenSans/OpenSans-SemiBold.ttf":
/*!*******************************************************************!*\
  !*** ./src/fonts/Open_Sans/static/OpenSans/OpenSans-SemiBold.ttf ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "d7261533b9a545ddc769.ttf";

/***/ }),

/***/ "./src/fonts/Open_Sans/static/OpenSans_Condensed/OpenSans_Condensed-ExtraBold.ttf":
/*!****************************************************************************************!*\
  !*** ./src/fonts/Open_Sans/static/OpenSans_Condensed/OpenSans_Condensed-ExtraBold.ttf ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "cde0ad8b7a7f090b853b.ttf";

/***/ }),

/***/ "./src/fonts/Rubik_Maze/RubikMaze-Regular.ttf":
/*!****************************************************!*\
  !*** ./src/fonts/Rubik_Maze/RubikMaze-Regular.ttf ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "273830be2225851792ad.ttf";

/***/ }),

/***/ "./src/fonts/Stardos_Stencil/StardosStencil-Bold.ttf":
/*!***********************************************************!*\
  !*** ./src/fonts/Stardos_Stencil/StardosStencil-Bold.ttf ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "1f0aada097920b373758.ttf";

/***/ }),

/***/ "./src/fonts/Stardos_Stencil/StardosStencil-Regular.ttf":
/*!**************************************************************!*\
  !*** ./src/fonts/Stardos_Stencil/StardosStencil-Regular.ttf ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "653b33500cc1e43b6fa2.ttf";

/***/ }),

/***/ "./src/fonts/Webdings.ttf":
/*!********************************!*\
  !*** ./src/fonts/Webdings.ttf ***!
  \********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "a7bc931eca6b75e1a22f.ttf";

/***/ }),

/***/ "./src/fonts/Zilla_Slab_Highlight/ZillaSlabHighlight-Bold.ttf":
/*!********************************************************************!*\
  !*** ./src/fonts/Zilla_Slab_Highlight/ZillaSlabHighlight-Bold.ttf ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "dc823ee5ce4aa87aba84.ttf";

/***/ }),

/***/ "./src/fonts/Zilla_Slab_Highlight/ZillaSlabHighlight-Regular.ttf":
/*!***********************************************************************!*\
  !*** ./src/fonts/Zilla_Slab_Highlight/ZillaSlabHighlight-Regular.ttf ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "d7dc940ed21fecf9261e.ttf";

/***/ }),

/***/ "./src/images/rustyMetalTest1.jpg":
/*!****************************************!*\
  !*** ./src/images/rustyMetalTest1.jpg ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "854c4bf940560f895d46.jpg";

/***/ }),

/***/ "./src/images/water1.jpg":
/*!*******************************!*\
  !*** ./src/images/water1.jpg ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "51e1130e25ba7a52e812.jpg";

/***/ }),

/***/ "./src/images/water2.jpg":
/*!*******************************!*\
  !*** ./src/images/water2.jpg ***!
  \*******************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "51e1130e25ba7a52e812.jpg";

/***/ }),

/***/ "./src/DOMinteractionModule.js":
/*!*************************************!*\
  !*** ./src/DOMinteractionModule.js ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "firstInfoAreaOneP": () => (/* binding */ firstInfoAreaOneP),
/* harmony export */   "firstInfoAreaP": () => (/* binding */ firstInfoAreaP),
/* harmony export */   "publicAddClassToElement": () => (/* binding */ publicAddClassToElement),
/* harmony export */   "publicAddClassToElementUsingRef": () => (/* binding */ publicAddClassToElementUsingRef),
/* harmony export */   "publicBattleOver": () => (/* binding */ publicBattleOver),
/* harmony export */   "publicChangeMessageText": () => (/* binding */ publicChangeMessageText),
/* harmony export */   "publicChangeMessageTextDelay": () => (/* binding */ publicChangeMessageTextDelay),
/* harmony export */   "publicDisableEnemySquares": () => (/* binding */ publicDisableEnemySquares),
/* harmony export */   "publicDisableWhiteSqs": () => (/* binding */ publicDisableWhiteSqs),
/* harmony export */   "publicEnableEnemySquares": () => (/* binding */ publicEnableEnemySquares),
/* harmony export */   "publicGetFirstInfoAreaP": () => (/* binding */ publicGetFirstInfoAreaP),
/* harmony export */   "publicGetGameOverTextP": () => (/* binding */ publicGetGameOverTextP),
/* harmony export */   "publicGetMessageText": () => (/* binding */ publicGetMessageText),
/* harmony export */   "publicMakeGameOverBoxAppear": () => (/* binding */ publicMakeGameOverBoxAppear),
/* harmony export */   "publicMakeGameOverBoxDisappear": () => (/* binding */ publicMakeGameOverBoxDisappear),
/* harmony export */   "publicMessageFadeInOut": () => (/* binding */ publicMessageFadeInOut),
/* harmony export */   "publicRemoveClassFromElement": () => (/* binding */ publicRemoveClassFromElement),
/* harmony export */   "publicRemoveClassFromElementUsingRef": () => (/* binding */ publicRemoveClassFromElementUsingRef),
/* harmony export */   "publicSetGameOverText": () => (/* binding */ publicSetGameOverText),
/* harmony export */   "publicShowScreenMessage": () => (/* binding */ publicShowScreenMessage),
/* harmony export */   "publicShowShipsPlace": () => (/* binding */ publicShowShipsPlace),
/* harmony export */   "resetButton": () => (/* binding */ resetButton)
/* harmony export */ });
/* harmony import */ var _styles_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles.css */ "./src/styles.css");
/* harmony import */ var _images_rustyMetalTest1_jpg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./images/rustyMetalTest1.jpg */ "./src/images/rustyMetalTest1.jpg");
/* harmony import */ var _images_water1_jpg__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./images/water1.jpg */ "./src/images/water1.jpg");
/* harmony import */ var _images_water2_jpg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./images/water2.jpg */ "./src/images/water2.jpg");
/* harmony import */ var _gameModule_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gameModule.js */ "./src/gameModule.js");
/* harmony import */ var _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./gameboardModule.js */ "./src/gameboardModule.js");
/* harmony import */ var _playerModule_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./playerModule.js */ "./src/playerModule.js");
/* harmony import */ var _utilityModule_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utilityModule.js */ "./src/utilityModule.js");
// gameModule.js is the entry file for webpack
// For webpack to be able to bundle imagesand fonts

 // import backGrImage from './images/background.jpg';


 // ES6:




 // Set vars
// TESTING
// let testImageBox = document.querySelector('.testImageBox')

var testCoords; // END // TESTING
// This div that encloses everything:

var realEnclDivClass = document.querySelector('.realEnclDivClass'); // The alert box that shows only on game over:

var gameOverBox = document.querySelector('.gameOverBox'); // The <p> for the text that appeas in the alert box above:

var gameOverText = document.querySelector('.gameOverText'); // The div that encloses almost everything 
// but is a child of div realEnclDivClass:

var enclDivClass = document.querySelector('.enclDivClass'); // Now two divs of class containerOne. EAch contains
// a div that is the grid of 100 squares and the waters
// image. One is for home, one for enemy waters:

var hoContOne = document.getElementById('hoContOne');
var enContOne = document.getElementById('enContOne'); // Now vars to reference each div that encloses 
// a div that contains the 100 squares. These divs will
// also have as a child the water image

var homeWatersEncloseDiv = document.querySelector('#hoWEnclDiv');
var enemyWatersEncloseDiv = document.querySelector('#enWEnclDiv'); // The div that contains the home waters

var seasEnclosingDiv = document.querySelector('.seasEnclosingDiv'); // The div that contains the enemy waters

var enemyWatersDiv = document.querySelector('.enemyWatersDiv'); // For webpack to be able to bundle images 
// you have to create a new Image object
// and set its src attrib to the imported
// image (see lines at top of page that go, eg,
// import backGrImage from './images/background.jpg';)
// For the rust background image:

var myBackGrImage = new Image(); // For the water background image
// for the divs that contain home and
// enemy waters: 
// image for home waters:

var myWater1 = new Image(); // image for enemy waters:  

var myWater2 = new Image();
myBackGrImage.src = _images_rustyMetalTest1_jpg__WEBPACK_IMPORTED_MODULE_1__;
realEnclDivClass.appendChild(myBackGrImage);
myWater1.src = _images_water1_jpg__WEBPACK_IMPORTED_MODULE_2__;
myWater2.src = _images_water2_jpg__WEBPACK_IMPORTED_MODULE_3__;
hoContOne.appendChild(myWater1);
enContOne.appendChild(myWater2); // The <p> element in the 1st info area beneath 
// the big "Battleships" text

var firstInfoAreaP = document.getElementById('firstInfoAreaP'); // The <p> element in the 2nd info area beneath 
// the big "Battleships" text

var firstInfoAreaOneP = document.getElementById('firstInfoAreaOneP'); // NO LONGER USED
// The <p> that is the message text 
// in the info area top right:
// let messageText = document.getElementById('messageText');
// END NO LONGER USED
// The div that contains the areas that display the statuses of human 
// and ai ships:

var shipsStatusesEncloseDiv = document.querySelector('#shipsStatusesEncloseDiv'); // The div that contains "YOUR SHIPS"
// and "patrolBoat ...", etc

var yourShipsCont = document.querySelector('#yourShipsCont'); // The div that contains "ENEMY SHIPS"
// and "patrolBoat ...", etc

var aiShipsCont = document.querySelector('#aiShipsCont'); // The Reset button (the one that lets the user cancel 
// the placing of his/her ships):

var resetButton = document.getElementById('resetButton'); // The start button:

var startButton = document.getElementById('startButton'); // The area that says "Place your vessels"

var shipsEnclosingDiv = document.querySelector('.shipsEnclosingDiv'); // the wtf is this?

var placementEnclDiv = document.querySelector('.placementEnclDiv'); // The text of the Start button:

var largeButton1Text = document.querySelector('.largeButton1Text'); // The <p> for text "Place your vessels":

var shipsP = document.querySelector('.shipsP'); // The <p> for text "patrolBoat (2 squares)" eg:

var vesselsTexts = document.querySelectorAll('.vesselsText'); // All radio buttons:

var rButts = document.querySelectorAll('.rButt'); // All radio-button labels:

var rbLabels = document.querySelectorAll('.rbLabel'); // All small blue buttons:

var smallButtons = document.querySelectorAll('.smallButton'); // Also all small blue buttons:

var allBlueButtons = document.querySelectorAll('.vesselsTextDiv > button'); // The ids for the <p>s that read, eg, 'sub (3 squares)'

var patrolBoatText = document.querySelector('#patrolBoatText');
var subText = document.querySelector('#subText');
var destroyerText = document.querySelector('#destroyerText');
var battleshipText = document.querySelector('#battleshipText');
var carrierText = document.querySelector('#carrierText'); // The nodelist for the white squares of home waters:

var homeGridSquares = document.querySelectorAll('.homeWatersDiv > div'); // The nodelist for the white squares of home waters:

var enemyGridSquares = document.querySelectorAll('.enemyWatersDiv >div'); // All <p>s in shipsTextContainerOne:

var humanShipsStatusPs = document.querySelector('.shipsTextContainerOne p'); // All <p>s in shipsTextContainerTwo:

var aiShipsStatusPs = document.querySelector('.shipsTextContainerTwo p'); // The divs that contain the down arrows:

var downArrowDiv1id = document.querySelector('#downArrowDiv1id');
var downArrowDiv2id = document.querySelector('#downArrowDiv2id');
var downArrowDiv3id = document.querySelector('#downArrowDiv3id');
var downArrowDiv4id = document.querySelector('#downArrowDiv4id'); // The <p>s for the Webdings font's '6' character that is a down arrow:

var downArrow1p = document.querySelector('#downArrow1p');
var downArrow2p = document.querySelector('#downArrow2p');
var downArrow3p = document.querySelector('#downArrow3p');
var downArrow4p = document.querySelector('#downArrow4p'); // The <p>s on the ai side of the display board 
// (the <p>s that read either "Afloat" or "SUNK!"):

var aiPB = document.querySelector('#aiPB');
var aiSU = document.querySelector('#aiSU');
var aiBA = document.querySelector('#aiBA');
var aiDE = document.querySelector('#aiDE');
var aiCA = document.querySelector('#aiCA'); // The <p>s on the You side of the display board 
// (the <p>s that read either "Afloat" or "SUNK!"):

var youPB = document.querySelector('#youPB');
var youSU = document.querySelector('#youSU');
var youBA = document.querySelector('#youBA');
var youDE = document.querySelector('#youDE');
var youCA = document.querySelector('#youCA'); //----------
// FOR TESTING
// let myTestButton = document.querySelector('.testButton')
// The click event handler for testButton:
// myTestButton.addEventListener('click', testHandlerOne)                                  

function testHandlerOne() {
  console.log("You clicked and event handler testHandlerOne ran");
  firstInfoAreaP.className = '';
  firstInfoAreaP.innerHTML = "Message to flash here";
  addClassToElementUsingRef(firstInfoAreaP, 'messageTextflash');
} // IMPORTANT!!!!
// MAKE NOTE IN GENERAL FINDINGS that 
// if the following line is written before 
// the declaration of testHandlerOne 
// nothing happens on clicking of the 
// button myTestButton!!!!
// END FOR TESTING
// Put this fn in with private fns:
// An fn to show an alert box for some 
// period of time


var showAlert = function showAlert(text) {
  alertBoxText.innerHTML = text;
  alertBox.style.visibility = 'visible';
  setTimeout(function () {
    alertBox.style.visibility = 'hidden';
  }, 500);
}; // An array into which the handler for the click of a 
// small blue button puts references to the other 
// small buttons that have been used


var smallButtonsUsed = [];
var smallButtonsNotUsed = []; // PUBLIC METHODS
//=================
// Methods to deal with the Game over
// alert box and the <p> that is its child:

function publicMakeGameOverBoxAppear() {
  makeGameOverBoxAppear();
}

function publicMakeGameOverBoxDisappear() {
  makeGameOverBoxDisappear();
}

function publicSetGameOverText(text) {
  setGameOverText(text);
}

function publicGetGameOverTextP() {
  getGameOverTextP();
} // Some utlity methods


var publicAddClassToElementUsingRef = function publicAddClassToElementUsingRef(refArg, classNameString) {
  addClassToElementUsingRef(refArg, classNameString);
};

var publicRemoveClassFromElementUsingRef = function publicRemoveClassFromElementUsingRef(refArg, classNameString) {
  removeClassFromElementUsingRef(refArg, classNameString);
}; // NO LONGER USED
// An fn to get firstInfoAreaP, the reference 
// to the <p> element in the info area 
// underneath the big text "Battleships":


var publicGetMessageText = function publicGetMessageText() {
  return getMessageText();
}; // END NO LONGER USED
//--------
// An fn to get firstInfoAreaP, the reference 
// to the <p> element in the info area 
// underneath the big text "Battleships":


var publicGetFirstInfoAreaP = function publicGetFirstInfoAreaP() {
  return getFirstInfoAreaP();
}; //--------
// An fn to change the class and the text of 
// the <p> of the message.
// textArg is a message (a string) to display:
// classArg is 
// elementArg is a reference to an element


var publicChangeMessageText = function publicChangeMessageText(textArg, classArg, elementArg) {
  changeMessageText(textArg, classArg, elementArg);
}; // Now an fn just like the one above but 
// including a delay for which to hold 
// up all code:


var publicChangeMessageTextDelay = function publicChangeMessageTextDelay(textArg, classArg, elementArg, delay) {
  changeMessageTextDelay(textArg, classArg, elementArg, delay);
}; //-------
// An fn that sets the message text and makes it fade in an out:


function publicMessageFadeInOut(textArg, classArg, pElement) {
  messageFadeInOut(textArg, classArg, pElement);
} // Disable and enable enemy squares


var publicDisableEnemySquares = function publicDisableEnemySquares() {
  disableEnemySquares();
};

var publicEnableEnemySquares = function publicEnableEnemySquares() {
  enableEnemySquares();
}; //----
// fns to add and remove a class to/from an element:


var publicAddClassToElement = function publicAddClassToElement(selString, classNameStr) {
  addClassToElement(selString, classNameStr);
}; // end publicAddClassToElement


var publicRemoveClassFromElement = function publicRemoveClassFromElement(selString, classNameStr) {
  removeClassFromElement(selString, classNameStr);
}; // end publicRemoveClassFromElement
//----                                   
// An fn to disable all home white squares:


var publicDisableWhiteSqs = function publicDisableWhiteSqs() {
  disableWhiteSqs();
}; //-----
// An fn that will show a message on screen 
// to tell the human that it's his/her turn:


var publicShowScreenMessage = function publicShowScreenMessage() {
  showScreenMessage();
}; //---------------------------------------------------------------
// PRIVATE methods
// A method to get the ref to the <p>
// for the text in the Game over 
// alert box and a method to set the 
// innerHtML of the  <p> 


function setGameOverText(text) {
  gameOverText.innerHTML = text;
}

function getGameOverTextP() {
  return gameOverText;
} // A method to set the visibility of the 
// div that is the Game over alert box 
// to "hidden"


function makeGameOverBoxAppear() {
  gameOverBox.style.visibility = 'visible';
}

function makeGameOverBoxDisappear() {
  gameOverBox.style.visibility = 'hidden';
} //------
// NO LONGER USED
// An fn to get the reference to the <p> element
// messageText


var getMessageText = function getMessageText() {
  return messageText;
}; // END NO LONGER USED
//----
// An fn to get firstInfoAreaP, the reference 
// to the <p> element in the info area 
// underneath the big text "Battleships":


var getFirstInfoAreaP = function getFirstInfoAreaP() {
  return firstInfoAreaP;
}; // A method to change the text in the message area.
// This fn removes all classes from the element and 
// then adds the class passed in.
// This fn takes two args:
// a) a string to set the innerHTML of the <p> that
// is the message text in the info area top right
// b) the class to which to set the <p>: choice is 
// messageTextNormal (for eg, "Your turn") and 
// messageTextImportant (for, eg, "Game over! AI wins!").
// Must be a string
// c) var pElement that is a ref to the element to target


var changeMessageText = function changeMessageText(textArg, classArg, pElement) {
  pElement.innerHTML = textArg;
  pElement.className = ''; // pElement.removeAttribute('class');

  pElement.classList.add(classArg);
}; // end changeMessageText
// A method just like the one above but 
// it holds all code up for a given amount of time:


var changeMessageTextDelay = function changeMessageTextDelay(textArg, classArg, pElement, delay) {
  pElement.innerHTML = textArg;
  pElement.className = ''; // pElement.removeAttribute('class');

  pElement.classList.add(classArg);
  sleep(delay);
}; // end changeMessageTextDelay
// An fn taken from the internets
// that the fn above employs:
// An fn taken from the internets.
// This fn makes code wait for 
// an amount of time in milliseconds
// passed in as the argumnet.


function sleep(milliseconds) {
  var date = Date.now();
  var currentDate = null;

  do {
    currentDate = Date.now();
  } while (currentDate - date < milliseconds);
} //----
// An fn that sets the innerHTML of <p> of id firstInfoAreaP or firstInfoAreaOneP
// (ie the two message areas) and sets the <p>'s class to messageTextFadeInOut,
// then reomves it after 1s. Adding that class causes animation to run that 
// makes the message fade in flash briefly and fade out over 1s:


function messageFadeInOut(textArg, classArg, pElement) {
  pElement.innerHTML = textArg;
  pElement.classList.add(classArg);
  setTimeout(function () {
    pElement.innerHTML = '';
    pElement.removeAttribute('class');
  }, 1000);
} // Four utility methods:
// Two fns The first simply adds a class to an element,
// the second simply removes a class from an element. 
// For both pass in two args: one a string for a selector 
// for the element, the other a string for a class name


var addClassToElement = function addClassToElement(selString, classNameString) {
  document.querySelector(selString).classList.add(classNameString);
};

var removeClassFromElement = function removeClassFromElement(selString, classNameString) {
  document.querySelector(selString).classList.remove(classNameString);
}; // Two fns. The first simply to add a class to an element,
// the second simply to remove a class from an element. 
// For both pass in two args: one a ref to an element,
// the other a string for a class name


var addClassToElementUsingRef = function addClassToElementUsingRef(refArg, classNameString) {
  refArg.classList.add(classNameString);
};

var removeClassFromElementUsingRef = function removeClassFromElementUsingRef(refArg, classNameString) {
  refArg.classList.remove(classNameString);
}; // An fn that removes all classes from an element and gives
// the element a new class:


var removeAllClassesAddOne = function removeAllClassesAddOne(refArg, classNameString) {
  refArg.className = '';
  refArg.classList.add(classNameString);
}; // An fn that removes all classes from an element and gives
// the element many new classes.classNameStringArray is an array
// of strings of the names of classes:


var removeAllClassesAddMany = function removeAllClassesAddMany(refArg, classNameStringArray) {
  refArg.className = '';

  for (var i = 0; i < classNameStringArray.length; i++) {
    refArg.classList.add(classNameStringArray[i]);
  } // end for

}; //----
// A utility method to add a class to an element 
// after removing all classes first.
// Arg refToEl is a ref to the element
// Arg classNameString is the class name


var giveElementSingleClass = function giveElementSingleClass(refToEl, classNameString) {
  // First remove all classes:
  refToEl.className = ''; // Now add the new class:

  refToEl.classList.add(classNameString);
}; // end giveElementSingleClass
//----
// An fn that will change the 
// opacity of the texts next to the 
// small purple buttons:


var changeTextOpacity = function changeTextOpacity(pOp, sOp, dOp, bOp, cOp) {
  patrolBoatText.style.opacity = pOp;
  subText.style.opacity = sOp;
  destroyerText.style.opacity = dOp;
  battleshipText.style.opacity = bOp;
  carrierText.style.opacity = cOp;
}; //---
// An fn that the click handler for the
// home waters white squares calls.
// Code calls this fn when the user is
// clicking on the start or end of a ship
// that he/she wants to place on the board.
// This fn must react to the user's click 
// of two squares in succession and in that
// way draw a vessel on the home-waters grid:
// This fn takes five args:
// i)    a string for the type of boat
// ii)   startVar ('start' or 'end', meaning the user clicked on
//       a square that he/she wants to be the start/end of
//       a boat )
// iii)  the coords of the square clicked on
//       eg [5,9]
// iv)   the array of squares already grey
// v)    the square div
// This fn must:
// 1) determine whether the user has clicked 
// on the start of a vessel or the end
// 2) If start of vessel check that the square 
// is not already grey (by looking for its coords
// in GB human object array umanShipUsedCoords). If NOT 
// previously used colour the square grey and set 
// startVar to 'end'
// 3) Then when the user clicks on another square
// this fn must determine whether the square is 
// legal and, if so, that the boat this fn would
// create would not cross an existing boat.


var dealWithSquareClick = function dealWithSquareClick(boat, startVar, sqCoords, usedCoordsArray, element) {
  var potentialShipArray = [];
  var shipArray;
  var usedCoordsArr = usedCoordsArray;
  var sqDiv;
  var endPoints = [];
  var x;
  var y;
  var xString;
  var yString;
  var queryString;
  var xStartStr;
  var yStartStr;
  var startSquare;
  var squareElement;
  var tempSquare;
  var tempStartVar = _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicGetShipStartVar();
  var tempShip;
  var tempPlayerShips;
  var posObjPropName; // 1):         

  if (startVar === 'start') {
    // If the user clicked a 
    // square for the start of a ship (startVar is a 
    // humanGameboard var initialised to 'start'):
    // 2):
    // If the user has NOT previously used the square:
    if (!_utilityModule_js__WEBPACK_IMPORTED_MODULE_7__.isArrInArray(sqCoords, usedCoordsArr)) {
      // Put the square coords in the array for previously
      // used squares:
      usedCoordsArr.push(sqCoords); // set startVar to 'end':

      _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicSetShipStartVar('end'); // Colour the square grey:
      // element.style.backgroundColor = 'gray'

      element.classList.remove("homeGridSquare");
      element.classList.add("homeShipSquare");
    } else {
      // The user HAS already clicked the square:
      // Show error alert message onscreen
      console.log("This square already taken. Start again");
    } // end inner if-else

  } else {
    // User has clicked a square he/she 
    // wants to be the end of a ship
    // 2):
    // If it's the end of a ship (startVar = 'end')
    // work out whether the square has NOT 
    // previously been used:
    if (!_utilityModule_js__WEBPACK_IMPORTED_MODULE_7__.isArrInArray(sqCoords, usedCoordsArr)) {
      // If it has NOT previously been used:
      // Determine whether the user has clicked
      // a square that is one of the four legal squares 
      // surrounding the start square: 
      endPoints = _utilityModule_js__WEBPACK_IMPORTED_MODULE_7__.makeEndSquaresArray(boat, usedCoordsArr[usedCoordsArr.length - 1]);

      if (_utilityModule_js__WEBPACK_IMPORTED_MODULE_7__.isArrInArray(sqCoords, endPoints) // if clicked sq IS one of the four possible 
      // legal end squares (or points)
      ) {
        // If the square has NOT been used before and 
        // IS one of the four legal end squares
        // test whether the potential ship  will cross
        // an existing human ship:
        potentialShipArray = _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicMakeShipCoords(boat, usedCoordsArr[usedCoordsArr.length - 1], sqCoords);

        if (_gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicDoesCross(potentialShipArray, _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicGetExistingShipsCoords())) {
          // If the ship DOES cross show an alert and 
          // force the user to start again 
          // (ie click a square for the start of a ship again)   
          changeMessageText('Ships cannot cross each other', 'firstInfoAreaTextImportant', firstInfoAreaP); // Make the ship start square white: 

          tempSquare = usedCoordsArr.pop();
          xStartStr = "[data-x=\"".concat(tempSquare[0], "\"]");
          yStartStr = "[data-y=\"".concat(tempSquare[1], "\"]");
          startSquare = document.querySelector("".concat(xStartStr).concat(yStartStr));
          startSquare.classList.remove("homeShipSquare");
          startSquare.classList.add("homeGridSquare"); // startSquare.style.backgroundColor = "white"

          tempSquare = []; // Remove the ship start square's coords from 
          // the array of previously used coords:

          usedCoordsArr.pop();
          _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicSetShipStartVar('start');
        } else {
          // If it is a valid end ssquare and it does NOT cross another ship 
          // Re-enable all small buttons:
          smallButtons.forEach(function (item) {
            item.style.pointerEvents = "auto";
          }); // end forEach
          // Now put potentialShipArray into array 
          // existingShipsCoords: 

          _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicGetExistingShipsCoords().push(potentialShipArray); // Make the ship object, store it in 
          // humanGameboard's playerShips array:

          _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicMakeAndStoreShip(boat); // Give the ship its coords. First get playerShips array
          // then get its last member and call that Ship instance's
          // method publicSetPosArray :

          tempPlayerShips = _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicGetPlayerShips();
          tempPlayerShips[tempPlayerShips.length - 1].publicSetPosArray(potentialShipArray); // Now need to put the ship into the correct Gameboard instance's 
          // positionObj (because that is what code in that Gameboard instance
          // looks at to determine whether the opponent's shot has scored a hit).
          // Get string for name of the ship:

          posObjPropName = tempPlayerShips[tempPlayerShips.length - 1].publicGetType(); // Set the positionObj property value:

          _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicSetPosObjProperty(posObjPropName, potentialShipArray); // Now clear the message in <p> referenced by var firstInfoAreaP:

          changeMessageText('... ... ... ', 'firstInfoAreaTextImportant', firstInfoAreaP); // Determine whether existingShipsCoords has five members.
          // If yes enable the start button and make it opaque and show an alert
          // for an interval. Also fade text "Place your ships" and RESET button,
          // Also indicate that all AI ships are afloat:

          if (_gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicGetExistingShipsCoords().length === 5) {
            startButton.style.opacity = '1';
            startButton.addEventListener('click', startTheGame);
            placementEnclDiv.style.opacity = '0.15'; // resetButton.style.opacity = '0.15'

            changeMessageText('You have placed all your ships. Now click the Start button', 'firstInfoAreaTextNormal', firstInfoAreaP); // Indicate that all AI ships are afloat:

            aiPB.innerHTML = "Afloat";
            aiSU.innerHTML = "Afloat";
            aiDE.innerHTML = "Afloat";
            aiBA.innerHTML = "Afloat";
            aiCA.innerHTML = "Afloat";
          } // and put the coords of potentialShipArray 
          // into usedCoordsArr and colour the ship's
          // squares gray:


          for (var i = 0; i < potentialShipArray.length; i++) {
            usedCoordsArr.push(potentialShipArray[i]); // Colour the squares gray:

            x = potentialShipArray[i][0];
            y = potentialShipArray[i][1];
            queryString = "[data-x=\"".concat(x, "\"][data-y=\"").concat(y, "\"]"); // from internets:
            // document.querySelector('[data-point-id="7febe088"][data-period="current"]')

            squareElement = document.querySelector(queryString);
            squareElement.classList.remove("homeGridSquare");
            squareElement.classList.add("homeShipSquare");
          } // end for
          // Reset all texts under "Place your vessels" to opacity 0.2:


          changeTextOpacity(0.2, 0.2, 0.2, 0.2, 0.2); // reset var shipStartVar to 'start'

          _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicSetShipStartVar('start'); // Prevent the user's click of home white squares from doing 
          // anything until he/she clicks another purple button, ie 
          // deactivate the squares:

          disableWhiteSqs(); // Now make opaque those divs (and hence their children)
          // that contain "YOUR SHIPS", etc

          shipsStatusesEncloseDiv.style.opacity = '1'; // Now set the innerHTML of appropriate <p> 
          // in the display area to "Afloat" and make
          // the <p> opaque:

          switch (boat) {
            case 'patrolBoat':
              youPB.innerHTML = "Afloat";
              break;

            case 'sub':
              youSU.innerHTML = "Afloat";
              break;

            case 'destroyer':
              youDE.innerHTML = "Afloat";
              break;

            case 'battleship':
              youBA.innerHTML = "Afloat";
              break;

            case 'carrier':
              youCA.innerHTML = "Afloat";
              break;

            default:
              break;
          }
        } // end If it is a valid end 
        // square and it does NOT cross another ship 

      } else {
        // The square is NOT valid as an end point,
        // so show warning for a specific interval.
        changeMessageText("That square is not a valid end point. Start again.", 'firstInfoAreaOneTextImportant', firstInfoAreaOneP); // Now remove the warning:

        setTimeout(function () {
          changeMessageText("", 'firstInfoAreaOneTextNormal', firstInfoAreaOneP);
        }, 2000); // Make the start square white:

        tempSquare = usedCoordsArr.pop();
        xStartStr = "[data-x=\"".concat(tempSquare[0], "\"]");
        yStartStr = "[data-y=\"".concat(tempSquare[1], "\"]");
        startSquare = document.querySelector("".concat(xStartStr).concat(yStartStr));
        startSquare.classList.remove("homeShipSquare");
        startSquare.classList.add("homeGridSquare"); // Remove the start square from the array of previously used squares:

        usedCoordsArr.splice(usedCoordsArr.length - 1, 1); // Change startVar to 'start':

        _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicSetShipStartVar('start'); // Fade and make inactive the Restart button: 
      } // end if square is NOT valid as an end point

    } else {
      // If it's an 'end' square that HAS 
      // already been been used for another ship:
      // Show an alert message:
      console.log("This end square has already been used"); // Make the start square white (WORKS).
      // Remove the start square from the array of previously used squares:

      tempSquare = usedCoordsArr.pop(); // Grab the salso removes end-sq coords from usedCoordsArr

      xStartStr = "[data-x=\"".concat(tempSquare[0], "\"]");
      yStartStr = "[data-y=\"".concat(tempSquare[1], "\"]");
      startSquare = document.querySelector("".concat(xStartStr).concat(yStartStr));
      startSquare.classList.add("homeGridSquare"); // startSquare.style.backgroundColor = "white"
      // Change startVar to 'start':

      _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicSetShipStartVar('start'); // Fade and make inactive the Restart button: 
    } // end if-else it's an 'end' square that has/not been used             

  } // end if-else

}; // end dealWithSquareClick
//----
// Thurs21July22
// DONT NEED THE FOLLOWING FN:
// The fn that makes various elements in 
// the area of the app that reads "Place
// your ships" opaque and active:


var showShipsPlace = function showShipsPlace() {
  // Make elements opaque/active:
  shipsP.style.opacity = 1;
  vesselsTexts.forEach(function (element) {
    element.style.opacity = 1;
  });
  rButts.forEach(function (element) {
    element.style.opacity = 1;
    element.disabled = false;
  });
  rbLabels.forEach(function (element) {
    element.style.opacity = 1;
  });
  smallButtons.forEach(function (element) {
    element.style.opacity = 1;
    element.disabled = false;
  });
}; //----
// An fn to change the text of the Start
// button to "Restart" and to change the 
// event listener to one that restarts 
// the app:


var changeStartButton = function changeStartButton() {
  startButton.removeEventListener("click", start);
  startButton.addEventListener("click", restart);
}; // An fn that is the event listener for 
// the Restart button. This fn must 
// 1) clear enemy ships
// 2) change the text of the Start button
//    to "Restart"


var restart = function restart() {
  // 1) 
  console.log('restart button clicked'); // 2)

  largeButton1Text.innerHTML = "Restart game";
}; //----
// An fn to show message onscreen to the effect
// "The battle is over! XXX wins":


var battleOver = function battleOver(winner) {// console.log(`Battle Over! ${winner} wins!`)
}; //----
// Public functions
//=================
// The fn that will make the area that 
// reads "Place your ships" opaque and 
// active


var publicShowShipsPlace = function publicShowShipsPlace() {
  showShipsPlace();
}; // An fn to show message onscreen to the effect
// "The battle is over! XXX wins":


var publicBattleOver = function publicBattleOver(winner) {
  battleOver(winner);
}; ////////////////////////////////////////////////////////////
// EVENT HANDLERS
//---------------
// The event handler for the click of
// the "Start" button (which will instead display "Restart"
// after user clicks it). This fn has to:
// 1) Determine whether the button reads "Start" or "Restart"
// If "Start" do 2) to 7) below.
// If "Restart" call fn 
// 2) Show an alert that says: "The ai has placed its ships.
// Fire the first shot by clicking in the enemy waters":
// 3) Change the text of the button 
// itself to "Restart"
// 4) Call the public start fn of the
// gameModule:
// 5) Enable all of the enemy squares (ie attach the 
//   click event handler to them all)
// 6) Fade and disable the RESET button
// 7) Set the new event listener for this button (which now
// reads "Restart")
// 8) Make all of the elements in the display area (ie the 
// div of class shipsStatusesEncloseDiv) opaque


var startTheGame = function startTheGame() {
  // 1):
  if (largeButton1Text.innerHTML === "Restart") {
    restartGame();
  } // end if "Restart"
  // 8):
  // shipsStatusesEncloseDiv.style.opacity = '1'


  if (largeButton1Text.innerHTML === "START") {
    // 7):
    resetButton.style.opacity = "0.15";
    resetButton.removeEventListener('click', restartPlacingShips); // 2) Show an alert box:

    changeMessageText("Fire the first shot by clicking in a square in enemy waters", 'firstInfoAreaOneTextImportant', firstInfoAreaP); // 3): 

    largeButton1Text.innerHTML = "Restart"; // 4)
    // 6): 
    // COMMENTED OUT wed10Aug22

    enableEnemySquares(); // COMMENTED OUT wed10Aug22

    /*
    // TESTING ADDED wed10Aug22
    testCoords = gameModImports.myCoordsMaker.incrementAndReturnCoords()
    console.log(`In startTheGame and testCoords is ${testCoords}`)
    gbImports.aiGameboard.publicReceiveAttack('human', testCoords)
    // END TESTING ADDED wed10Aug22
    */
    // 4)
    // console.log('Call publicStart function of gameModule')
    //    gbImports.publicStart()
  } // end if "start"        

}; // end fn start
//------
// The event handler for the "Restart" button
// (which had read "Start" until user had clicked it)
// and for the RESET button. The only difference is that 
// when the user clicks "Restart" a message pops up that 
// asks the user whether or not to start a new game.
// This handler must:
// 1) Make all home squares white (done)
// 2) Empty various arrays and objects in the Player instances.
//    Empty various arrays/objects in human and ai gameboard modules
//    by calling the Gameboard instances' reset method (done)
//    Do the same for the Player instances.
//    Call the aiGameboard instance's publicMakeAndStoreAllAIplayerShipCoords()
//    (to make the aiGameboard instance's randomly generated 
//    Ship instances and put them into aiGameboard instance's array playerShips).
//    Code must do this after it toasts playerShips in each
//    Gameboard instance (which it does above) (Done)
// 3) Make all enemy squares white (done)
// 5) Reset innerHTML of all <p>s in divs of classes 
//    shipsTextContainerTwo and shipsTextContainerOne
//    to "..." and set the class of each to shipStatusTextAfloat (done)
// 6) Fade divs that contain "YOUR SHIPS", etc and "ENEMY SHIPS"  etc
//    and all of the <p>s in those divs. Also set the innerHTML of 
//    the apropriate <p>s to "..."
// 7) Fade and disable the Start button (done)
// 8) Fade and disable the grids by fading div of class
//    seasEnclosingDiv and removing the event listeners
//    from home and enemy white squares (done)
// 9)  Fade Reset button and disable it. Make opaque text "Place your vessels".
// (done)
// 10) Put message in top message area that reads "Start by placing your vessels" 
// (done)
// 11) Make all smallButtons (the square blue ones, originally purple) 
//     opaque and blue again and re-attach their event listener (Done)
// 12) let gameModule know that the game has restarted
// 13) Change the text in the Game over box to "" and make the 
// box disappear
// 14) Give the divs that contain the down arrows and the "6" of each
//     <p> inside them the classes that make them flash 


var restartGame = function restartGame() {
  // 13)
  makeGameOverBoxDisappear(), setGameOverText(''); // 9):

  resetButton.style.opacity = '0.15';
  resetButton.removeEventListener('click', restartPlacingShips); // 7): 

  startButton.style.opacity = '0.15';
  startButton.removeEventListener('click', startTheGame); // 2):    

  _playerModule_js__WEBPACK_IMPORTED_MODULE_6__.aiPlayer.publicResetArrsAndObjs();
  _playerModule_js__WEBPACK_IMPORTED_MODULE_6__.aiPlayer.publicResetArrsAndObjs();
  _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicResetArrsAndObjs();
  _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.aiGameboard.publicResetArrsAndObjs(); // 8):

  seasEnclosingDiv.style.opacity = '0.15';
  disableEnemySquares();
  disableWhiteSqs(); // 1):
  // array.forEach(function(currentValue, index, arr), thisValue)

  homeGridSquares.forEach(function (currentValue) {
    removeAllClassesAddOne(currentValue, 'homeGridSquare');
  } // end callback
  ); // end forEach
  // 3):

  enemyGridSquares.forEach(function (currentValue) {
    removeAllClassesAddOne(currentValue, 'enemyGridSquare');
  } // end callback
  ); // end forEach
  // 6):

  shipsStatusesEncloseDiv.style.opacity = "0.17";
  youPB.innerHTML = "...";
  removeAllClassesAddOne(youPB, 'shipStatusTextAfloat');
  youSU.innerHTML = "...";
  removeAllClassesAddOne(youSU, 'shipStatusTextAfloat');
  youBA.innerHTML = "...";
  removeAllClassesAddOne(youBA, 'shipStatusTextAfloat');
  youDE.innerHTML = "...";
  removeAllClassesAddOne(youDE, 'shipStatusTextAfloat');
  youCA.innerHTML = "...";
  removeAllClassesAddOne(youCA, 'shipStatusTextAfloat');
  aiPB.innerHTML = "...";
  removeAllClassesAddOne(aiPB, 'shipStatusTextAfloat');
  aiSU.innerHTML = "...";
  removeAllClassesAddOne(aiSU, 'shipStatusTextAfloat');
  aiBA.innerHTML = "...";
  removeAllClassesAddOne(aiBA, 'shipStatusTextAfloat');
  aiDE.innerHTML = "...";
  removeAllClassesAddOne(aiDE, 'shipStatusTextAfloat');
  aiCA.innerHTML = "...";
  removeAllClassesAddOne(aiCA, 'shipStatusTextAfloat'); // 5):
  // Done above
  // 11):

  enableAllPurpButts();
  allBlueButtons.forEach(function (item) {
    removeAllClassesAddMany(item, ["smallButtonColour", "smallButton"]);
  }); // 10):

  changeMessageText('Begin by placing your vessels', 'firstInfoAreaTextNormal', firstInfoAreaP); // 14):
  // give the down arrow containing divs all of their classes:

  removeAllClassesAddMany(downArrowDiv1id, ["flashArrow1", "flashArrowContainer", "downArrowContainer", "downArrowDiv1"]);
  removeAllClassesAddMany(downArrowDiv2id, ["flashArrow2", "flashArrowContainer", "downArrowContainer", "downArrowDiv2"]);
  removeAllClassesAddMany(downArrowDiv3id, ["flashArrow3", "flashArrowContainer", "downArrowContainer", "downArrowDiv3"]);
  removeAllClassesAddMany(downArrowDiv4id, ["flashArrow4", "flashArrowContainer", "downArrowContainer", "downArrowDiv4"]); // give the <p>s whose innerHTML is a "6" the class that makes the "6" a down arrow:

  removeAllClassesAddOne(downArrow1p, 'webdingsText1');
  removeAllClassesAddOne(downArrow2p, 'webdingsText2');
  removeAllClassesAddOne(downArrow3p, 'webdingsText3');
  removeAllClassesAddOne(downArrow4p, 'webdingsText4');
}; // end restartGame
//------
// the click event handler to the enemy grid 
// squares. The handler responds to the user's 
// click of an enemy square (to attack an enemy
// ship).
// enemyGridSquares is the nodelist of enemy
// squares
// the anonymous function must 
// 1) get the coords of the square clicked on and 
// send them to aiGameboard fn publicReceiveAttack 
// 2) disable the enemy grid squares
// 3) Clear message <p> of class firstInfoAreaOneP
// (because it could show "xxxx")
// The event handler for the human 
// click of each enemy square:


var getSquareCoords = function getSquareCoords() {
  var x;
  var y;
  var sqCoords = []; // 3):

  changeMessageText('', 'firstInfoAreaTextNormal', firstInfoAreaP); // 2)

  disableEnemySquares(); // 1):

  x = parseInt(this.dataset.xe);
  y = parseInt(this.dataset.ye);
  sqCoords.push(x);
  sqCoords.push(y);
  _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.aiGameboard.publicReceiveAttack('human', sqCoords);
}; // end getSquareCoords
// Two fns related to the code immediately above:
// The first fn removes the event listener from 
// all enemy grid squares, the second attaches it:


var disableEnemySquares = function disableEnemySquares() {
  enemyGridSquares.forEach(function (element) {
    element.removeEventListener('click', getSquareCoords);
  });
};

var enableEnemySquares = function enableEnemySquares() {
  enemyGridSquares.forEach(function (element) {
    element.addEventListener('click', getSquareCoords);
  });
}; // FOR TESTING ONLY: // FOR TESTING ONLY: // FOR TESTING ONLY:


var makeHumanShotTESTING = function makeHumanShotTESTING(x, y) {
  var sqCoords = [];
  sqCoords.push(x);
  sqCoords.push(y);
  _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.aiGameboard.publicReceiveAttack('human', sqCoords);
}; // end getSquareCoords
// END FOR TESTING ONLY // END FOR TESTING ONLY // END FOR TESTING ONLY
// The event handler for the click of the small
// square blue (previously purple) buttons. 
// The user clicks these buttons to indicate which 
// ship he/she is placing.
// smallButtons is the
// nodelist of these buttons.
// The handler must:
// 1) Make the Reset button opaque and enable it.
// Give the button its click event handler (half done)
// 2) Call the fn that will set the message to 
// tell the user how to place a ship
// 3) Fade the text for all other vessels and make 
// opaque the vessel text next to the clicked 
// button (eg make opaque 'sub (3 squares)', 
// and fade the other four)
// 4) Set a var in the Gameboard object that 
// has a string value equal to the name of the ship
// the human player wants to place
// 5) activate home white squares (done)
// 6) make the purple button clicked inactive and faded
// (done)
// 7) set shipStartVar to 'start'
// 9) Make the grids opaque (by making their parent div of 
// class seasEnclosingDiv opaque) (done)
// 10) Put ref to this element in array smallButtonsUsed (Done)
// 11) Disable the small buttons that are NOT in array smallButtonsUsed
// (ie those that the user has NOT previously clicked) (Done)
// 12) Remove class flashArrowContainer and apply class
// invisibleArrowContainer to flashing arrows (downArrowDiv1/2/3)


var purpleButtonEvtHandl = function purpleButtonEvtHandl() {
  // 12:
  // Remove from each div that contains an arrow 
  // the class that makes the div flash:
  removeClassFromElementUsingRef(downArrowDiv1id, 'flashArrow1');
  addClassToElementUsingRef(downArrowDiv1id, 'invisibleArrowContainer');
  removeClassFromElementUsingRef(downArrowDiv2id, 'flashArrow2');
  addClassToElementUsingRef(downArrowDiv2id, 'invisibleArrowContainer');
  removeClassFromElementUsingRef(downArrowDiv3id, 'flashArrow3');
  addClassToElementUsingRef(downArrowDiv3id, 'invisibleArrowContainer');
  removeClassFromElementUsingRef(downArrowDiv4id, 'flashArrow4');
  addClassToElementUsingRef(downArrowDiv4id, 'invisibleArrowContainer'); // Remove from each <p> for the text that is the arrow 
  // the class that makes the arrow flash:

  removeClassFromElementUsingRef(downArrow1p, 'webdingsText1');
  removeClassFromElementUsingRef(downArrow2p, 'webdingsText2');
  removeClassFromElementUsingRef(downArrow3p, 'webdingsText3');
  removeClassFromElementUsingRef(downArrow4p, 'webdingsText4'); // 10):

  smallButtonsUsed.push(this); // 11): 

  smallButtonsNotUsed = [];
  smallButtons.forEach(function (currItem) {
    // If the button is NOT in array smallButtonsUsed
    // put it in smallButtonsNotUsed
    if (smallButtonsUsed.indexOf(currItem) === -1) {
      smallButtonsNotUsed.push(currItem);
    } // end if

  }); // end forEach
  // Now disable all the buttons in smallButtonsNotUsed:

  if (smallButtonsNotUsed.length > 0) {
    smallButtonsNotUsed.forEach(function (item) {
      item.style.pointerEvents = "none";
    }); // end forEach
  } // end if
  // 9):


  seasEnclosingDiv.style.opacity = 1; // 1): 

  resetButton.style.opacity = '1';
  resetButton.addEventListener('click', restartPlacingShips); // 5):

  enableWhiteSqs(); // 7)

  _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicSetShipStartVar('start'); // 2), 3) & 4):

  switch (this.id) {
    case 'patrolBoatButt':
      _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicSetCurrPlaceBoat('patrolBoat');
      changeTextOpacity(1, 0.2, 0.2, 0.2, 0.2);
      changeMessageText('To place the patrolboat click a square in the home waters then click an adjacent square', 'firstInfoAreaTextImportant', firstInfoAreaP);
      break;

    case 'subButt':
      _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicSetCurrPlaceBoat('sub');
      changeTextOpacity(0.2, 1, 0.2, 0.2, 0.2);
      changeMessageText('To place the submarine click a square in home waters then click one two squares away', 'firstInfoAreaTextImportant', firstInfoAreaP);
      break;

    case 'destroyerButt':
      _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicSetCurrPlaceBoat('destroyer');
      changeTextOpacity(0.2, 0.2, 1, 0.2, 0.2);
      changeMessageText('To place the destroyer click a square in home waters then click one two squares away', 'firstInfoAreaTextImportant', firstInfoAreaP);
      break;

    case 'battleshipButt':
      _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicSetCurrPlaceBoat('battleship');
      changeTextOpacity(0.2, 0.2, 0.2, 1, 0.2);
      changeMessageText('To place the battleship click a square in home waters then click one two squares away', 'firstInfoAreaTextImportant', firstInfoAreaP);
      break;

    case 'carrierButt':
      _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicSetCurrPlaceBoat('carrier');
      changeTextOpacity(0.2, 0.2, 0.2, 0.2, 1);
      changeMessageText('To place the carrier click a square in home waters then click one four squares away', 'firstInfoAreaTextImportant', firstInfoAreaP);
      break;

    default:
      break;
  } // end switch
  // 6):


  this.removeEventListener('click', purpleButtonEvtHandl); // remove blue colour (remove class smallButtonColour):

  removeClassFromElementUsingRef(this, 'smallButtonColour'); // make button grey, 0.05 opacity, without box shadow (add class smallButtonGreyed):

  addClassToElementUsingRef(this, 'smallButtonGreyed'); // NOTE: you have to have the following line. Simply changing 
  // the class of the elment to one with and opacity of 
  // 0.15 doesn't work because this element has two classes
  // and the default opacity of the first is 1, to which 
  // the browser looks, regardless of opacity specified in the 
  // second class:

  this.style.opacity = 0.25;
}; // end purpleButtonEvtHandl
// An fn to give each purple button the handler above
// (an IIFE at the end of this module calls this 
// function. it has to go at theend of this module because 
// the function has to be declared before code can call it!.
// Note that this fn also changes the colour of the 
// purple buttons back to purple and makes their opacity 1):


var enableAllPurpButts = function enableAllPurpButts() {
  // TESTING CODE ONLY
  // ENABLE ONLY ONE 3-SQUARE BOAT:
  // document.querySelector('#subButt').style.opacity = '1'
  // document.querySelector('#subButt').backgroundColor = '#6E088A'
  // document.querySelector('#subButt').addEventListener('click', purpleButtonEvtHandl)
  // END TESTING CODE ONLY
  smallButtons.forEach(function (element) {
    // removeClassToElementUsingRef = (refArg, classNameString)
    addClassToElementUsingRef(element, 'smallButtonColour');
    element.style.opacity = '1';
    element.addEventListener('click', purpleButtonEvtHandl);
  });
}; //--------
// Two private fns, one to enable all  
// squares of the home waters grid,
// one to disable them.
// Code calls the enabling fn when the 
// user clicks a small purple button:


var enableWhiteSqs = function enableWhiteSqs() {
  homeGridSquares.forEach(function (element) {
    element.addEventListener('click', homeWhiteSqsHandler);
  });
}; // end enableWhiteSqs


var disableWhiteSqs = function disableWhiteSqs() {
  homeGridSquares.forEach(function (element) {
    element.removeEventListener('click', homeWhiteSqsHandler);
  });
}; // end disableWhiteSqs
// Set the event handler for the click event of each 
// white square in the home waters grid (for when 
// the user is placing his/her ships). Remember 
// that homeGridSquares is the nodelist of all 
// of the white squares in the home waters grid.
// The handler must:
// 1) Determine whether the user's click is the 
// start of a ship or the end by polling a GB obj 
// var shipStartVar.
// 2) Determine which boat the user is generating 
// 3) Get the x and y coords of the square clicked on
// 4) Get the array of used coords
// 5) generate the array of four possible end points
// for the ship in question (some of which may 
// actually be outside the 10X10 square, which is fine)


homeGridSquares.forEach(function (element) {
  element.addEventListener('click', homeWhiteSqsHandler);
}); // end forEach
//------
// The click event handler for each
// home white square (obviously this 
// is for while the user is placing 
// his/her ships):

var homeWhiteSqsHandler = function homeWhiteSqsHandler() {
  var x;
  var y;
  var sqCoords = []; // 3): 

  x = parseInt(this.dataset.x);
  y = parseInt(this.dataset.y);
  sqCoords.push(x);
  sqCoords.push(y); // boat is a var that has value 'carrier' eg.
  // It represents the ship that the user is 
  // in the process of placing
  // 2):

  var boat = _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicGetCurrPlaceBoat(); // 1):
  // startVar has possible values 'start' and 'end'. This
  // lets code know whether the user has is about to click 
  // a square for the start or the end of a ship when the user 
  // is placing ships on the home waters.

  var startVar = _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicGetShipStartVar(); // the following array contains the coords of all ships that 
  // the user has already placed:

  var usedCoordsArray = _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicGetHumanShipUsedCoords();
  dealWithSquareClick(boat, startVar, sqCoords, usedCoordsArray, this);
}; // end homeWhiteSqsHandler
//-----------
// The event handler for the Reset button.
// This fn must:
// 1)  make all homesquares white
// 2)  remove event listener from each home white square
// 3)  empty arrays xxx and yyy
// 4)  set all purple buttons to purple and 
//     give them all the correct event handler
// 5)  fade all texts under "Place your ships"  
// 6)  remove this event handler from the Reset button


var restartPlacingShips = function restartPlacingShips() {
  console.log("You have clicked the Reset button"); // 1) and 2):

  homeGridSquares.forEach(function (element) {
    element.removeEventListener('click', homeWhiteSqsHandler);
    element.style.backgroundColor = 'white';
  }); // end forEach
  // 3):  

  _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicToastExistingShipsCoords();
  _gameboardModule_js__WEBPACK_IMPORTED_MODULE_5__.humanGameboard.publicToastHumanShipUsedCoords(); // 4): 

  enableAllPurpButts(); // 5):

  vesselsTexts.forEach(function (element) {
    element.style.opacity = '0.2';
  }); // end forEach
  // 6):

  resetButton.removeEventListener('click', restartPlacingShips);
}; // end restartPlacingShips
//------
// Inititalising anonymous IIFE:


(function () {
  enableAllPurpButts();
})(); // ES6 module system:




/***/ }),

/***/ "./src/gameModule.js":
/*!***************************!*\
  !*** ./src/gameModule.js ***!
  \***************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "publicGetTestVar": () => (/* binding */ publicGetTestVar),
/* harmony export */   "publicSetTestVar": () => (/* binding */ publicSetTestVar),
/* harmony export */   "rxEndOFTurn": () => (/* binding */ rxEndOFTurn)
/* harmony export */ });
/* harmony import */ var _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DOMinteractionModule.js */ "./src/DOMinteractionModule.js");
/* harmony import */ var _playerModule_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./playerModule.js */ "./src/playerModule.js");
/* harmony import */ var _gameboardModule_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./gameboardModule.js */ "./src/gameboardModule.js");
// This is the main game loop code.
// This module is also the entry file for webpack
// wtf di this come from?: 
// const { functionExpression } = require("@babel/types")
//ES6:

 // myPlayerModImports exports humanPlayer, aiPlayer

 // myPlayerModImports exports humanGameboard, aiGameboard
// An IIFE that makes important objects.
// This is essentially an init function that 
// 1)

(function () {
  // Disable all of the home white squares:
  _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_0__.publicDisableWhiteSqs(); // Fade the Restart button:

  _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_0__.resetButton.setAttribute("style", "opacity:0.15; -moz-opacity:0.5"); // Fill aiGameboard's playerShips array with Ship instances,
  // each of which has a randomly generated coords array.
  // Each ai ship does not cross any other and is away from the 
  // edges of the enemy-waters grid. 
  // The following fn puts the Ship instances in 
  // aiGameboard's playerShips array, creates a coords array 
  // randomly for each ship and puts the array in array 
  // positionArray of each Ship instance:

  _gameboardModule_js__WEBPACK_IMPORTED_MODULE_2__.aiGameboard.publicMakeAndStoreAllAIplayerShipCoords();
})(); // TESTING
// a test var:


var testVar = 'thisIsATest';

var publicSetTestVar = function publicSetTestVar(value) {
  setTestVar(value);
};

var setTestVar = function setTestVar(value) {
  testVar = value;
};

var publicGetTestVar = function publicGetTestVar() {
  return getTestVar();
};

var getTestVar = function getTestVar() {
  return testVar;
}; // END TESTING
// NOT USED:
// Now a factory function that returns an object.
// The instance's method incrementAndReturnCount
// successively returns coords as arrays that 
// represent squares in an nxn grid. x goes 
// L->R (from 1 to 6 in 6xn grid), y goes top->bottom 
// (from 1 to 6 in nx6 grid). On first call this 
// fn returns coords [(minX+1), (minY+1)]. successively
// calling this fn returns coords [(minX+2), (minY+1)],
// [(minX+3), (minY+1)] ... [(maxX), (maxY)]. Then
// the next call of the fn returns ['end','end']. Then the
// next call returns string 'All squares used'
// The idea is successively to provide coords of a 
// squares in a grid. Code travels along the grid 
// from L->R and T->B


var CoordsMaker = function CoordsMaker(minX, maxX, minY, maxY) {
  var arr = [];
  var countX = minX;
  var countY = minY + 1;
  var continUE = true;

  var incrementAndReturnCoords = function incrementAndReturnCoords() {
    // setTimeout(
    // function () {
    if (continUE) {
      if (countX === maxX) {
        // if end of line
        countX = 1;
        countY += 1;
      } else {
        countX += 1;
      }

      if (countY === maxY + 1) {
        countX = 'end';
        countY = 'end';
        continUE = false;
      }

      arr = [];
      arr.push(countX);
      arr.push(countY);
      console.log("Coords are ".concat(arr));
      return arr;
    } // end if continUE


    if (!continUE) {
      console.log("All squares used!");
    } // end if don't continue
    // }, 300) // end setTimeout()

  }; // end incrementAndReturnCoords()
  // obj destr:


  return {
    incrementAndReturnCoords: incrementAndReturnCoords
  };
}; // end factory function 
// let myCoordsMaker = CoordsMaker(0,10,0,10)


var testCoords; // END TESTING
// Public functions
// ================

var publicRxEndOFTurn = function publicRxEndOFTurn(nextTurn) {
  rxEndOFTurn(nextTurn);
}; //----                                     
// This fn is where the game proper starts 
// AFTER the user has set up his/her 
// ships (or got the ai to place them 
// randomly <- THIS NOT YET DONE).
// The event listener for the user's click
// of the Start button calls this fn.
// This fn must:
// 1) Tell the ai Player obj to 
// place its ships randomly: 


var publicStart = function publicStart() {
  start();
}; // Private functions
// ================
// The event listener for the user's click
// of the Start button ultimately calls this fn.
// This fn must:
// 1) ????


var start = function start() {// 1):
  // 2):
}; //-------
// This fn rxes 'nextTurnHuman' or 'nextTurnAI'
// from the Gameboard obj's rxAttack fn.
// This fn must: 
// 1)  change the whoseTurn flag. 
// If human has played, arg nextTurn is
// 'nextTurnAI'
// If ai has played nextTurn is 'nextTurnHuman'
// and code must simply enable enemy squares again
// so that code will then wait for human input.
// Check whether all human ships 
// been destroyed. If not contact 
// the DOMinteractionModule to 
// tell it to show onscreen "Your turn"
// (or something).
// If all ships sunk, call fn to 
// stop game and declare a winner. 
// 3)  If nextTurn is 'nextTurnAI' 
// Disable all enemy squares.
// Check whether all AI ships have 
// been destroyed. If not contact 
// the DOMinteractionModule to 
// tell it to show onscreen "Your turn"
// (or something).
// If so, call fn to stop game and 
// declare a winner 


var rxEndOFTurn = function rxEndOFTurn(nextTurn) {
  // console.log(`Inside rxEndOFTurn and nextTurn is ${nextTurn}`)
  // 1): 
  if (nextTurn === 'nextTurnHuman') {
    // 2):
    // COMMENTED OUT wed10Aug22
    _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_0__.publicEnableEnemySquares(); // COMMENTED OUT wed10Aug22

    /*
    // CODE ADDED FOR TESTING:
    // MAke the coords:
    testCoords = myCoordsMaker.incrementAndReturnCoords()
    setTimeout(function(){
        console.log(`IN rxEndOFTurn and about to generate and send human's shot`)
        if (testCoords[0] === 'end') {
            // stop the game
            console.log(`All enemy squares shot at`)
                                     } else {
    // send the coords to receiveAtack                                    
    myDOMmodImports.makeHumanShotTESTING(testCoords[0], testCoords[1])
                                            }
    },800)
    // END CODE ADDED FOR TESTING:
    */

    /*
     // If all AI ships are still intact:
     if(x){ // TO COME
     myDOMmodImports.publicShowScreenMessage()
     // return xxx
         } */
  }

  if (nextTurn === 'nextTurnAI') {
    // call fn to pass turn to 
    // AI player:
    setTimeout(_playerModule_js__WEBPACK_IMPORTED_MODULE_1__.aiPlayer.publicAIshotGenerator(), 800); // If all human ships are still intact:

    /*
    if(x){ // TO COME
        myDOMmodImports.publicShowScreenMessage()
        // return xxx
            }
            */
  } // end if

}; // end fn rxEndOFTurn
//----
// An fn to determine whether all ships of 
// either player have sunk:
// This fn takes two args:
// i)  the human Gameboard obj
// ii) the ai Gameboard obj
// This fn must
// 1) Call the allSunk method of each 
// Gameboard obj. If either returns true
// display a message onscreen that battle
// is over

/*
let doesGameEnd = function (humanGB, aiGB) {
    if (humanGB.publicAllSunk()) {
        // Send message to DOMinteractionModule
        // to display "Battle over! xxx wins".
        // Call publicBattleOver():
        myDOMmodImports.publicBattleOver('AI')
                                 }
    if(aiGB.publicAllSunk()) {
        // Send message to DOMinteractionModule
        // to display "Battle over! xxx wins".
        // Call publicBattleOver():
        myDOMmodImports.publicBattleOver('Human')
                             }
                                     } // end fn doesGameEnd
*/




/***/ }),

/***/ "./src/gameboardModule.js":
/*!********************************!*\
  !*** ./src/gameboardModule.js ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "aiGameboard": () => (/* binding */ aiGameboard),
/* harmony export */   "humanGameboard": () => (/* binding */ humanGameboard)
/* harmony export */ });
/* harmony import */ var _shipModule_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shipModule.js */ "./src/shipModule.js");
/* harmony import */ var _playerModule_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./playerModule.js */ "./src/playerModule.js");
/* harmony import */ var _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DOMinteractionModule.js */ "./src/DOMinteractionModule.js");
/* harmony import */ var _utilityModule_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utilityModule.js */ "./src/utilityModule.js");
/* harmony import */ var _gameModule_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gameModule.js */ "./src/gameModule.js");
// gameModule.js is the entry file for webpack
// IMPORTS
//========
// ES6:

 // playerModule exports humanPlayer and aiPlayer



 // WTF is the following and whoTF put it there?:
// import { some } from 'core-js/core/array'
// From ODin:
// Gameboards should be able to place ships 
// at specific coordinates by calling the 
// ship factory function.
// Gameboards should be able to place ships
// at specific coordinates by calling the 
// ship factory function. ME: I take this to 
// mean that the gameboards store ship objects.
// So a gameboard must have a var that stores 
// ship objects and a function that creates 
// them and puts them in the var.
// THE GAMEBOARD OBJECT FACTORY FUNCTION

/*
1) Each Gameboard object on creation ends up with 
array playerShips that looks like this:
[*patrol object*, *destroyer obj*, *sub obj*, *battle obj*, *carrier obj*].
The game loop will create one Gameboard object for the human player and
one for the AI player.


Odin's instructions about Gameboards:
1) have a receiveAttack function. it takes a pair of coordinates, 
determines whether or not the attack hit a ship and then sends 
the ‘hit’ function to the correct ship or records the coordinates 
of the missed shot.
ME: so fn receiveAttack must
i)   Look in each Ship obj's position array to determine whether
     the coords of the shot (the arg) match any of those in the 
     Ship obj's positionArray
ii)  If there is a match receiveAttack must note the ship in question, 
     call that ship's publicHit method, which will change the 'OK'
     (in positionArray) of the square that has been hit to 'hit'. 
     publicHit rxes, eg, [3,4] as the coords of the hit square.
     publicHit will also determine whether all squares of a ship are 
     hit and return "Ship destroyed" if so.
iii) If there is no match between the coords in receiveAttack's arg 
     and any of the coords in any position array, receiveAttack must 
     push the coords array rxed as arg to an array called 
     missedShots
2) keep track of missed attacks so they can display them properly.
3) report whether or not all of their ships have been sunk
   (by calling allSunk, which returns true or false).
*/
// Vars
// First vars that will contain the instances
// of Gameboard (the human gameboard and the 
// ai gameboard):

var humanGameboard;
var aiGameboard;
var tempShipsObj; // The Gameboard factory function.
// gameModule will create one gameboard object 
// for the human and one for the AI.
// This fn takes one arg, the name of the 
// gameboard object, a string (either 'humanGB'
// or 'aiGB'):
// export const Gameboard = function (gbNameArg) {

function Gameboard(gbNameArg) {
  // How I've arranged things in this factory fn:
  // 1) Array playerShips contains five ship
  // object instances. ???It is only for the human GB object.???
  // An equivalent, aiShips, is for the ai GB obj.???
  // 2) A Ship onject instance looks like this:
  // {
  //  length: 3, sunk: false, type: 'sub', 
  //  hitArray: [xxx], 
  //  publicHit, 
  //  publicIsSunk, 
  //  publicSetPosArr, 
  //  publicGetPosArr
  //  } 
  // 3)  
  // Arrays that will contain all of the 
  // shots already fired by the human
  // player and ai player. These 
  // arrays simply contain coord arrays
  // and end up looking like this:
  // [[2,3], [5,6], [7,1], [8,9]]
  var previousHumanShots = [];
  var previousAIshots = []; // Arrays that will look like, eg, 
  // ['miss', 'hit', 'hit', 'miss', ... etc].
  // Each array will show what the opponents
  // shots have resulted in:

  var previousHumanShotsResults = [];
  var previousAIshotsResults = []; // A var that holds the name of the vessel that 
  // the human wants to place. Code sets the 
  // var to a string (either 'patrolBoat', 'sub'
  // 'battleship', 'destroyer' or 'carrier') :

  var currentPlaceBoat = 'init'; // An array that holds the coords of start and end squares already 
  // used by the user as he/she tries to place his/her
  // ships (this var is badly named, by the way!):

  var humanShipUsedCoords = []; // An array that holds the coords of ships that
  // the user has already made (and that don't
  // cross other ships):

  var existingShipsCoords = []; // An object that will contain the five 
  // ships' positionArrays. fn receiveAttacks
  // will employ this object:

  var positionObj = {}; // Name of the gameboard:

  var gbName = gbNameArg; // An array that contains all of the Ship instances 
  // of a player (human or AI). This becomes
  // [*patrol obj*, *destroyer obj*, *sub obj*, *battle obj*, *carrier obj*]

  var playerShips = []; // *subObj*, eg, is:
  // { length: 3, 
  //   sunk: false, 
  //   type: 'sub',
  //   hitArray: [OK, OK, OK], 
  //   positionArray: [[1,2], [1,3], [1,4]],
  //   *various private fns*,
  //   *various public fns*, eg:
  //   publicHit: publicHit, 
  //   publicIsSunk: publicIsSunk, 
  //   publicSetPosArr: publicSetPosArr, 
  //   publicGetPosArr: publicGetPosArr} 
  // An array that contains shots that have hit
  // an opponent's ship

  var shotsThatHaveHit = []; // An array that contains shots that have missed
  // an opponent's ship

  var shotsThatHaveMissed = []; // A var that records whether when the user is 
  // placing his/her ships the user's click is for the start 
  // of a ship or the end. This var will be true when 
  // it's the start, false when it's the end of a vessel:

  var shipStartVar = 'start'; // other possible value: 'end'

  /*
  // DON'T USE
  // An object that specifies which vessel 
  // the user is about to place. The click handler
  // for the purple squares sets these values
  // (via the public setter):
  let vesselPlacement = {
    patrolBoat: false,
    sub: false,
    battleship: false,
    destroyer: false,
    carrier: false
                          }   
  */
  // An object that contains vessel lengths:

  var vesselLengths = {
    patrolBoat: 2,
    sub: 3,
    battleship: 3,
    destroyer: 3,
    carrier: 5
  }; // PRIVATE METHODS
  //================
  //-----------

  var resetArrsAndObjs = function resetArrsAndObjs() {
    previousHumanShots = [];
    previousAIshots = [];
    previousHumanShotsResults = [];
    previousAIshotsResults = [];
    currentPlaceBoat = 'init';
    humanShipUsedCoords = [];
    existingShipsCoords = [];
    positionObj = {};
    playerShips = [];
    shotsThatHaveHit = [];
    shotsThatHaveMissed = [];
    shipStartVar = 'start';
  }; // end restArrsAndObjs
  //-----------
  // Getter, setter and toaster for 
  // array shotsThatHaveHit


  var pushToshotsThatHaveHit = function pushToshotsThatHaveHit(coords) {
    shotsThatHaveHit.push(coords);
  };

  var getShotsThatHaveHit = function getShotsThatHaveHit() {
    return shotsThatHaveHit;
  };

  var toastShotsThatHaveHit = function toastShotsThatHaveHit() {
    shotsThatHaveHit = [];
  }; //--------
  // Getter, setter and toaster for 
  // array previousHumanShots


  var pushToPreviousHumanShots = function pushToPreviousHumanShots(coords) {
    previousHumanShots.push(coords);
  };

  var getPreviousHumanShots = function getPreviousHumanShots() {
    return previousHumanShots;
  };

  var toastPreviousHumanShots = function toastPreviousHumanShots() {
    previousHumanShots = [];
  }; //--- 
  // Getter, setter and toaster for 
  // array previousAIshots


  var pushToPreviousAIshots = function pushToPreviousAIshots(coords) {
    previousAIshots.push(coords);
  };

  var getPreviousAIshots = function getPreviousAIshots() {
    return previousAIshots;
  };

  var toastPreviousAIshots = function toastPreviousAIshots() {
    previousAIshots = [];
  }; // Getter, setter and toaster for 
  // array previousHumanShotsResults


  var pushToPreviousHumanShotsResults = function pushToPreviousHumanShotsResults(hitOrMiss) {
    previousHumanShotsResults.push(hitOrMiss);
  };

  var getPreviousHumanShotsResults = function getPreviousHumanShotsResults() {
    return previousHumanShotsResults;
  };

  var toastPreviousHumanShotsResults = function toastPreviousHumanShotsResults() {
    previousHumanShotsResults = [];
  }; //--------
  // Getter, setter and toaster for 
  // array previousAIshots


  var pushToPreviousAIshotsResults = function pushToPreviousAIshotsResults(hitOrMiss) {
    previousAIshotsResults.push(hitOrMiss);
  };

  var getPreviousAIshotsResults = function getPreviousAIshotsResults() {
    return previousAIshotsResults;
  };

  var toastPreviousAIshotsResults = function toastPreviousAIshotsResults() {
    previousAIshotsResults = [];
  }; //----
  // Getter and setter for the array that 
  // holds the coords of ships that the 
  // human user has already made while placing 
  // his/her ships:


  var setExistingShipsCoords = function setExistingShipsCoords(coords) {
    existingShipsCoords.push(coords);
  };

  var getExistingShipsCoords = function getExistingShipsCoords() {
    return existingShipsCoords;
  };

  var toastExistingShipsCoords = function toastExistingShipsCoords() {
    existingShipsCoords = [];
  }; //----
  // Getter and setter for currentPlaceBoat,
  // the var that has value 'battleship' for 
  // example. Code only uses this var when 
  // the human player is placing his/her ships:


  var setCurrPlaceBoat = function setCurrPlaceBoat(boat) {
    currentPlaceBoat = boat;
  };

  var getCurrPlaceBoat = function getCurrPlaceBoat() {
    return currentPlaceBoat;
  }; //------
  // Getter for vesselLengths (no need
  // for a setter, obviously):


  var getVessLengths = function getVessLengths() {
    return vesselLengths;
  }; //-------
  // Getter and setter for vesselPlacement obj:


  var setVessPlaceObj = function setVessPlaceObj(pboat, sub, bship, destr, carr) {
    vesselPlacement.patrolBoat = pboat;
    vesselPlacement.sub = sub;
    vesselPlacement.battleship = bship;
    vesselPlacement.destroyer = destr;
    vesselPlacement.carrier = carr;
  };

  var getVessPlaceObj = function getVessPlaceObj() {
    return vesselPlacement;
  }; //-------
  // getter and setter of shipStartVar
  // (which has values 'start' or 'end'
  // depending on whether the human is 
  // clicking on a square for the 
  // start or the end of a ship) :


  var setShipStartVar = function setShipStartVar(value) {
    shipStartVar = value;
  };

  var getShipStartVar = function getShipStartVar() {
    return shipStartVar;
  }; //----
  // An fn that takes two sets of coords 
  // (for two points) and draws the 
  // straight line between them. This fn
  // returns an array of the points in between.
  // Code uses this fn to make the coords of 
  // a ship from the start and end squares 
  // that the user clicks on:
  // This fn takes 3 args:
  // i)   the name of the boat, a string
  // ii)  the start coords, a 2 member array
  //      This will always be a valid start point
  //      because the fn that calls this fn 
  //      ensures that.
  // iii) the end coords, a 2 member array.
  //      This will always be a valid end point
  //      because the fn that calls this fn 
  //      ensures that.
  // This fn must:
  // 1) xxx
  //    xxx
  // 2) xx
  //    cc
  //    xxx
  // 3) xx
  //    xxx
  // This fn returns an array such as 
  // [[1,1], [1,2], [1,3]]
  // for a sub, destroyer or battleship


  var makeShipCoords = function makeShipCoords(boatType, startCoords, endCoords) {
    /*
    let boatLength
    */
    var coords = [];
    var shipCoordsArr = [];
    var diffX = endCoords[0] - startCoords[0];
    var diffY = endCoords[1] - startCoords[1];
    var diffXabs = Math.abs(diffX);
    var diffYabs = Math.abs(diffY);

    if (diffX === 0) {
      // loop in the y direction
      for (var i = 0; i < diffYabs + 1; i++) {
        coords.push(startCoords[0]);

        if (diffY < 0) {
          coords.push(startCoords[1] - i);
        } // end if


        if (diffY > 0) {
          coords.push(startCoords[1] + i);
        } // end if               


        shipCoordsArr.push(JSON.parse(JSON.stringify(coords)));
        coords = [];
      } // end for

    } // end if diffX is 0


    if (diffY === 0) {
      // loop in the x direction
      for (var _i = 0; _i < diffXabs + 1; _i++) {
        if (diffX < 0) {
          coords.push(startCoords[0] - _i);
        } // end if


        if (diffX > 0) {
          coords.push(startCoords[0] + _i);
        } // end if               


        coords.push(startCoords[1]);
        shipCoordsArr.push(JSON.parse(JSON.stringify(coords)));
        coords = [];
      } // end for

    } // end if diffY is 0 


    return shipCoordsArr;
  }; // end makeShipCoords
  //----
  // Getter and setter for array humanShipUsedCoords
  // (which stores the coords of the squares the 
  // user has already employed in his/her attempts
  // to place ships (before actual play starts))


  var getHumanShipUsedCoords = function getHumanShipUsedCoords() {
    return humanShipUsedCoords;
  };

  var setHumanShipUsedCoords = function setHumanShipUsedCoords(coordsArr) {
    humanShipUsedCoords.push(coordsArr);
  };

  var toastHumanShipUsedCoords = function toastHumanShipUsedCoords() {
    humanShipUsedCoords = [];
  }; //----
  // An fn to set the positionObj.
  // The gameModule calls this


  var setPosArrObj = function setPosArrObj(posArrObj) {
    positionObj = posArrObj;
  }; // An fn to set a property of positionObj,
  // (eg positionObj.carrier, whose value will be 
  // [[1,1], [1,2], ... [1,5] ])


  var setPosObjProperty = function setPosObjProperty(propertyName, value) {
    positionObj[propertyName] = value;
  }; //-------
  // This fn simply gets the array playerShips:


  var getPlayerShips = function getPlayerShips() {
    return playerShips;
  }; //------
  // An fn to make a new ship and store it in
  // array playerShips. Code only uses this fn
  // as the user is making and placing his/her
  // ship (ie not in thecreation of ai ships):


  var makeAndStoreShip = function makeAndStoreShip(type) {
    playerShips.push(makeShip(type));
  }; //-----
  // An fn to make a ship of any kind.
  // This fn has to:
  // 1) call the Ship factory function
  // to create, eg, a destroyer object.
  // This fn takes one arg:
  // i)  shipType, a string, eg 'carrier'


  var makeShip = function makeShip(shipType) {
    // 1):
    return _shipModule_js__WEBPACK_IMPORTED_MODULE_0__.Ship(shipType);
  }; // end makeShip
  //----
  // PASSED unit test
  // This fn takes two args:
  // a) a string that tells the fn whether 
  //    the shot has come from the human
  //    player or the ai player (poss values 
  //    are "human" and "ai")
  // b) a pair of coordinates, eg [4, 10]
  // This fn must: 
  // 1) Only if the shot has come from a human 
  // player determine whether the user clicked
  // on a previously clicked-on square. If so
  // show an alert box with appropriate text.
  // 2) determine whether or not the attack hit a ship.
  // i)   Loop through the position object to find out 
  //      whether it contains an array that contains an 
  //      array of coords that matches the shot coords
  //      array
  // 3) sends the ‘hit’ function to the correct ship
  // in the case of a hit and puts the shot array into 
  // shotsArray (whether hit or miss) like this:
  // [3,4,'hit'] or [8,10,'miss]
  // This fn returns 'hit' or 'miss' and ultimately 
  // calls setPosArr,which replaces the Ship obj
  // in question's positionArray's
  // member [3, 2, 'OK'] with [3, 2, 'hit'].
  // 4) Tells the gameModule that the turn now 
  // passes to the other player 
  // This fn returns object shotResult, which 
  // takes on this form: shotResult = {
  //                  hit: true,
  //                  shipSunk: false,
  //                  allSunk: false,
  //                                  }


  var receiveAttack = function receiveAttack(playerArg, shotCoords) {
    var ship;
    var hitFlag = false;
    var sunkFlag = false;
    var tempPrevShots;
    var dataX; // these change depending on 

    var dataY; // whether player is human or ai.

    var squareClass; // changes, as above

    var xStr;
    var yStr;
    var selStr;
    var gameOver = false;
    var shotResult = {
      hit: false,
      shipSunk: false,
      allSunk: false
    }; // 1):

    if (playerArg === "human") {
      // Set dataX, dataY and squareClass 
      // for later use:
      dataX = "xe";
      dataY = "ye";
      squareClass = "enemyGridSquare";
      tempPrevShots = getPreviousHumanShots();

      if (_utilityModule_js__WEBPACK_IMPORTED_MODULE_3__.isArrInArray(shotCoords, tempPrevShots)) {
        console.log("You have already taken this shot. Try another square"); // re-enable the enemy grid squares:

        _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicEnableEnemySquares();
        return;
      } // end if user has already clicked on this square

    } // end if human player


    if (playerArg === "ai") {
      // Set dataX, dataY and squareClass 
      // for later use:
      dataX = "x";
      dataY = "y";
      squareClass = "homeGridSquare";
    } // end if ai player
    // Code initialised positionObj like this
    // (in the DOMinteractionModule fn dealWithSquareClick,
    // which is the event handler for clicks on home squares,
    // which code calls as the user is placing his/her
    // ships):

    /*
    positionObj.patrol    = [[1,2], [1,3]] (eg )
    positionObj.destroyer = etc
    positionObj.sub       = etc
    positionObj.battle    = etc
    positionObj.carrier   = etc
    */
    // 2):
    // Loop through the position object to find out whether the 
    // shot coords match a ship's coords (ie determine whether 
    // the shot hit)


    var positionObjKeys = Object.keys(positionObj);
    positionObjKeys.forEach(function (key) {
      // key is, eg, 'carrier'
      // positionObj[key] is an array of ship coords, eg [[3,2], [3,3], [3,4]]
      for (var i = 0; i < positionObj[key].length; i++) {
        // for sub i is 0-2
        // If there is a hit:
        if (positionObj[key][i][0] === shotCoords[0] && positionObj[key][i][1] === shotCoords[1]) {
          // set hitFlag and put the shot in the 
          // array of shots that have hit. Also set ship:
          hitFlag = true;
          shotsThatHaveHit.push(shotCoords);
          ship = key; // Now, depending on who fired,
          // put the shot in 
          // array previousHumanShots or 
          // previousAIshots and push 'hit' to 
          // previousHumanShotsResults or
          // previousAIshotsResults: 

          if (playerArg === "ai") {
            pushToPreviousAIshots(shotCoords); // put "hit" in previousAIshotsResults:

            pushToPreviousAIshotsResults('hit');
          } // end if


          if (playerArg === "human") {
            pushToPreviousHumanShots(shotCoords); // put "hit" in previousHumanShotsResults:

            pushToPreviousHumanShotsResults('hit');
          } // end if
          // Make square change colour to reflect
          // that opponent's shot hit it:


          xStr = "[data-".concat(dataX, "=\"").concat(shotCoords[0], "\"]");
          yStr = "[data-".concat(dataY, "=\"").concat(shotCoords[1], "\"]");
          selStr = "".concat(xStr).concat(yStr);
          document.querySelector(selStr).className = '';
          document.querySelector(selStr).classList.add("hitShot");

          if (playerArg === "human") {
            _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicMessageFadeInOut("You scored a hit!", 'messageTextFadeInOut', _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.firstInfoAreaOneP); // Now poll the ship objects in playerShips 
            // to find out whether the ship that has 
            // taken a hit has sunk:

            for (var _i2 = 0; _i2 < playerShips.length; _i2++) {
              if (playerShips[_i2].publicGetType() === ship) {
                playerShips[_i2].publicHit(shotCoords);

                if (playerShips[_i2].publicGetSunk()) {
                  // Change the innerHTML in the appropriate <p>
                  // of the display board:
                  switch (ship) {
                    case 'patrolBoat':
                      aiPB.innerHTML = "SUNK!";
                      _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicRemoveClassFromElementUsingRef(aiPB, 'shipStatusTextAfloat');
                      _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicAddClassToElementUsingRef(aiPB, 'shipStatusTextSUNK');
                      break;

                    case 'sub':
                      aiSU.innerHTML = "SUNK!";
                      _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicRemoveClassFromElementUsingRef(aiSU, 'shipStatusTextAfloat');
                      _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicAddClassToElementUsingRef(aiSU, 'shipStatusTextSUNK');
                      break;

                    case 'battleship':
                      aiBA.innerHTML = "SUNK!";
                      _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicRemoveClassFromElementUsingRef(aiBA, 'shipStatusTextAfloat');
                      _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicAddClassToElementUsingRef(aiBA, 'shipStatusTextSUNK');
                      break;

                    case 'destroyer':
                      aiDE.innerHTML = "SUNK!";
                      _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicRemoveClassFromElementUsingRef(aiDE, 'shipStatusTextAfloat');
                      _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicAddClassToElementUsingRef(aiDE, 'shipStatusTextSUNK');
                      break;

                    case 'carrier':
                      aiCA.innerHTML = "SUNK!";
                      _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicRemoveClassFromElementUsingRef(aiCA, 'shipStatusTextAfloat');
                      _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicAddClassToElementUsingRef(aiCA, 'shipStatusTextSUNK');
                      break;

                    default:
                      break;
                  }
                } // end if

              } // end if

            } // end for

          }

          if (playerArg === "ai") {
            _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicMessageFadeInOut("The enemy scored a hit!", 'messageTextFadeInOut', _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.firstInfoAreaP);

            for (var _i3 = 0; _i3 < playerShips.length; _i3++) {
              if (playerShips[_i3].publicGetType() === ship) {
                playerShips[_i3].publicHit(shotCoords);

                if (playerShips[_i3].publicGetSunk()) {
                  // Change the innerHTML in the appropriate <p>
                  // of the display board:
                  switch (ship) {
                    case 'patrolBoat':
                      youPB.innerHTML = "SUNK!";
                      _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicRemoveClassFromElementUsingRef(youPB, 'shipStatusTextAfloat');
                      _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicAddClassToElementUsingRef(youPB, 'shipStatusTextSUNK');
                      break;

                    case 'sub':
                      youSU.innerHTML = "SUNK!";
                      _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicRemoveClassFromElementUsingRef(youSU, 'shipStatusTextAfloat');
                      _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicAddClassToElementUsingRef(youSU, 'shipStatusTextSUNK');
                      break;

                    case 'battleship':
                      youBA.innerHTML = "SUNK!";
                      _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicRemoveClassFromElementUsingRef(youBA, 'shipStatusTextAfloat');
                      _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicAddClassToElementUsingRef(youBA, 'shipStatusTextSUNK');
                      break;

                    case 'destroyer':
                      youDE.innerHTML = "SUNK!";
                      _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicRemoveClassFromElementUsingRef(youDE, 'shipStatusTextAfloat');
                      _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicAddClassToElementUsingRef(youDE, 'shipStatusTextSUNK');
                      break;

                    case 'carrier':
                      youCA.innerHTML = "SUNK!";
                      _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicRemoveClassFromElementUsingRef(youCA, 'shipStatusTextAfloat');
                      _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicAddClassToElementUsingRef(youCA, 'shipStatusTextSUNK');
                      break;

                    default:
                      break;
                  }
                } // end if

              } // end if

            } // end for

          } // end if


          shotResult.hit = true; // Now get the type of ship and set that 
          // ship instance's hitArray:
          // Go to array playerShips and find the object with 
          // .type = key (remember key is, eg, 'carrier')
          // 3):
          // Then find the ship that has been hit
          // in playerShips and call that Ship 
          // object's hit function (which will call 
          // the obj's isSunk fn):
          // console.log(`In receiveAttack of ${playerArg} Gameboard instance. There has been a hit. key is ${key}`)

          for (var j = 0; j < playerShips.length; j++) {
            if (key === playerShips[j].publicGetType()) {
              playerShips[j].publicHit(shotCoords); //  console.log(`In receiveAttack of ${playerArg} Gameboard instance. playerShips[j].publicGetSunk() is: ${playerShips[j].publicGetSunk()}`)

              if (playerShips[j].publicGetSunk()) {
                // Determine whether all ships have been sunk.
                if (allSunk()) {
                  // Code at the end of this fn will read the following var 
                  // and end the game
                  gameOver = true;
                  _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.firstInfoAreaP.className = '';
                  _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.firstInfoAreaOneP.className = '';
                } // end if
                // console.log(`In receiveAttack of ${playerArg} Gameboard instance. Ship has been sunk!!!`)

              } else {// This vessel is still afloat
                // console.log(`In receiveAttack of ${playerArg} Gameboard instance. Ship is still afloat`)
              }
            } // end if

          } // end for

          /*  
          // show alert box message "The ${type} has sunk!"
          // call fn to determine whether all ships have sunk
          // (which will either tell gameModule that it's the other
          // player's turn or )
          if (sunkFlag) {
          console.log(`The ${type} has sunk!`)
          shotResult.shipSunk = true 
          // call fn to determine whether 
          // all ships have sunk or not
          if (allSunk()){
          // show alert to declare winner:
          console.log(`all sunk!`)
          shotResult.allSunk = true 
          // send message to gameModule
          // that game is over:
          // TO COME
                        } // end if all ships have been sunk
                        } // end if a ship is sunk
          */

        } // end if there's a hit

      } // end for loop

    }); // end forEach
    // If the shot missed, log it as a miss:

    if (!hitFlag) {
      // If there is a miss, 
      // set shotsThatHaveMissed (which logs all missed shots):
      shotsThatHaveMissed.push(shotCoords); // Now, depending on who fired,
      // put the shot in 
      // array previousHumanShots or 
      // previousAIshots and push 'hit' to 
      // previousHumanShotsResults or
      // previousAIshotsResults: 

      if (playerArg === "ai") {
        // console.log("Inside gameboardModule's receiveAttack. ai shot missed!")  
        pushToPreviousAIshots(shotCoords); // put "hit" in previousHumanShotsResults:

        pushToPreviousAIshotsResults('miss');
      } // end if


      if (playerArg === "human") {
        // console.log("Inside gameboardModule's receiveAttack. human shot missed!")  
        pushToPreviousHumanShots(shotCoords); // put "hit" in previousHumanShotsResults:

        pushToPreviousHumanShotsResults('miss');
      } // end if
      // Put a circle in the square:


      xStr = "[data-".concat(dataX, "=\"").concat(shotCoords[0], "\"]");
      yStr = "[data-".concat(dataY, "=\"").concat(shotCoords[1], "\"]");
      selStr = "".concat(xStr).concat(yStr);
      document.querySelector(selStr).className = '';
      document.querySelector(selStr).classList.add("missedShot"); // put shot in array previousHumanShots:
      // pushToPreviousAIshots(shotCoords)
      // put 'miss' to array previousHumanShotsResults:
      // pushToPreviousAIshotsResults('miss')

      shotResult.shipSunk = false;
      shotResult.allSunk = false;
      shotResult.hit = false; // Tell gameModule to switch turns:
    } // end if shot missed


    if (playerArg === 'human') {
      if (!gameOver) {
        _gameModule_js__WEBPACK_IMPORTED_MODULE_4__.rxEndOFTurn('nextTurnAI');
      } else {
        // By not calling impFromGmod.rxEndOFTurn()
        // the game halts
        _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.firstInfoAreaOneP.className = '';
        _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicSetGameOverText("Game over! You have won!");
        _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicMakeGameOverBoxAppear();
      } // end if

    } // end if


    if (playerArg === 'ai') {
      if (!gameOver) {
        _gameModule_js__WEBPACK_IMPORTED_MODULE_4__.rxEndOFTurn('nextTurnHuman');
      } else {
        // By not calling impFromGmod.rxEndOFTurn()
        // the game halts        
        _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicSetGameOverText("Game over! The enemy has won!");
        _DOMinteractionModule_js__WEBPACK_IMPORTED_MODULE_2__.publicMakeGameOverBoxAppear();
      } // end if-else

    } // end if

  }; // end receiveAttack
  //-------
  //-----
  // This fn has to poll all ship objects 
  // to determine whether they have all 
  // sunk. This fn must: 
  // 1) look at each sunk property of each  
  // Ship object in array playerShips. 
  // 2) Return true (all ships sunk) or 
  // false (some ships still afloat)


  var allSunk = function allSunk() {
    var vessel;
    var sunkTotal = 0;

    for (var i = 0; i < playerShips.length; i++) {
      vessel = playerShips[i];

      if (vessel.publicGetSunk()) {
        sunkTotal += 1;
      } // end if

    } // end for 


    if (sunkTotal === playerShips.length) {
      return true;
    } else {
      return false;
    } // end if

  }; // end fn allSunk
  //------
  // An fn that makes the randomly
  // placed ships for the ai player. 
  // This fn has to put five Ship instances
  // in array playerShips and randomly make 
  // their coords and then put those coords 
  // in each Ship instance's ship coords array.
  // Hence this fn must:
  // 1) put five ship objects into array 
  // playerShips. 
  // 2) Then generate an object that 
  // contains the five sets of coords 
  // for the aiPlayer's ships. 
  // So call aiPlayer's publicGenerateShipCoords,
  // which returns:
  // {
  // carrier: [[2,3], [2,4], [2,5], [2,6], [2,7]],
  // ...
  // patrolBoat: [[9,3], [9,4]]
  // }
  // 3) Then put the coords in that object into each 
  // Ship instance in playerShips by 
  // calling the instance's method 
  // publicSetPosArray(*ship coords array*):


  var makeAndStoreAllAIplayerShipCoords = function makeAndStoreAllAIplayerShipCoords() {
    // 1):
    playerShips.push(_shipModule_js__WEBPACK_IMPORTED_MODULE_0__.Ship('patrolBoat'));
    playerShips.push(_shipModule_js__WEBPACK_IMPORTED_MODULE_0__.Ship('sub'));
    playerShips.push(_shipModule_js__WEBPACK_IMPORTED_MODULE_0__.Ship('destroyer'));
    playerShips.push(_shipModule_js__WEBPACK_IMPORTED_MODULE_0__.Ship('battleship'));
    playerShips.push(_shipModule_js__WEBPACK_IMPORTED_MODULE_0__.Ship('carrier')); // 2):

    positionObj = _playerModule_js__WEBPACK_IMPORTED_MODULE_1__.aiPlayer.publicGenerateShipCoords(); // 
    // console.table(positionObj)
    // 3)

    for (var i = 0; i < playerShips.length; i++) {
      switch (playerShips[i].publicGetType()) {
        case 'patrolBoat':
          playerShips[i].publicSetPosArray(positionObj.patrolBoat);
          break;

        case 'sub':
          playerShips[i].publicSetPosArray(positionObj.sub);
          break;

        case 'destroyer':
          playerShips[i].publicSetPosArray(positionObj.destroyer);
          break;

        case 'battleship':
          playerShips[i].publicSetPosArray(positionObj.battleship);
          break;

        case 'carrier':
          playerShips[i].publicSetPosArray(positionObj.carrier);
          break;

        default:
          break;
      } // end switch               

      /*
      // FOR TESTING ONLY (delete after):
      // the following code shows the enemy ships
      // in the enemy grid once the ai has 
      // created them
      let xStr
      let yStr
      let qstr
      let car = positionObj.carrier
      let des = positionObj.destroyer
      let bat = positionObj.battleship
      let sub = positionObj.sub
      let pat = positionObj.patrolBoat
      let testSquare
      
      for (let i = 0; i < des.length; i++) {
        xStr = `[data-xe="${des[i][0]}"]`   
        yStr = `[data-ye="${des[i][1]}"]`
        qstr = `${xStr}${yStr}`
        testSquare = document.querySelector(qstr)
        testSquare.className = ''
        testSquare.classList.add("testSquareColour");
                                           } // end for
      
      for (let i = 0; i < bat.length; i++) {
        xStr = `[data-xe="${bat[i][0]}"]`   
        yStr = `[data-ye="${bat[i][1]}"]`
        qstr = `${xStr}${yStr}`
        testSquare = document.querySelector(qstr)
        testSquare.className = ''
        testSquare.classList.add("testSquareColour");
                                           } // end for
      
      
      for (let i = 0; i < sub.length; i++) {
        xStr = `[data-xe="${sub[i][0]}"]`   
        yStr = `[data-ye="${sub[i][1]}"]`
        qstr = `${xStr}${yStr}`
        testSquare = document.querySelector(qstr)
        testSquare.className = ''
        testSquare.classList.add("testSquareColour");
                                           } // end for
      
      
      for (let i = 0; i < pat.length; i++) {
        xStr = `[data-xe="${pat[i][0]}"]`   
        yStr = `[data-ye="${pat[i][1]}"]`
        qstr = `${xStr}${yStr}`
        testSquare = document.querySelector(qstr)
        testSquare.className = ''
        testSquare.classList.add("testSquareColour");
                                           } // end for
      
      for (let i = 0; i < car.length; i++) {
        xStr = `[data-xe="${car[i][0]}"]`   
        yStr = `[data-ye="${car[i][1]}"]`
        qstr = `${xStr}${yStr}`
        testSquare = document.querySelector(qstr)
        testSquare.className = ''
        testSquare.classList.add("testSquareColour");
                                           } // end for
      */
      // END FOR TESTING ONLY

    } // end for

  }; // makeAndStoreAllAIplayerShipCoords
  //-----------------------------------------
  // PUBLIC METHODS
  //-----


  var publicResetArrsAndObjs = function publicResetArrsAndObjs() {
    resetArrsAndObjs();
  }; // Getter, setter and toaster for 
  // array shotsThatHaveHit


  var publicPushToshotsThatHaveHit = function publicPushToshotsThatHaveHit(coords) {
    pushToshotsThatHaveHit(coords);
  };

  var publicGetShotsThatHaveHit = function publicGetShotsThatHaveHit() {
    return getShotsThatHaveHit();
  };

  var publicToastShotsThatHaveHit = function publicToastShotsThatHaveHit() {
    toastShotsThatHaveHit();
  }; //-----
  // An fn that sets the value of a property of 
  // positionObj:


  var publicSetPosObjProperty = function publicSetPosObjProperty(propertyName, value) {
    setPosObjProperty(propertyName, value);
  }; //-----
  // an fn that the click handler for the 
  // enemy-waters squares calls (playerArg is 
  // either "human" or "ai"):


  var publicReceiveAttack = function publicReceiveAttack(playerArg, sqCoords) {
    receiveAttack(playerArg, sqCoords);
  }; //-----
  // An fn to push to array previousHumanShots:


  var publicPushToPreviousHumanShots = function publicPushToPreviousHumanShots(coords) {
    pushToPreviousHumanShots(coords);
  }; // An fn to get array previousHumanShots:


  var publicGetPreviousHumanShots = function publicGetPreviousHumanShots() {
    return getPreviousHumanShots();
  }; // An fn to toast array previousHumanShots:


  var publicToastPreviousHumanShots = function publicToastPreviousHumanShots() {
    toastPreviousHumanShots();
  }; // An fn to push to array previousAIshots:


  var publicPushToPreviousAIshots = function publicPushToPreviousAIshots(coords) {
    pushToPreviousAIshots(coords);
  }; // An fn to get array previousAIshots:


  var publicGetPreviousAIshots = function publicGetPreviousAIshots() {
    return getPreviousAIshots();
  }; // An fn to toast array previousAIshots:


  var publicToastPreviousAIshots = function publicToastPreviousAIshots() {
    toastPreviousAIshots();
  }; //----
  // An fn to push to array previousHumanShotsResults:


  var publicPushToPreviousHumanShotsResults = function publicPushToPreviousHumanShotsResults(hitOrMiss) {
    pushToPreviousHumanShotsResults(hitOrMiss);
  }; // An fn to get array previousHumanShotsResults:


  var publicGetPreviousHumanShotsResults = function publicGetPreviousHumanShotsResults() {
    return getPreviousHumanShotsResults();
  }; // An fn to toast array previousHumanShotsResults:


  var publicToastPreviousHumanShotsResults = function publicToastPreviousHumanShotsResults() {
    toastPreviousHumanShotsResults();
  }; // An fn to push to array previousAIshotsResults:


  var publicPushToPreviousAIshotsResults = function publicPushToPreviousAIshotsResults(coords) {
    pushToPreviousAIshots(coords);
  }; // An fn to get array previousAIshotsResults:


  var publicGetPreviousAIshotsResults = function publicGetPreviousAIshotsResults() {
    return getPreviousAIshotsResults();
  }; // An fn to toast array previousAIshotsResults:


  var publicToastPreviousAIshotsResults = function publicToastPreviousAIshotsResults() {
    toastPreviousAIshotsResults();
  }; //-----
  // An fn to make the ai player's ship objects,
  // put them in array playerShips and fill  
  // the appropriate array in each with 
  // the randomly made ship coords:


  var publicMakeAndStoreAllAIplayerShipCoords = function publicMakeAndStoreAllAIplayerShipCoords() {
    makeAndStoreAllAIplayerShipCoords();
  }; //-----
  // An fn to make a ship and store it in
  // array playerShips:


  var publicMakeAndStoreShip = function publicMakeAndStoreShip(type) {
    makeAndStoreShip(type);
  }; //-------
  // getter and setter for the existingShipsCoords
  // array (which holds the coords of ships that 
  // already exist)


  var publicGetExistingShipsCoords = function publicGetExistingShipsCoords() {
    return getExistingShipsCoords();
  };

  var publicSetExistingShipsCoords = function publicSetExistingShipsCoords(coords) {
    setExistingShipsCoords(coords);
  };

  var publicToastExistingShipsCoords = function publicToastExistingShipsCoords() {
    return toastExistingShipsCoords();
  }; //-------
  // Calls the doesCross fn, which Returns true or false:


  var publicDoesCross = function publicDoesCross(shipArray, usedArray) {
    return _utilityModule_js__WEBPACK_IMPORTED_MODULE_3__.doesCross(shipArray, usedArray);
  }; //------    
  // Getter and setter for currentPlaceBoat:


  var publicSetCurrPlaceBoat = function publicSetCurrPlaceBoat(boat) {
    setCurrPlaceBoat(boat);
  };

  var publicGetCurrPlaceBoat = function publicGetCurrPlaceBoat() {
    return getCurrPlaceBoat();
  }; //----
  //------
  // Getter for vesselPlacement obj:


  var publicGetVessLengths = function publicGetVessLengths() {
    return getVessLengths();
  }; //---
  // Getter and setter for vesselPlacement object:


  var publicGetVessPlaceObj = function publicGetVessPlaceObj() {
    return getVessPlaceObj();
  };

  var publicSetVessPlaceObj = function publicSetVessPlaceObj() {
    setVessPlaceObj((pboat, sub, bship, destr, carr));
  }; // getter and setter of shipStartVar.
  // The setter simply toggles the value 
  // from true to false and vice versa:


  var publicSetShipStartVar = function publicSetShipStartVar(value) {
    setShipStartVar(value);
  };

  var publicGetShipStartVar = function publicGetShipStartVar() {
    return getShipStartVar();
  }; //-----    
  // An fn to make all of the coords of a 
  // ship given the coords of its start 
  // square and its end square. Eg given 
  // [1,3] and [1,7] for a carrier, make
  // this array: 
  // [[1,3], [1,4], [1,5], [1,6], [1,7]]:


  var publicMakeShipCoords = function publicMakeShipCoords(boatType, startCoords, endCoords) {
    return makeShipCoords(boatType, startCoords, endCoords);
  }; //------
  // A getter and a setter for array humanShipUsedCoords (which stores
  // the coords of the squares the user has already used in 
  // his/her attempts to place ships (before play actually 
  // begins)):


  var publicGetHumanShipUsedCoords = function publicGetHumanShipUsedCoords() {
    return getHumanShipUsedCoords();
  };

  var publicSetHumanShipUsedCoords = function publicSetHumanShipUsedCoords(coordsArr) {
    return setHumanShipUsedCoords(coordsArr);
  };

  var publicToastHumanShipUsedCoords = function publicToastHumanShipUsedCoords() {
    toastHumanShipUsedCoords();
  }; //----


  var publicSetPosArrObj = function publicSetPosArrObj(posArrObj) {
    setPosArrObj(posArrObj);
  }; //------
  // PASSED unit test


  var publicAllSunk = function publicAllSunk() {
    return allSunk();
  }; //------
  // PASSED unit test


  var publicRxAttack = function publicRxAttack(shotCoords) {
    return receiveAttack(shotCoords);
  }; //-------
  // PASSED unit test


  var publicGetPlayerShips = function publicGetPlayerShips() {
    return getPlayerShips();
  }; //----
  // Fn to make a ship and put it in
  // array playerShips 
  // PASSED unit test


  var publicMakeShip = function publicMakeShip(shipType) {
    return makeShip(shipType);
  };

  return (// This is object destructuring:
    {
      gbName: gbName,
      publicMakeShip: publicMakeShip,
      publicGetPlayerShips: publicGetPlayerShips,
      publicRxAttack: publicRxAttack,
      publicAllSunk: publicAllSunk,
      publicSetPosArrObj: publicSetPosArrObj,
      publicSetShipStartVar: publicSetShipStartVar,
      publicGetShipStartVar: publicGetShipStartVar,
      publicSetVessPlaceObj: publicSetVessPlaceObj,
      publicGetVessPlaceObj: publicGetVessPlaceObj,
      publicGetVessLengths: publicGetVessLengths,
      publicGetHumanShipUsedCoords: publicGetHumanShipUsedCoords,
      publicSetHumanShipUsedCoords: publicSetHumanShipUsedCoords,
      publicSetCurrPlaceBoat: publicSetCurrPlaceBoat,
      publicGetCurrPlaceBoat: publicGetCurrPlaceBoat,
      publicMakeShipCoords: publicMakeShipCoords,
      publicDoesCross: publicDoesCross,
      publicGetExistingShipsCoords: publicGetExistingShipsCoords,
      publicSetExistingShipsCoords: publicSetExistingShipsCoords,
      publicToastExistingShipsCoords: publicToastExistingShipsCoords,
      publicToastHumanShipUsedCoords: publicToastHumanShipUsedCoords,
      publicMakeAndStoreShip: publicMakeAndStoreShip,
      publicMakeAndStoreAllAIplayerShipCoords: publicMakeAndStoreAllAIplayerShipCoords,
      publicPushToPreviousHumanShots: publicPushToPreviousHumanShots,
      publicGetPreviousHumanShots: publicGetPreviousHumanShots,
      publicToastPreviousHumanShots: publicToastPreviousHumanShots,
      publicReceiveAttack: publicReceiveAttack,
      publicPushToPreviousAIshots: publicPushToPreviousAIshots,
      publicGetPreviousAIshots: publicGetPreviousAIshots,
      publicToastPreviousAIshots: publicToastPreviousAIshots,
      publicPushToPreviousHumanShotsResults: publicPushToPreviousHumanShotsResults,
      publicGetPreviousHumanShotsResults: publicGetPreviousHumanShotsResults,
      publicToastPreviousHumanShotsResults: publicToastPreviousHumanShotsResults,
      publicPushToPreviousAIshotsResults: publicPushToPreviousAIshotsResults,
      publicGetPreviousAIshotsResults: publicGetPreviousAIshotsResults,
      publicToastPreviousAIshotsResults: publicToastPreviousAIshotsResults,
      publicSetPosObjProperty: publicSetPosObjProperty,
      publicPushToshotsThatHaveHit: publicPushToshotsThatHaveHit,
      publicGetShotsThatHaveHit: publicGetShotsThatHaveHit,
      publicToastShotsThatHaveHit: publicToastShotsThatHaveHit,
      publicResetArrsAndObjs: publicResetArrsAndObjs
    }
  );
} // end Gameboard factory fn
// An IIFE to make the instances of Gameboard:


(function () {
  humanGameboard = Gameboard('humanGB');
  aiGameboard = Gameboard('aiGB');
})();



/***/ }),

/***/ "./src/playerModule.js":
/*!*****************************!*\
  !*** ./src/playerModule.js ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "aiPlayer": () => (/* binding */ aiPlayer),
/* harmony export */   "humanPlayer": () => (/* binding */ humanPlayer)
/* harmony export */ });
/* harmony import */ var _gameboardModule_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gameboardModule.js */ "./src/gameboardModule.js");
/* harmony import */ var _utilityModule_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utilityModule.js */ "./src/utilityModule.js");
// gameModule.js is the entry file for webpack

 // Some vars:
// A var that will contain an instance of Player
// and that code will export from this module:

var humanPlayer; // A var that will contain an instance of Player
// and that code will export from this module:

var aiPlayer; // The object that will hold the coords of the 
// ai player's ships. Fn generateShipCoords
// sets this object's properties and values

var positionArrObj = {};
/*
Player factory function
-----------------------
1) Nexxxxx
2) There will be two players, the human and the AI
3) The AI Player object will have machine intelligence that allows it to 
   make random attacks if the previous attack was a miss and to make a 
   considered attack if the previous attack was a hit
   It will also randomly select the positions of its ships at the beginning.
4) The Player factory fn takes two args:
i)    the name of the Player, a string (eg 'T1000' or 'Salvatore')   
ii)   the type of the player, a string (either 'human' or 'ai')
*/

var Player = function Player(nameArg, typeArg) {
  // A var that represents where in the 
  // paper decision tree code is. Fn 
  // aiShotGenerator() employs this 
  // value
  var pointInDiagram;
  var name = nameArg;
  var shotsPrevFired = []; // For testing:
  // let shotsPrevFired = [[1,2], [4,10], [6,2]]

  var type = typeArg; // Either 'human' or 'AI'
  // Now a var that fn makeFourSquares
  // will populate. When code elsewhere looks
  // for shot-free squares around a previously
  // hit square it looks in this array of 
  // arrays. This array holds UP TO four 
  // squares

  var latestFourSquares = []; // similar to var above but gets used by 
  // the fn that generates squares either 
  // side of two given squares in a line
  // (ie fn makeSidePtsRtnOneRand)

  var sidePoints = [];
  /* // NOT USED
  // An array that will contain the side square
  // not chosen by makeSidePtsRtnOneRand when that
  // function has two to choose from:
  let otherSideSq = []
  */
  // NOT USED
  // A var that code toggles from 0 to 1. 
  // Fn makePosArray employs this var, 
  // whose value means vertical or horizontal.
  // The idea is that every time code calls  
  // makePosArray this value toggles because 
  // that fn calls fn toggleOr and then uses
  // var or.

  var orientn = 0; // short for 'orientation'
  // Private methods
  //-------------------
  // A method to reset all arrs, vars and objs 
  // to initial values

  var resetArrsAndObjs = function resetArrsAndObjs() {
    shotsPrevFired = [];
    latestFourSquares = [];
    sidePoints = [];
    orientn = 0;
    positionArrObj = {};
  }; // end resetArrsAndObjs
  //---
  // An fn to toggle the value of var or.
  // 


  var toggleOrientn = function toggleOrientn() {
    orientn = 1 - orientn;
  }; // end toggleOr
  //---
  // wtf does this do?


  var start = function start(player) {
    if (player === 'ai') {
      x = generateNum(2, 9);
      y = generateNum(2, 9);
      r.push(x);
      r.push(y);
    }
  }; //------
  // An fn that fn aiShotGenerator calls.
  // This fn has to return a shot that
  // the AI has not previously fired.
  // This fn takes one argument: the 
  // array of previously fired shots
  // (which lies in humanGameboard)


  var makeUniqueShot = function makeUniqueShot(previousAIshots) {
    // console.log("Code has called fn makeUniqueShot")
    var aiShot;
    var x;
    var y;
    var newShot;

    do {
      aiShot = []; // ADDED FOR TESTING:
      // x = impFromUtilMod.generateNum(1,5)
      // y = impFromUtilMod.generateNum(1,5)
      // END ADDED FOR TESTING

      x = _utilityModule_js__WEBPACK_IMPORTED_MODULE_1__.generateNum(1, 10);
      y = _utilityModule_js__WEBPACK_IMPORTED_MODULE_1__.generateNum(1, 10);
      aiShot.push(x);
      aiShot.push(y); // aiShot now contains randomly generated shot coords
      // Now check that the shot has not already been made:  
    } while (_utilityModule_js__WEBPACK_IMPORTED_MODULE_1__.isArrInArray(aiShot, previousAIshots)); // aiShot is now randomly generated and unique. 


    newShot = aiShot;
    return newShot;
  }; // Now an fn that aiShotGenerator calls.
  // This fn generates squares in the shape 
  // of a cross around the given square (arg sqCoords)
  // if they are in the grid. This fn then filters out
  // from those up to four squares those that match 
  // certain criteria specified in boolean args 2 and 3.
  // This fn returns nothing but puts the squares in array 
  // latestFourSquares (a var global to this module).
  // There are 3 types of square:
  // a) shot at but not hit
  // b) shot at and hit
  // c) not shot at (ie free)
  // This fn takes 3 args: 
  // i)   the coords of a square.
  // ii)  boolean shotAt. if true this fn includes 
  //      squares that have rxed a shot. If false
  //      it excludes shots that have rxed a shot.
  //      So false means free squares only; true 
  //      means all squares
  // iii) boolean hitsOnly. the fn reads this arg 
  //      to determine whether to put into latestFourSquares
  //      ONLY those squares that have taken a hit.
  //      true means include; false means don't 
  // WORKS


  var makeFourSquares = function makeFourSquares(sqCoords, shotAt, hitsOnly) {
    var fourSquaresTemp; // A global (in this module at least) var:

    latestFourSquares = [];
    var previousAIshots = _gameboardModule_js__WEBPACK_IMPORTED_MODULE_0__.humanGameboard.publicGetPreviousAIshots(); // NOTE: code must use 'patrolBoat' below. makeEndSquaresArray returns 
    // four squares whether they have rxed a shot that missed or hit or whether
    // they are free squares:

    fourSquaresTemp = _utilityModule_js__WEBPACK_IMPORTED_MODULE_1__.makeEndSquaresArray('patrolBoat', sqCoords); // fourSquaresTemp is now an array of up to four coords, all within the grid.
    // The coords may or may not represent squares that have taken a shot or a hit.
    // If shotAt is false include in fourSquaresTemp only  
    // free squares. If shotAt is true and hitsOnly is true 
    // include only those squares that have previously taken a hit:

    if (!shotAt) {
      // Here hitsOnly can have any value.
      // If code wants only free squares
      // put them into latestFourSquares:
      for (var i = 0; i < fourSquaresTemp.length; i++) {
        if (!_utilityModule_js__WEBPACK_IMPORTED_MODULE_1__.isArrInArray(fourSquaresTemp[i], previousAIshots)) {
          latestFourSquares.push(fourSquaresTemp[i]);
        } // end inner if

      } // end for

    } // end if (!shotAt)


    if (shotAt && hitsOnly) {
      // If code wants only those squares 
      // that have taken a hit:
      // Get array of previous hit squares:                           
      for (var _i = 0; _i < fourSquaresTemp.length; _i++) {
        latestFourSquares.push(fourSquaresTemp[_i]);
      } // end for

    } // end if (shotAt && hitsOnly)  
    // Probably of no interest 
    // but kept here just in case:

    /*
    if (shotAt && !hitsOnly) {  // If code wants squares that have 
                                // taken a shot but have not been hit:
    // Get array of previous hit squares:
    // TO COME TO COME TO COME TO COME TO COME TO COME 
        for (let i = 0; i < fourSquaresTemp.length; i++) {
              latestFourSquares.push(fourSquaresTemp[i])  
                                                         } // end for
                             } // end if (shotAt && !hitsOnly)  
    */
    // latestFourSquares now contains up to four squares. 

  }; // end makeFourSquares
  // An fn that takes one arg, an array.
  // This fn returns a randomly selected 
  // member of the array. This fn also removes
  // that member from the array:


  var returnRandMemberOfArray = function returnRandMemberOfArray(arrArg) {
    var randomMember;
    var randomNumb;

    if (arrArg.length > 0) {
      randomNumb = _utilityModule_js__WEBPACK_IMPORTED_MODULE_1__.generateNum(0, arrArg.length - 1);
      randomMember = arrArg[randomNumb]; // Now remove the square from latestFourSquares:

      arrArg.splice(randomNumb, 1);
      return randomMember;
    } else {
      // arrArg is empty
      return null;
    }
  }; // end returnRandMemberOfArray
  // An fn that makeFourSquares calls. This fn's 
  // first arg is the coords of a square. This fn tests
  // whether the square is outside the grid or not.
  // The other four args are limits for the grid. so
  // if the grid is 5x5 then xMax = 5, xMin =1,
  // yMin =1 and yMax = 5
  // This fn returns true for inside grid, false for 
  // outside grid.
  // WORKS


  var isInGridOrNot = function isInGridOrNot(square, xMin, xMax, yMin, yMax) {
    var MinX = xMin;
    var MaxX = xMax;
    var MinY = yMin;
    var MaxY = yMax;

    if ( // If the square falls within the grid
    square[0] >= MinX && square[0] <= MaxX && square[1] >= MinY && square[1] <= MaxY) {
      return true;
    } else {
      // If the square is outside the grid
      return false;
    } // end if-else

  }; // end isInGridOrNot
  // An fn that aiShotGenerator calls.
  // This fn takes two args, which are 
  // two squares in the same row/column,
  // not necessarily squares adjacent 
  // to each other.
  // This fn looks for two points
  // on either side of those given in
  // the args and returns one, 
  // randomly chosen, if the ai has NOT
  // shot at that square before. 
  // This fn returns either that square
  // or null (to signify that neither square
  // either side of the row was inside
  // the grid AND not previously shot
  // at by the ai).
  // WORKS:


  var makeSidePtsRtnOneRand = function makeSidePtsRtnOneRand(squareOne, squareTwo, prevArtIntshots) {
    var sqOne = [];
    var sqTwo = [];

    if (squareOne[1] === squareTwo[1]) {
      // the points are horiz
      // The following if statements allow 
      // the args to be in any order (eg 
      // for points [1,3] and [2,3] code can 
      // call this fn in both of these ways
      // and get the same result:
      // makeSidePtsRtnOneRand([1,3], [2,3])
      // and makeSidePtsRtnOneRand([2,3], [1,3]))
      if (squareOne[0] > squareTwo[0]) {
        // eg squareOne is [3,2] and squareTwo is [2,2] 
        sqTwo.push(squareOne[0]);
        sqTwo.push(squareOne[1]);
        sqOne.push(squareTwo[0]);
        sqOne.push(squareTwo[1]);
      } else {
        sqTwo.push(squareTwo[0]);
        sqTwo.push(squareTwo[1]);
        sqOne.push(squareOne[0]);
        sqOne.push(squareOne[1]);
      } // end if-else

    } // end if points are horiz


    if (squareOne[0] === squareTwo[0]) {
      // the points are vert
      // Determine whether 
      if (squareOne[1] > squareTwo[1]) {
        // eg squareOne is [3,2] and squareTwo is [3,1].
        // See explanation above for the following
        // code:
        sqTwo.push(squareOne[0]);
        sqTwo.push(squareOne[1]);
        sqOne.push(squareTwo[0]);
        sqOne.push(squareTwo[1]);
      } else {
        sqTwo.push(squareTwo[0]);
        sqTwo.push(squareTwo[1]);
        sqOne.push(squareOne[0]);
        sqOne.push(squareOne[1]);
      } // end if-else

    } // end if points are horiz


    var nextShot;
    var randomNumb;
    var squaresArray = [];
    var sideSqLeft = [];
    var sideSqRight = [];
    var sideSqTop = [];
    var sideSqBottom = []; // Toast global var sidePoints:

    sidePoints = [];

    if (sqOne[1] === sqTwo[1]) {
      // the points are horiz
      sideSqLeft.push(sqOne[0] - 1);
      sideSqLeft.push(sqOne[1]);
      sideSqRight.push(sqTwo[0] + 1);
      sideSqRight.push(sqTwo[1]);

      if ( // Now ensure the side squares are in the grid
      // and exclude them if they are not:
      sideSqLeft[0] > 0 && sideSqLeft[0] < 11 && sideSqLeft[1] > 0 && sideSqLeft[1] < 11 && !_utilityModule_js__WEBPACK_IMPORTED_MODULE_1__.isArrInArray(sideSqLeft, prevArtIntshots)) {
        sidePoints.push(sideSqLeft);
      }

      if (sideSqRight[0] > 0 && sideSqRight[0] < 11 && sideSqRight[1] > 0 && sideSqRight[1] < 11 && !_utilityModule_js__WEBPACK_IMPORTED_MODULE_1__.isArrInArray(sideSqRight, prevArtIntshots)) {
        sidePoints.push(sideSqRight);
      }
    } // end outer if


    if (sqOne[0] === sqTwo[0]) {
      // the points are vertical
      sideSqTop.push(sqOne[0]);
      sideSqTop.push(sqOne[1] - 1);
      sideSqBottom.push(sqTwo[0]);
      sideSqBottom.push(sqTwo[1] + 1); // Now ensure the side squares are in the grid
      // and exclude them if they are not:

      if (sideSqTop[0] > 0 && sideSqTop[0] < 11 && sideSqTop[1] > 0 && sideSqTop[1] < 11 && !_utilityModule_js__WEBPACK_IMPORTED_MODULE_1__.isArrInArray(sideSqTop, prevArtIntshots)) {
        sidePoints.push(sideSqTop);
      }

      if (sideSqBottom[0] > 0 && sideSqBottom[0] < 11 && sideSqBottom[1] > 0 && sideSqBottom[1] < 11 && !_utilityModule_js__WEBPACK_IMPORTED_MODULE_1__.isArrInArray(sideSqBottom, prevArtIntshots)) {
        sidePoints.push(sideSqBottom);
      }
    } // end outer if


    if (sidePoints.length === 0) {
      nextShot = null;
      console.log("IN makeSidePtsRtnOneRand. sidepoints is ".concat(sidePoints, ", nextShot is ").concat(nextShot, ", squareOne and squareTwo are ").concat(squareOne, " and ").concat(squareTwo));
    }

    if (sidePoints.length === 1) {
      nextShot = sidePoints[0];
      console.log("IN makeSidePtsRtnOneRand. sidepoints is ".concat(sidePoints, ", nextShot is ").concat(nextShot, ", squareOne and squareTwo are ").concat(squareOne, " and ").concat(squareTwo));
    }

    if (sidePoints.length === 2) {
      randomNumb = generateNum(0, 1);
      nextShot = sidePoints[randomNumb];
      console.log("IN makeSidePtsRtnOneRand. sidepoints is ".concat(sidePoints, ", nextShot is ").concat(nextShot, ", squareOne and squareTwo are ").concat(squareOne, " and ").concat(squareTwo));
      sidePoints.splice(randomNumb, 1);
    }

    return nextShot;
  }; // end makeSidePtsRtnOneRand
  // Now an fn that generates another shot after 
  // the previous three shots by the ai were hits.
  // this fn has to:
  // 1) Get the previous three shots (actually 
  // just the previous one and the last but two)
  // 2) Get the squares either side
  // 3) pick one of the two squares at random
  // and return it

  /*
  // NOT YET USED
  let makeNextSqInLine = function() {
   let nextShot
   let previousAIshots = impFromGB.humanGameboard.publicGetPreviousAIshots()
   // Three vars for previous shot, the one 
   // before it and the one before that 
   let prevShot = previousAIshots[previousAIshots.length-1]
   let prevShotMinusOne = previousAIshots[previousAIshots.length-2]
   let prevShotMinusTwo = previousAIshots[previousAIshots.length-3]
    nextShot = makeSidePtsRtnOneRand(prevShot, prevShotMinusTwo)
   return nextShot
                                   } // end makeNextSqInLine
  */
  // Now the ai shooting algorithm.
  // gameModule's rxEndOFTurn fn calls 
  // this fn.
  // This fn returns the coords of a 
  // square to shoot at, eg [2,10].
  // This fn must work out whether to 
  // create a random shot or a targeted 
  // shot. 
  // NOTE: code sets var pointInDiagram to 
  // have a value that represents where in
  // the paper decision tree diagram code 
  // must next go.
  // This fn call aiGameboard's receiveAttack('ai', newShot)


  var aiShotGenerator = function aiShotGenerator() {
    var shotResult;
    var newShot;
    var tempSqOne;
    var tempSqTwo;
    var tempShot;
    var shotsThatHaveHit = _gameboardModule_js__WEBPACK_IMPORTED_MODULE_0__.humanGameboard.publicGetShotsThatHaveHit();
    var previousAIshots = _gameboardModule_js__WEBPACK_IMPORTED_MODULE_0__.humanGameboard.publicGetPreviousAIshots();
    var previousAIshotsResults = _gameboardModule_js__WEBPACK_IMPORTED_MODULE_0__.humanGameboard.publicGetPreviousAIshotsResults();
    var prevShot = previousAIshots[previousAIshots.length - 1];
    var prevHit = shotsThatHaveHit.slice(-1)[0];
    var prevHitMinus1 = shotsThatHaveHit.slice(-2)[0];
    var prevHitMinus2 = shotsThatHaveHit.slice(-3)[0];
    var prevHitMinus3 = shotsThatHaveHit.slice(-4)[0];
    var tempFourSquares;
    var tempInlineSquares;
    var tempArray; // Now two fns that cod will use repeatedly:
    // shot will be newShot.
    // testStr will be, eg, 'testPoint4'.
    // PID (pointInDiagram) will be an integer representing the 
    // point in the diagram of the 'hit?' diamond.
    // shot could be null or, eg, [3,5].
    // testStr will be, eg, 'testPoint4'.
    // PID (pointInDiagram) will be an integer representing the 
    // point in the flow diagram of the 'hit?' diamond.
    // If the shot 
    // this fn rxes as first arg is null the fn generates 
    // the coords of a random square not previously 
    // used. If the shot is not null this fn simply 
    // sends the shot to the human gameboard instance's 
    // publicReceiveAttack method. 
    // PID is the next value for pointInDiagram:

    var makeNewShot = function makeNewShot(shot, testStr, PID) {
      var testString1 = testStr + ": newShot is ".concat(shot);
      var testString2 = testStr + " and previousAIshots is: ".concat(previousAIshots, " and about to set PID to ").concat(PID); // console.log(`${testString1}`)
      // console.log(`${testString2}`)

      pointInDiagram = PID;

      if (shot === null) {
        var newShot1; // Generate a random shot:

        newShot1 = makeUniqueShot(previousAIshots); // call humanGameBoard's receiveAttack(newShot)
        // console.log(`In fn ifNewShotIsNull`)

        _gameboardModule_js__WEBPACK_IMPORTED_MODULE_0__.humanGameboard.publicReceiveAttack('ai', newShot1);
      } else {
        // If at least one square among the four
        // around the previous shot is shot-free  
        // call humanGameBoard's receiveAttack(newShot):
        _gameboardModule_js__WEBPACK_IMPORTED_MODULE_0__.humanGameboard.publicReceiveAttack('ai', shot);
      } // end if-else

    }; // end ifNewShotIsNull
    // 1): 
    // This is where the flow diagram starts
    // (it's when the ai is about to make its  
    // first shot of the game):


    if (previousAIshots.length === 0) {
      // console.log("Inside IF code for first ever shot of the game")
      makeNewShot(null, 'testPoint1', 1);
      return;
    } // end if
    // See paper diagram!
    // If the previous shot scored a hit:


    if (previousAIshotsResults.slice(-1)[0] === 'hit') {
      // console.log("In the IF code of aiShotGenerator for previous shot was a hit")
      switch (pointInDiagram) {
        case 1:
          // HIT
          // call makeFourSquares, which puts up
          // to four squares in global array latestFourSquares.
          // These are free squares:
          makeFourSquares(prevShot, false, null); // Randomly pick one square from 
          // latestFourSquares, remove it 
          // and return it (or return null if 
          // latestFourSquares contains no squares):

          newShot = returnRandMemberOfArray(latestFourSquares); // console.log(`Prev ai shot a hit, newShot from fn makeFourSquares is ${newShot}`)

          if (newShot !== null) {
            // console.log(`In IF. Prev ai shot a hit, newShot from fn makeFourSquares is ${newShot}`)
            makeNewShot(newShot, 'testPoint2', 2); // console.log(`pointInDiagram is: ${pointInDiagram}`)
          } else {
            // IF newShot is null generate a random shot:  
            // console.log(`In ELSE. Prev ai shot a hit, newShot from fn makeFourSquares is ${newShot}`)
            makeNewShot(newShot, 'testPoint3', 1);
          } // end if-else


          return;
          break;

        case 2:
          // HIT
          // At this stage there have been two hits 
          // next to each other. These won't necessarily be 
          // the previous two shots, so code must now get the 
          // two adjacent squares that have taken hits (and of 
          // which one is prevShot). So:
          // 1) Determine whether there are any 3-plus-square boats 
          // that are still afloat. If yes,continue. If not, 
          // generate a random shot: TO COME TO COME
          // i) 
          // 2) Get the array of previous hits and get the last two
          // shots in it
          // 3) Generate squares either side that have not rxed 
          // a shot
          // 4) Pick one at random and shoot
          // 1):
          // TO COME TO COME TO COME TO COME
          // 2):
          // prevHit = shotsThatHaveHit.slice(-1)[0] // done at top of fn
          // prevHitMinus1 = shotsThatHaveHit.slice(-2)[0] // done at top of fn
          // 3), 4):
          newShot = makeSidePtsRtnOneRand(prevHitMinus1, prevHit, previousAIshots);

          if (newShot === null) {
            // generate a random shot:
            makeNewShot(newShot, 'testPoint5', 1);
          } else {
            // newShot !== null. send newShot 
            // to receiveAttack of
            // the human gameboard instance:
            makeNewShot(newShot, 'testPoint4', 3);
          } // end if-else


          return;
          break;

        case 3:
          // HIT
          // There have been three ai hits in a spatial
          // row. Now need to test whether the carrier 
          // is still afloat (because if it's not there
          // is no point in generating a fourth shot in
          // a row) --- TO COME!!
          // Generate side squares on either side of 
          // the three hits and pick one and shoot
          newShot = makeSidePtsRtnOneRand(prevHitMinus2, prevHit, previousAIshots);
          console.log("There have been three hits by the ai. newShot is ".concat(newShot));

          if (newShot === null) {
            // generate random shot:
            makeNewShot(newShot, 'testPoint7', 1);
          } else {
            // shoot at the sidesquare:
            makeNewShot(newShot, 'testPoint6', 4);
          } // end if-else


          return;
          break;

        case 4:
          // HIT
          // At this stage there have been four ai shots 
          // in a row that have hit. Now need to test 
          // whether the carrier is still afloat (because 
          // if it's not there is no point in generating a
          // fifth shot in a row) --- TO COME!!
          // Generate another square in the same line
          // (could be on either side)
          // Get previous shot and previous shot but three:
          newShot = makeSidePtsRtnOneRand(prevHitMinus3, prevHit, previousAIshots);

          if (newShot === null) {
            makeNewShot(newShot, 'testPoint9', 1);
          } else {
            makeNewShot(newShot, 'testPoint8', 5);
          } // end if-else


          return;
          break;

        case 5:
          // HIT
          // At this point there have been five hits in a spatial row.
          // The carrier could still be afloat but htere is no need 
          // to test for that. Simply generate a random shot:
          makeNewShot(null, 'testPoint10', 1);

        default:
          break;
      } // end switch

    } else {
      // end if previous shot hit
      // else if previous shot was a miss
      // console.log(`In aiShotGenerator and last entry in previousAIshotsResults is ${previousAIshotsResults.slice(-1)}`)
      // console.log(`In IF code of aiShotGenerator for previous shot was miss. pointInDiagram is ${pointInDiagram}`)
      // console.log("Last ai shot was a miss")
      //  console.log(`In playerModule's aiShotGenerator. previousAIshotsResults is ${previousAIshotsResults}`)
      switch (pointInDiagram) {
        case 1:
          // MISS
          // console.log(`2nd ai shot about to fire and PID is 1`)
          makeNewShot(null, 'testPoint11', 1);
          return;
          break;

        case 2:
          // MISS
          // Call the fn that picks the next 
          // square in latestFourSquares at random
          // and returns it or null:
          newShot = returnRandMemberOfArray(latestFourSquares); // console.log(`Code tried the first square of latestFourSquares, it missed. This is the next: ${newShot}`)

          if (newShot === null) {
            makeNewShot(newShot, 'testPoint13', 1);
          } else {
            makeNewShot(newShot, 'testPoint12', 2);
          } // end if-else


          return;
          break;

        case 3:
          // MISS 
          // Pick 2nd square, if available.
          // At this point there have been two hits
          // in a spatial row:
          console.log("There have been two hits. ai shot to one side and missed. About to generate the other sidesquare");
          newShot = makeSidePtsRtnOneRand(prevHitMinus1, prevHit, previousAIshots);
          console.log("newShot is ".concat(newShot));

          if (newShot !== null) {
            makeNewShot(newShot, 'testPoint14', 3);
          } else {
            // Generate random square:
            console.log("There are no valid sidesquares, code will now send random shot");
            makeNewShot(null, 'testPoint15', 1);
          } // end if


          return;
          break;

        case 4:
          // MISS 
          // Pick 2nd square, if available.
          // At this point sidePoints should 
          // contain only one square or none:
          console.log("There have been three hits. ai shot to one side and missed. About to generate the other sidesquare. prevHitMinus2 is ".concat(prevHitMinus2, "and prevHit is ").concat(prevHit));
          newShot = makeSidePtsRtnOneRand(prevHitMinus2, prevHit, previousAIshots);
          console.log("makeSidePtsRtnOneRand has generated newShot as: ".concat(newShot));

          if (newShot !== null) {
            makeNewShot(newShot, 'testPoint16', 3);
          } else {
            // Generate random square:
            console.log("There are no valid sidesquares, code will now send random shot");
            makeNewShot(null, 'testPoint17', 1);
          } // end if


          return;
          break;

        case 5:
          // MISS
          // Pick 2nd square, if available.
          // At this point there have been four hits in a row:
          newShot = makeSidePtsRtnOneRand(prevHitMinus3, prevHit, previousAIshots);

          if (newShot !== null) {
            makeNewShot(newShot, 'testPoint18', 3);
          } else {
            // Generate random square:
            console.log("There are no valid sidesquares, code will now send random shot");
            makeNewShot(null, 'testPoint19', 1);
          } // end if


          return;
          break;

        case 6:
          // MISS
          // Pick 2nd square, if available.
          // At this point sidePoints should 
          // contain only one square or none:
          if (sidePoints.length > 0) {
            newShot = sidePoints[0];
            makeNewShot(newShot, 'testPoint19', 7);
            return;
          } else {
            // Generate random square:                 
            makeNewShot(null, 'testPoint20', 1);
            return;
          }

          break;

        case 7:
          // Generate random square:                 
          makeNewShot(null, 'testPoint21', 1);
          return;
          break;

        default:
          break;
      } // end switch

    } // end if-else previous shot missed

  }; // end aiShotGenerator
  // An fn to generate a random coord.
  // This fn checks whether the ai has 
  // already shot at this square and if
  // so generates random square coords
  // until it comes up with one that the 
  // ai has not shot at before:


  var genUniqueRandomCoord = function genUniqueRandomCoord() {
    var x;
    var y;
    var previousAIshots;
    var aiShot = [];
    previousAIshots = _gameboardModule_js__WEBPACK_IMPORTED_MODULE_0__.aiGameboard.publicGetPreviousAIshots();

    do {
      aiShot = []; // a very important line! 

      x = _utilityModule_js__WEBPACK_IMPORTED_MODULE_1__.generateNum(1, 10);
      y = _utilityModule_js__WEBPACK_IMPORTED_MODULE_1__.generateNum(1, 10);
      aiShot.push(x);
      aiShot.push(y); // aiShot is now, eg, [4,9], a 
      // randomly generated shot coords array.
      // Now check that the shot has not already been made:  
    } while (_utilityModule_js__WEBPACK_IMPORTED_MODULE_1__.isArrInArray(aiShot, previousAIshots));

    return aiShot;
  }; // end genUniqueRandomCoord
  // Now an fn that aiShotGenerator calls:

  /*
  // This fn must find n hit squares in 
  // a row, radiating out from prevShot
  // (which will be a hit square), where 
  // n is 2, 3 or 4.
  // This fn should:
  // a) take these args: 
  // i)   prevShot
  // ii)  prevAIshots
  // iii) n
  // b) create the up to four points of the 
  // cross around prevShot. Ensure these are
  // only squares that have taken a hit.
  // Put them in array latestFourSquares
  // c) Cycle through latestFourSquares.
   For each member find the adjacent square
   radiating out from prevShot. Put the square in 
   array northArray. Keep doing this 
   until code comes to a free square or one
   that has been shot at but not taken a hit.
   There will be up to four arrays: 
   northArray
   southArray
   eastArray
   westArray
   Put these arrays in global array
   compassArray if they have members.
   Cycle through compassArray and find the member 
   whose length = n. make side squares for 
   the points in that array.
   Put the side points in global array sidePoints.
  */


  var findHitsInRow = function findHitsInRow(prevShot, prevAIshots, n) {
    makeFourSquares(prevShot, true, true); // Now latestFourSquares contains up to
    // four squares around prevShot that 
    // that are hit squares only.

    if (latestFourSquares.length > 0) {
      for (var i = 0; i < latestFourSquares.length; i++) {
        if (n === 2) {
          // return the two hit squares that are 
          // adjacent to each other:
          return [prevShot, latestFourSquares[0]];
        } // end if n ===2


        if (n === 3) {// You know that prev shot and 
          // latestFourSquares[0] form a two-square
          // sequence of adjacent squares. 
          // Now determine whether the 
          // square at the end of that sequence going
          // in the direction away from prevShot 
          // has received a hit (if it does, that's
          // the three-square sequence you are looking
          // for). If it doesn't try prevShot and 
          // latestFourSquares[i]. If there is no 
          // three-square sequence regardless of the 
          // squares in latestFourSquares return null:
          // then 
        } // end if n is 3

      } // end for

    } // end if latestFourSquares
    // contains stuff

  }; // end findHitsInRow
  // Now an fn that rxes an array of up to
  // four squares. The last square in that array 
  // is always prevShot.
  // Fn xxx calls this fn.
  // This fn looks at the first and last square in the 
  // array and then looks at the square adjacent to the end 
  // of the sequence going away from prevShot (the last
  // square in the array). If that square is a hit
  // return the array with the square added to the beginning.
  // If the square is free or shot but not a hit return null 
  // i)   an array of squares 
  // ii)  null


  var xxx = function xxx(squaresArrArg) {
    var sqOne = [];
    var sqTwo = [];

    if (squareOne[1] === squareTwo[1]) {
      // the points are horiz
      // THe following if statements allows 
      // the args to be in any order (eg 
      // for points [1,3] and [2,3] code can 
      // call this fn in both of these ways
      // and get the same result:
      // makeSidePtsRtnOneRand([1,3], [2,3])
      // and makeSidePtsRtnOneRand([2,3], [1,3]))
      if (squareOne[0] > squareTwo[0]) {
        // eg squareOne is [3,2] and squareTwo is [2,2] 
        sqTwo.push(squareOne[0]);
        sqTwo.push(squareOne[1]);
        sqOne.push(squareTwo[0]);
        sqOne.push(squareTwo[1]);
      } else {
        sqTwo.push(squareTwo[0]);
        sqTwo.push(squareTwo[1]);
        sqOne.push(squareOne[0]);
        sqOne.push(squareOne[1]);
      } // end if-else

    } // end if points are horiz


    if (squareOne[0] === squareTwo[0]) {
      // the points are vert
      // Determine whether 
      if (squareOne[1] > squareTwo[1]) {
        // eg squareOne is [3,2] and squareTwo is [3,1].
        // See explanation above for the following
        // code:
        sqTwo.push(squareOne[0]);
        sqTwo.push(squareOne[1]);
        sqOne.push(squareTwo[0]);
        sqOne.push(squareTwo[1]);
      } else {
        sqTwo.push(squareTwo[0]);
        sqTwo.push(squareTwo[1]);
        sqOne.push(squareOne[0]);
        sqOne.push(squareOne[1]);
      } // end if-else

    } // end if points are horiz


    var nextShot;
    var randomNumb;
    var previousAIshots = [];
    var squaresArray = [];
    var sideSqLeft = [];
    var sideSqRight = [];
    var sideSqTop = [];
    var sideSqBottom = []; // Toast sidePoints (probably actually don't need to):

    sidePoints = [];

    if (sqOne[1] === sqTwo[1]) {
      // the points are horiz
      sideSqLeft.push(sqOne[0] - 1);
      sideSqLeft.push(sqOne[1]);
      sideSqRight.push(sqTwo[0] + 1);
      sideSqRight.push(sqTwo[1]);

      if (sideSqLeft[0] > 0 && sideSqLeft[0] < 11 && sideSqLeft[1] > 0 && sideSqLeft[1] < 11 && !_utilityModule_js__WEBPACK_IMPORTED_MODULE_1__.isArrInArray(sideSqLeft, previousAIshots)) {
        sidePoints.push(sideSqLeft);
      }

      if (sideSqRight[0] > 0 && sideSqRight[0] < 11 && sideSqRight[1] > 0 && sideSqRight[1] < 11 && !_utilityModule_js__WEBPACK_IMPORTED_MODULE_1__.isArrInArray(sideSqRight, previousAIshots)) {
        sidePoints.push(sideSqRight);
      }
    } // end outer if


    if (sqOne[0] === sqTwo[0]) {
      // the points are vertical
      sideSqTop.push(sqOne[0]);
      sideSqTop.push(sqOne[1] - 1);
      sideSqBottom.push(sqTwo[0]);
      sideSqBottom.push(sqTwo[1] + 1);

      if (sideSqTop[0] > 0 && sideSqTop[0] < 11 && sideSqTop[1] > 0 && sideSqTop[1] < 11 && !_utilityModule_js__WEBPACK_IMPORTED_MODULE_1__.isArrInArray(sideSqTop, previousAIshots)) {
        sidePoints.push(sideSqTop);
      }

      if (sideSqBottom[0] > 0 && sideSqBottom[0] < 11 && sideSqBottom[1] > 0 && sideSqBottom[1] < 11 && !_utilityModule_js__WEBPACK_IMPORTED_MODULE_1__.isArrInArray(sideSqBottom, previousAIshots)) {
        sidePoints.push(sideSqBottom);
      }
    } // end outer if


    if (sidePoints.length === 0) {
      return null;
    } else {
      if (sidePoints.length === 1) {
        nextShot = sidePoints[0];
        sidePoints = [];
        return nextShot;
      }

      if (sidePoints.length === 2) {
        randomNumb = generateNum(0, 1);
        nextShot = sidePoints[randomNumb];
        sidePoints.splice(randomNumb, 1);
        return nextShot;
      }
    }
  }; // end makeSidePtsRtnOneRand
  //----
  // WORKS -- passed node test
  // gameboardModule calls this fn.
  // This fn must:
  // 1) Generate all ai Player ships'
  // positions randomly (in the form of the 
  // positionArrayObject). This involves:
  // i)   start with the carrier.
  // generate a random coord r in a square
  // defined by corner coords [2,2], [9,2], [9,9] and [2,9]
  // (to keep the vessels away from the edge). 
  // ii)  generate a random alignment 
  // var that will have value 0 for vertical
  // or 1 for horizontal.
  // iii) make a carrier by looking at values of r and 
  // the random alignment var
  // iv) Then do the same for the rest of the ships
  // in turn, making sure that each new one does 
  // not cross an existing one.
  // This fn returns object positionArrObj, which 
  // looks like this:
  // {
  // ['carrier', [2,3], [2,4], [2,5], [2,6], [2,7]],
  // ...
  // ['patrolBoat', [9,3], [9,4]]
  // }
  // :


  var generateShipCoords = function generateShipCoords() {
    // Don't need a var for a carrier
    // as it's the first ship that code
    // makes:
    var battleshipArray = [];
    var subArray = [];
    var destroyerArray = [];
    var patrolBoatArray = []; // Make the carrier first. 
    // makePosArray returns an array such as:
    // [[2,3], [2,4], [2,5], [2,6], [2,7]). 
    // Puts the new ship in positionArrayobj:

    positionArrObj.carrier = makePosArray(5, 5); // Make battleship, check if it crosses 
    // path of the carrier that code has just made.
    // If yes, make again. Repeat until code 
    // generates a non-crossing battleship.
    // Fn willCross returns true if ships cross,
    // false if not. do-while loop below stops on
    // false.
    // Before each do-while loop toggle var orientn
    // so that code makes the ships go vet-horiz-vert-etc:

    toggleOrientn();

    do {
      battleshipArray = makePosArray(7, 3);
    } while (willCross(battleshipArray, positionArrObj)); // Now add battleshipArray to positionArrObj:


    positionArrObj.battleship = battleshipArray; // Repeat the same process for the sub, destroyer and patrolBoat:

    toggleOrientn();

    do {
      subArray = makePosArray(7, 3);
    } while (willCross(subArray, positionArrObj));

    positionArrObj.sub = subArray; // destroyer:

    toggleOrientn();

    do {
      destroyerArray = makePosArray(7, 3);
    } while (willCross(destroyerArray, positionArrObj));

    positionArrObj.destroyer = destroyerArray; // patrolBoat:

    toggleOrientn();

    do {
      patrolBoatArray = makePosArray(7, 2);
    } while (willCross(patrolBoatArray, positionArrObj));

    positionArrObj.patrolBoat = patrolBoatArray;
    /*
    // positionArrObj now looks like this:
    {
      carrier: [ [1,1], [1,2], [1,3], [1,4], [1,5]],
      ...
      ...
      ...
      patrolBoat: [[9,1], [9,2]]
    }
    */
    // console.log(`inside Player fn generateShipCoords. positionArrObj is:`)
    // console.table(`${positionArrObj}`)

    return positionArrObj;
  }; // end generateShipCoords
  //---
  // NOTE: this is not equivalent to the utility module's
  // fn doesCross!!! Hence KEEP THIS HERE!!!!!
  // Now the willCross function, which
  // checks whether a ship crosses
  // a ship that code has already made.
  // Code calls this fn from fn 
  // generateShipCoords (four times) as 
  // code makes a new ship.
  // This fn returns true (meaning the 
  // the ship in question crosses one that 
  // already exists) or false (menaing that
  // all the coords ofthe ship in question are  
  // unique to the ship).
  // This fn takes two args:
  // i)   the ship array
  // ii)  the positionArray object.  
  // This fn looks at each coord 
  // in shipArray and checks whether 
  // it already exists in the other shipArray
  // arrays in positionArrObj (which would
  // show that the ship in question
  // cuts across the path of at least one 
  // of the other ships already generated).
  // This fn returns either true, meaning 'does cross',
  // or false, for 'does not cross'.
  // NOTE: thisis not equivalent to the utility module's
  // fn doesCross!!! 


  var willCross = function willCross(shipArray, positionArrObj) {
    var matchTally = 0;
    var numbOfCoords = 0; // numbOfCoords is just the number of ship coords 
    // in the position array obj. So if that obj 
    // contains a carrier and a sub then 
    // numbOfCoords = 3 + 5 = 8

    Object.keys(positionArrObj).forEach(function (myKey) {
      numbOfCoords = numbOfCoords + positionArrObj[myKey].length - 1;
    }); // shipArray is, egfor a sub/destroyer/battship, [ [3,3], [4,3], [5,3] ]
    // positionArrObj changes as code makes the ships but
    // has this form:
    // {
    // carrier: [ [4,3], [4,4], [4,5], etc],
    // destroyer: [[6,2], [6,3], [6,4]]
    // }
    //  Find out how many times the coords in shipArray 
    // DO NOT match any of the coords in positionArrObj

    Object.keys(positionArrObj).forEach(function (myKey) {
      for (var i = 0; i < shipArray.length; i++) {
        for (var j = 0; j < positionArrObj[myKey].length; j++) {
          if (positionArrObj[myKey][j][0] === shipArray[i][0] && positionArrObj[myKey][j][1] === shipArray[i][1]) {
            matchTally += 1;
          }
        } // end inner for

      } // end outer for

    });

    if (matchTally > 0) {
      // there is a match,
      // ie ships cross at at least one square:
      return true;
    } else {
      return false;
    }
  }; // end fn willCross
  //-----
  // Now an fn to generate the position array
  // for each ship for the ai player.
  // Fn generateShipCoords calls this fn,
  // which takes three args:
  // i)   shipNum, a number that 
  // represents how many squares in from 
  // the edge (vertically or horizontally)
  // beyond which there would not be 
  // enough room for a ship:
  // ship       shipNum
  // carrier       5
  // battleship    7
  // sub           7
  // destroyer     7
  // patrolBoat    8 
  // ii)   shipLeng, the length of the 
  // ship, eg 5 for a carrier
  // this fn returns, eg,
  // [[3,4], [4,4], [5,4] ]


  var makePosArray = function makePosArray(shipNum, shipLeng) {
    var tempShipPosArray = [];
    var temp = [];
    var x = generateNum(2, 9); // random integer between 2 and 9 inclusive

    var y = generateNum(2, 9); // NOTE: generateShipCoords() will toggle the value of 
    // var (orientn) just before it calls this fn (which 
    // it does five times). This 
    // ensures code alternates ships it makes
    // from vert to horiz to vert to horiz, etc
    // (although one problem is that there are always 
    // three vert ships and two horiz, never the 
    // other way around!):

    var or = orientn; // rand int-- 0 for vert or 1 for horiz

    var r = [];
    r.push(x);
    r.push(y); // r is now a random coords array, eg, [5,8]. This
    // will be the start square from which this fn will 
    // make the coords for the rest of the squares of 
    // the ship
    // or === 0 means vertical
    // or === 1 means horiz
    // For vertical ship:

    if (or === 0) {
      // vertical
      if (r[1] > shipNum) {
        // y is, eg, 9 for patrolBoat (shipNum 8) 
        // go upwards:
        for (var i = 0; i < shipLeng; i++) {
          temp.push(r[0]);
          temp.push(r[1] - i);
          tempShipPosArray.push(temp);
          temp = [];
        } // end for


        tempShipPosArray = tempShipPosArray.reverse(); // tempShipPosArray now contains the coords
        // of the ship and has value [[2,2], [2,3]] for example.
      } else {
        // y is, eg, 2-8 for patrolBoat (shipNum 8)
        // go downwards:
        for (var _i2 = 0; _i2 < shipLeng; _i2++) {
          temp.push(r[0]);
          temp.push(r[1] + _i2);
          tempShipPosArray.push(temp);
          temp = [];
        } // end for

      } // end if-else

    } // end if or === 0 (ie ship is vertical)
    // For horiz vessel:


    if (or === 1) {
      // horiz
      if (r[0] > shipNum) {
        // go left:
        for (var _i3 = 0; _i3 < shipLeng; _i3++) {
          temp.push(r[0] - _i3);
          temp.push(r[1]);
          tempShipPosArray.push(temp);
          temp = [];
        } // end for


        tempShipPosArray = tempShipPosArray.reverse();
      } else {
        // go right:
        for (var _i4 = 0; _i4 < shipLeng; _i4++) {
          temp.push(r[0] + _i4);
          temp.push(r[1]);
          tempShipPosArray.push(temp);
          temp = [];
        } // end for

      } // end if-else

    } // end if horiz


    return tempShipPosArray;
  }; // end makePosArray
  //----
  // A function that the gameModule 
  // (the game loop) calls when the
  // turn changes. 
  // This fn must:
  // 1) If the message rxed is 'humanToPlay'
  // do nothing
  // 2) If the message rxed is 'aiToPlay'
  // generate a pair of random shotCoords
  // and pass them to pickSquare, which will
  // call publicRxAttack of the human 
  // Gameboard obj. 


  var rxTurn = function rxTurn(message) {
    var shotCoords = [];

    if (message === 'humanToPlay') {// do nothing
    } // end if


    if (message === 'aiToPlay') {
      shotCoords = makeUnusedAttCoords();
      shotCoords.push('ai'); // Now shotCoords looks like, eg, this: 
      // [6,2,'ai']
      // Now call pickSquare:

      pickSquare(shotCoords); // Now add the shot to the array of 
      // used shots:

      shotsPrevFired.push(shotCoords);
    } // end if

  }; //----
  //----
  // Fn to respond to 
  // i)   human click of square in 
  // the AI's grid, when this fn 
  // rxes a shot coords array from 
  // the DOMinteractionModule, which 
  // rxes it from an event listener
  // for the square clicked on.
  // ii)  AI's choice of shot, 
  // when this fn rxes a shotCoords
  // array from makeUnusedAttCoords()
  // (inside fn rxTurn).
  // shotCoords looks like this:
  // [9,4,'human'] or [3,7,'ai']
  // This fn sends shotCoords to 
  // the ai/human Gameboard object's 
  // fn publicRxAttack: 


  var pickSquare = function pickSquare(shotCoords) {
    // First remove 'human' or 'ai':
    var shotCoordsShort = [];
    shotCoordsShort.push(shotCoords[0]);
    shotCoordsShort.push(shotCoords[1]); // If this player is human send 
    // shotCoordsShort to the ai 
    // Gameboard obj

    if (shotCoords[2] = 'human') {
      aiGb.publicRxAttack(shotCoordsShort);
    } // If this player is ai send 
    // shotCoordsShort to the human 
    // Gameboard obj        


    if (shotCoords[2] = 'ai') {
      humanGb.publicRxAttack(shotCoordsShort);
    }
  }; //-----
  // Fn to add to the array of all shots fired
  // (array shotsPrevFired).
  // The fn that generates random shots will 
  // call this fn to determine whether the 
  // coords have already been used.
  // This fn returns:
  // 1) true if shot added (ie shot has not 
  // previously been used)
  // 2) false if shot NOT added, ie AI has
  //  previously generated this shot:


  var addToShotsFired = function addToShotsFired(shotCoords) {
    // If the shot has not been used before
    // add it to the array:
    if (!shotUsed(shotCoords)) {
      shotsPrevFired.push(shotCoords);
      return true;
    } else {
      return false;
    }
  }; //----
  // Fn to determine whether the randomly 
  // generated shot coords have previously
  // been generated. This fn returns
  // 1) true -- meaning the shot was previously
  //    generated by the AI
  // 2) false -- meaning the shot is new


  var shotUsed = function shotUsed(shotCoords) {
    // If no shots were previously fired
    // get out of this function, returning 
    // false:
    if (shotsPrevFired.length === 0) {
      return false;
    } // ...otherwise:                                   


    for (var i = 0; i < shotsPrevFired.length; i++) {
      var nthShot = shotsPrevFired[i]; // If the shot randomly generated matches
      // a shot previously fired return true:  

      if (nthShot[0] === shotCoords[0] && nthShot[1] === shotCoords[1]) {
        return true;
      }
    } // end for
    // If shotCoords represents a shot not previously
    // generated by the AI:


    return false;
  }; // end shotUsed
  //----
  // Fn to randomly generate a coord
  // (between limits).
  // Code for the AI player only will use 
  // this function to:
  // i)   generate the coords of a shot
  // ii)  generate the coords of a point 
  //      that is a beginning for the 
  //      fn that places ai ships
  // NOTE: Math.random() returns a number from 
  // 0 (inclusive) to 1 (exclusive) to 
  // 16 decimal places:


  var genAttCoords = function genAttCoords(limOne, limTwo) {
    var attCoords = [];
    var x = generateNum(limOne, limTwo);
    var y = generateNum(limOne, limTwo);
    attCoords.push(x);
    attCoords.push(y);
    return attCoords;
  }; // end generateAttCoord
  //-----
  // Taken from the internets:
  // An fn to generate a random number 
  // between two inclusive limits
  // limOne and limTwo (so when 
  // limOne = 23 and limTwo = 57 
  // this fn generates a random 
  // number from 23-57 inclusive)


  var generateNum = function generateNum(limOne, limTwo) {
    var z; // Taken from the internets:

    z = Math.floor(Math.random() * (limTwo - limOne + 1)) + limOne;
    return z;
  }; // end generateNum    
  //----
  // An fn to make numb unique numbers between
  // limLow and limHigh (inclusive). This fn
  // returns and unsorted array. This fn first 
  // checks to make sure that 
  // numb < limHigh-limLow (as you can't ask for,
  // say, six unique numbers if there are only 
  // five possible):


  var makeNumbNumbs = function makeNumbNumbs(limLow, limHigh, numb) {
    if (limHigh - limLow + 1 < numb) {
      console.log("Third argument is too small.");
    } else {
      var myArr = [];
      var rand;

      for (var i = 0; i < numb; i++) {
        do {
          rand = generateNum(limLow, limHigh);
        } while (myArr.includes(rand));

        myArr.push(rand);
      }

      return myArr;
    }
  }; // fn to sort an array of numbers in order:


  var sortArrOfNumbs = function sortArrOfNumbs(arr) {
    var arrToReturn = [];
    arrToReturn = arr.sort(function (a, b) {
      a - b;
    });
    return arrToReturn;
  }; // end fn sortArrOfNumbs
  //----
  // A fn to repeatedly call genAttCoords
  // until it produces shotCoords that has 
  // not previously been used


  var makeUnusedAttCoords = function makeUnusedAttCoords() {
    var i = 0;
    var result;
    var generatedShot = [];

    do {
      i++; // used to ensure loop doesn't go on forever

      generatedShot = genAttCoords();
      result = shotUsed(generatedShot); // returns false when shot has NOT been used already
    } while (result === true && i < 101);

    return generatedShot;
  }; //-----------------
  // Public methods
  //----


  var publicResetArrsAndObjs = function publicResetArrsAndObjs() {
    resetArrsAndObjs();
  }; // end publicResetArrsAndObjs
  //----
  // gameModule calls this fn when theturn passes 
  // to the ai:


  var publicAIshotGenerator = function publicAIshotGenerator() {
    aiShotGenerator();
  }; // gameModule calls this fn:


  var publicGenerateShipCoords = function publicGenerateShipCoords() {
    return generateShipCoords();
  }; //-----
  // The gameModule calls this fn 
  // at the beginning of the game
  // (in response to the user's 
  // click of the Start button).
  // This fn must:
  // 1) Call the PLayer obj fn 
  // that gets the ai Player to 
  // place its ships randomly
  // 2) Let the gameLoop know 
  // that the human can now place
  // his/her ships and begin play


  var publicStart = function publicStart() {
    start();
  }; //----
  // An fn that rxes either from the DOMinteractionModule
  // or the ai the coords of a shot the user just fired.
  // shotCoords looks like this:
  // [3,8,'human'] or [9,6,'ai']
  // This fn ultimately sends the shot coords
  // to the AI/human Gameboard object. 
  // PASSED UNIT TEST


  var publicPickSquare = function publicPickSquare(shotCoords) {
    return pickSquare(shotCoords);
  }; // An fn that the gameModule calls
  // to let the human or ai know that
  // the turn is passing to that entity:


  var publicRxTurn = function publicRxTurn() {
    rxTurn();
  }; // PASSED unit test
  // Strictly speaking this is unnecessary 
  // because only code within the Player 
  // obj calls addToShotsFired! 


  var publicAddToShotsFired = function publicAddToShotsFired(shotCoords) {
    return addToShotsFired(shotCoords);
  }; //-----
  // DON"T KNOW HOW TO TEST but
  // it is working!!!


  var publicGenAttCoords = function publicGenAttCoords() {
    return genAttCoords();
  }; // end publicGenAttCoord


  return {
    name: name,
    publicGenAttCoords: publicGenAttCoords,
    publicAddToShotsFired: publicAddToShotsFired,
    publicPickSquare: publicPickSquare,
    publicRxTurn: publicRxTurn,
    publicGenerateShipCoords: publicGenerateShipCoords,
    publicAIshotGenerator: publicAIshotGenerator,
    publicResetArrsAndObjs: publicResetArrsAndObjs
  };
}; // end Player factory function
// NOTE: if you miss the semicolon at the end of the Player fn above
// JS thinks the following IIFE is an argument to the Player fn
// and you get an error message that reads 
// "Uncaught TypeError: (intermediate value)(intermediate value)... 
// *repeated many times*" -- Make a note of this!!!
// An IIFE to make the instances of Player:


(function () {
  humanPlayer = Player('human', 'human');
  aiPlayer = Player('ai', 'ai');
})(); // NOTE: NEVER forget the semicolon at the end of an IIFE!!
// EXPORTS:                                        




/***/ }),

/***/ "./src/shipModule.js":
/*!***************************!*\
  !*** ./src/shipModule.js ***!
  \***************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Ship": () => (/* binding */ Ship)
/* harmony export */ });
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// gameModule.js is the entry file for webpack
// vars:
// The Ship factory function:
var Ship = function Ship(typeArg) {
  var length;
  var type = typeArg; // eg 'destroyer' or 'carrier'

  var hitArray; // eg ['OK', 'OK', 'OK']
  // where the array represents squares going top to bottom
  // for vertical ships or left to right for horizontal ones.
  // A var that shows the state of the 
  // ship. Code changes value to true if 
  // ship is sunk, false otherwise

  var sunk = false; // isSunk() will read numOfHits:

  var numOfHits = 0; // positionArray will contain coords of the ship. 
  // The DOMinteractionModule sets the value of positionArray 
  // (when the player selects the position of the boat)
  // by calling the Ship object's fn publicSetPosArray.

  var positionArray = [];
  /*
    Use these positionArrays for different boats in testing:
    patrol: [[3,2,'OK'],[3,3,'OK']],
    destroyer: [[3,5,'OK'],[4,5,'OK'],[5,5,'OK']],
    sub: [[2,9,'OK'],[3,9,'OK'],[4,9,'OK']],
    battle: [[8,7,'OK'],[8,8,'OK'],[8,9,'OK']],
    carrier: [[6,3,'OK'],[7,3,'OK'],[8,3,'OK'],[9,3,'OK'],[10,3,'OK']]
  */
  // Some logic to initialise hitArray and length:

  switch (typeArg) {
    case 'patrolBoat':
      hitArray = ['OK', 'OK'];
      length = 2;
      break;

    case 'destroyer':
      hitArray = ['OK', 'OK', 'OK'];
      length = 3;
      break;

    case 'sub':
      hitArray = ['OK', 'OK', 'OK'];
      length = 3;
      break;

    case 'battleship':
      hitArray = ['OK', 'OK', 'OK'];
      length = 3;
      break;

    case 'carrier':
      hitArray = ['OK', 'OK', 'OK', 'OK', 'OK'];
      length = 5;
      break;
  } /// end switch
  //-----
  // PRIVATE METHODS
  // An fn to return value of property type:


  var getType = function getType() {
    return type;
  }; //----
  // Getter and setter for the position array:
  // coordsArr is, eg, [[1,3], [1,4]]


  var newSetPosArr = function newSetPosArr(coordsArr) {
    for (var i = 0; i < coordsArr.length; i++) {
      positionArray.push(coordsArr[i]);
    }
  }; // end newSetPosArr                      


  var getPosArr = function getPosArr() {
    return positionArray;
  }; //-----
  // NOT USED:
  // This fn rxs the coords of the squares of the ship
  // after the user has chosen the ship's position.
  // arrArg is, eg, [ [7, 8, 'OK'], [7, 9, 'OK'] ]
  // for a vertical patrol boat.


  var initPosArr = function initPosArr(arrArg) {
    positionArray = arrArg.slice(0); // return positionArray
  }; // initPosArr 
  //-----
  //----
  // isSunk is a private method. It returns
  // sunk, whose value is true or false.
  // This fn has to look at the positionArray
  // and determine whether every member is
  // 'hit' (rather than 'OK'):


  var isSunk = function isSunk() {
    return sunk; // true if ship is sunk, false otherwise
  }; // end isSunk            
  //----
  // GeTter and setter for var sunk:


  var getSunk = function getSunk() {
    return sunk;
  };

  var setSunk = function setSunk(veracity) {
    sunk = veracity;
    return sunk;
  }; //-----
  // The fn to determine whether the shot fired 
  // hit a ship or not


  var hit = function hit(shotCoords) {
    var index;
    var hitTally = 0; // Determine the index of shotCoords
    // in positionArray:

    for (var i = 0; i < positionArray.length; i++) {
      if (positionArray[i][0] === shotCoords[0] && positionArray[i][1] === shotCoords[1]) {
        index = i;
      } // end if

    } // end for
    // Now change hitArray:


    setHitArray(index); // Now if all elements of hitArray are 'hit'
    // (rather than at least being 'OK'), set 
    // var sunk:

    for (var _i = 0; _i < hitArray.length; _i++) {
      if (hitArray[_i] === 'hit') {
        hitTally += 1;
      } // end if

    } // end for
    // console.log(`In Ship's fn hit. hitArray is ${hitArray}`)
    // If all members of hitArray are 'hit' 
    // set value of global var sunk
    // to true


    if (hitTally === hitArray.length) {
      sunk = true;
    } // end if
    // console.log(`In Ship's fn hit. sunk is: ${sunk}`)

  }; // end fn hit
  //----
  // Getter and setter for the hit array:


  var getHitArray = function getHitArray() {
    return hitArray;
  };

  var setHitArray = function setHitArray(numb) {
    hitArray[numb] = 'hit';
  }; //----
  // PUBLIC METHODS
  // Getter and setter for the hit array:


  var publicGetHitArray = function publicGetHitArray() {
    return getHitArray();
  };

  var publicSetHitArray = function publicSetHitArray(numb) {
    setHitArray(numb);
  }; //------
  // An fn to return the bvalue of property type:


  var publicGetType = function publicGetType() {
    return getType();
  }; //----
  // an fn to set positionArray.
  // arr i, eg [[1,2], [1,3]]:


  var publicSetPosArray = function publicSetPosArray(arr) {
    newSetPosArr(arr);
  }; //----
  // An fn that sets positionArray 


  var publicNewSetPosArr = function publicNewSetPosArr(coordsArr) {
    newSetPosArr(coordsArr);
  }; //----
  // PASSED unit test


  var publicGetSunk = function publicGetSunk() {
    return getSunk();
  }; // PASSED unit test


  var publicSetSunk = function publicSetSunk(veracity) {
    return setSunk(veracity);
  }; //-----
  // PASSED unit test 
  // shotCoords is, eg, [3, 2]


  var publicHit = function publicHit(shotCoords) {
    hit(shotCoords);
  }; //-----
  // PASSED unit test
  // This fn return true or false after looking at
  // postionArray to determine whether a ship has 
  // sunk or not


  var publicIsSunk = function publicIsSunk() {
    return isSunk();
  }; // end fn
  //-----
  // PASSED unit test 


  var publicGetPosArr = function publicGetPosArr() {
    return getPosArr();
  }; // end fn
  // PASSED unit test
  // arrArg is, eg  [[1,3], [1,4]]
  // for a vertical patrol boat. The Gameboard 
  // object calls this fn after the user has 
  // selected where to put the boat.


  var publicInitPosArr = function publicInitPosArr(arrArg) {
    initPosArr(arrArg); // return (initPosArr(arrArg))
  }; // end fn
  // the following is object destructuring:


  return _defineProperty({
    publicHit: publicHit,
    publicIsSunk: publicIsSunk,
    publicGetPosArr: publicGetPosArr,
    publicInitPosArr: publicInitPosArr,
    publicGetSunk: publicGetSunk,
    publicSetSunk: publicSetSunk,
    publicSetPosArray: publicSetPosArray,
    publicGetType: publicGetType,
    publicGetHitArray: publicGetHitArray,
    publicSetHitArray: publicSetHitArray
  }, "publicHit", publicHit);
}; // end Ship factory
//----------------------------------

/*
// An IIFE to make xxxxx
(function(){

}
)();
  */
// EXPORTS
//========




/***/ }),

/***/ "./src/utilityModule.js":
/*!******************************!*\
  !*** ./src/utilityModule.js ***!
  \******************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "doesCross": () => (/* binding */ doesCross),
/* harmony export */   "findCommonSquares": () => (/* binding */ findCommonSquares),
/* harmony export */   "generateNum": () => (/* binding */ generateNum),
/* harmony export */   "isArrInArray": () => (/* binding */ isArrInArray),
/* harmony export */   "makeEndSquaresArray": () => (/* binding */ makeEndSquaresArray),
/* harmony export */   "makeSideSquares": () => (/* binding */ makeSideSquares),
/* harmony export */   "sleep": () => (/* binding */ sleep)
/* harmony export */ });
// An fn taken from the internets.
// This fn makes code wait for 
// an amount of time in milliseconds
// passed in as the argumnet.
function sleep(milliseconds) {
  var date = Date.now();
  var currentDate = null;

  do {
    currentDate = Date.now();
  } while (currentDate - date < milliseconds);
} // An fn that checks whether a small array 
// of one coords (eg [3,4])
// passed in (as first arg) exists in a big
// array of lotsof coords passed in (as second arg).
// This fn returns true if yes, false 
// otherwise ():


var isArrInArray = function isArrInArray(smallArr, bigArr) {
  for (var i = 0; i < bigArr.length; i++) {
    if (bigArr[i][0] === smallArr[0] && bigArr[i][1] === smallArr[1]) {
      return true;
    } // end if

  } // end for 


  return false;
}; // end isArrInArray
//------
// An fn that finds the common 
// members of two arrays and returns them.
// This fn takes two args, the two arrays.
// This fn returns an array containing the 
// common squares:


var findCommonSquares = function findCommonSquares(arrOne, arrTwo) {
  var arrToReturn = [];

  for (var i = 0; i < arrOne.length; i++) {
    for (var j = 0; j < arrTwo.length; j++) {
      if (arrOne[i][0] === arrTwo[j][0] && arrOne[i][1] === arrTwo[j][1]) {
        arrToReturn.push(arrTwo[j]);
      }
    } // end inner for

  } // end outer for


  return arrToReturn;
}; //end findCommonSquares
//------
// WORKS
// An fn to generate an array of 
// coord arrays that represent
// the up to four possible places for  
// end squares when a user selects 
// a given start square for a given vessel. 
// Code also uses this fn to generate 
// the up to four squares around a given square
// (in which case the 1st arg is 'patrolBoat').
// This fn removes those coords that are outside 
// the grid and returns the remainder in an array.
// This fn takes 3 args:
// i)    a string for type of boat 
//       (eg 'sub')
// ii)   a coords array for start
//       point


var makeEndSquaresArray = function makeEndSquaresArray(boat, startSq) {
  var possEndSqsArray = [];
  var x;
  var y;
  var diff;

  switch (boat) {
    case 'patrolBoat':
      diff = 1;
      break;

    case 'sub':
      diff = 2;
      break;

    case 'destroyer':
      diff = 2;
      break;

    case 'battleship':
      diff = 2;
      break;

    case 'carrier':
      diff = 4;
      break;

    default:
      break;
  } // The following four vars are coords arrays 
  // for the four possible end squares of a boat,
  // going top, right, bottom, left


  var topSq = [];
  var rhtSq = [];
  var botSq = [];
  var lftSq = [];
  var squares = [topSq, rhtSq, botSq, lftSq]; // Make the four possible end square coords.
  // Note that sets of coords could end up being
  // outside the grid. Code will soon remove them:

  x = startSq[0];
  y = startSq[1]; // top:

  topSq.push(x);
  topSq.push(y - diff); // right:

  rhtSq.push(x + diff);
  rhtSq.push(y); // bottom:

  botSq.push(x);
  botSq.push(y + diff); // left:

  lftSq.push(x - diff);
  lftSq.push(y); // Remove from array squares those members that 
  // are outside the grid:

  for (var i = 0; i < squares.length; i++) {
    if (squares[i][0] > 0 && squares[i][0] < 11 && squares[i][1] > 0 && squares[i][1] < 11) {
      possEndSqsArray.push(squares[i]);
    } // end if

  } // end for


  return possEndSqsArray;
}; // end makeEndSquaresArray 
//----
// Now the doesCross function, which
// checks whether a ship crosses
// a ship that code has already made.
// Code calls this fn from fn 
// xxxxxxx
// This fn returns true (meaning the 
// the ship in question crosses one that 
// already exists) or false (meaning that
// all the coords of the ship in question are  
// unique to the ship).
// This fn takes two args:
// i)   the array of coords of a potential
//      ship
// ii)  the array that contains the
//      coords of ships code has already made
//      (humanShipUsedCoords).  
// This fn looks at each coord 
// in shipArray and checks whether 
// it already exists in the other shipArray
// arrays in xxxxx (which would
// show that the ship in question
// cuts across the path of at least one 
// of the other ships already generated).


var doesCross = function doesCross(shipArray, usedArray) {
  // If there are no coords in usedArray
  // (which will be the case if the user has 
  // not yet made any ships) there's no point
  // in doing anything; simply return false:
  if (usedArray.length === 0) {
    return false;
  } // end if
  // shipArray is, eg, [ [3,3], [4,3], [5,3] ].
  // usedArray changes as code makes the ships but
  // has this form:
  // [ [4,3], [4,4], [4,5], [6,2], [6,3], [6,4] ]


  for (var i = 0; i < shipArray.length; i++) {
    for (var j = 0; j < usedArray.length; j++) {
      if (shipArray[i][0] === usedArray[j][0] && shipArray[i][1] === usedArray[j][1]) {
        return true;
      } // end if

    } // end inner for

  } // end outer for 


  return false;
}; // end fn doesCross
//---
// Taken from the internets:
// An fn to generate a random number 
// between two inclusive limits
// limOne and limTwo (so when 
// limOne = 23 and limTwo = 57 
// this fn generates a random 
// number from 23-57 inclusive)


var generateNum = function generateNum(limOne, limTwo) {
  var z; // Taken from the internets:

  z = Math.floor(Math.random() * (limTwo - limOne + 1)) + limOne;
  return z;
}; // end generateNum    
//-----  
// An fn to generate two squares 
// either side of a pair of adjacent squares
// that you feed in to the fn as args (NOTE: 
// this fn is slightly different to fn 
// makeSidePtsRtnOneRand of playerModule).
// playerModule's aiShotGenerator calls 
// this fn. This fn takes three args:
// a) a square
// b) another square inline and adjacent
// to the square in a)
// c) the array of previous shots.
// This fn looks for the two squares 
// on either side of those given in
// the args and filters out either if the ai
// has already shot at it. Hence this fn 
// can return any one of these:
// i)   an array containing one square
// ii)  and array containing two squares
// iii) null (the case when there is no side 
//      square that ai has not already shot 
//      at)
// The args can be in any order (ie need not 
// be, eg, L-R or top-bottom).


var makeSideSquares = function makeSideSquares(squareOne, squareTwo, prevShotsArr) {
  var sqOne = [];
  var sqTwo = [];

  if (squareOne[1] === squareTwo[1]) {
    // the points are horiz
    // The following if statements allows 
    // the args to be in any order (eg 
    // code can feed this fn args in either 
    // of the following orders and get the
    // same result each time:
    // ([1,3], [2,3])  or   ([2,3], [1,3]))
    if (squareOne[0] > squareTwo[0]) {
      // eg squareOne is [3,2] and squareTwo is [2,2] 
      sqTwo.push(squareOne[0]);
      sqTwo.push(squareOne[1]);
      sqOne.push(squareTwo[0]);
      sqOne.push(squareTwo[1]);
    } else {
      sqTwo.push(squareTwo[0]);
      sqTwo.push(squareTwo[1]);
      sqOne.push(squareOne[0]);
      sqOne.push(squareOne[1]);
    } // end if-else

  } // end if points are horiz


  if (squareOne[0] === squareTwo[0]) {
    // the points are vert
    // Determine whether 
    if (squareOne[1] > squareTwo[1]) {
      // eg squareOne is [3,2] and squareTwo is [3,1].
      // See explanation above for the following
      // code:
      sqTwo.push(squareOne[0]);
      sqTwo.push(squareOne[1]);
      sqOne.push(squareTwo[0]);
      sqOne.push(squareTwo[1]);
    } else {
      sqTwo.push(squareTwo[0]);
      sqTwo.push(squareTwo[1]);
      sqOne.push(squareOne[0]);
      sqOne.push(squareOne[1]);
    } // end if-else

  } // end if points are horiz


  var sideSqLeft = [];
  var sideSqRight = [];
  var sideSqTop = [];
  var sideSqBottom = [];
  var sideSquares = []; // the array to return.
  // will end up looking like this:  
  // [ [4,3],  [4,6] ]

  if (sqOne[1] === sqTwo[1]) {
    // the points are horiz
    sideSqLeft.push(sqOne[0] - 1);
    sideSqLeft.push(sqOne[1]);
    sideSqRight.push(sqTwo[0] + 1);
    sideSqRight.push(sqTwo[1]);

    if ( // This is where this fn filters out those
    // side squares that would be outside the grid:
    // COMMENTED OUT FOR TESTING

    /*
    sideSqLeft[0]>0 && sideSqLeft[0]<11 &&
    sideSqLeft[1]>0 && sideSqLeft[1]<11 &&
    */
    // END COMMENTED OUT FOR TESTING
    // ADDED FOR TESTING
    sideSqLeft[0] > 0 && sideSqLeft[0] < 6 && sideSqLeft[1] > 0 && sideSqLeft[1] < 6 && // END ADDED FOR TESTING
    !isArrInArray(sideSqLeft, prevShotsArr)) {
      sideSquares.push(sideSqLeft);
    }

    if ( // COMMENTED OUT FOR TESTING

    /*
    sideSqRight[0]>0 && sideSqRight[0]<11 &&
    sideSqRight[1]>0 && sideSqRight[1]<11 &&
    */
    // END COMMENTED OUT FOR TESTING
    // ADDED FOR TESTING
    sideSqRight[0] > 0 && sideSqRight[0] < 6 && sideSqRight[1] > 0 && sideSqRight[1] < 6 && // END ADDED FOR TESTING
    !isArrInArray(sideSqRight, prevShotsArr)) {
      sideSquares.push(sideSqRight);
    }
  } // end outer if


  if (sqOne[0] === sqTwo[0]) {
    // the points are vertical
    sideSqTop.push(sqOne[0]);
    sideSqTop.push(sqOne[1] - 1);
    sideSqBottom.push(sqTwo[0]);
    sideSqBottom.push(sqTwo[1] + 1);

    if ( // Again filtering out those side squares 
    // outside the grid:
    // 
    // COMMENTED OUT FOR TESTING

    /*
    sideSqTop[0]>0 && sideSqTop[0]<11 &&
    sideSqTop[1]>0 && sideSqTop[1]<11 &&
    */
    // END COMMENTED OUT FOR TESTING
    // ADDED FOR TESTING
    sideSqTop[0] > 0 && sideSqTop[0] < 6 && sideSqTop[1] > 0 && sideSqTop[1] < 6 && // END ADDED FOR TESTING
    !isArrInArray(sideSqTop, prevShotsArr)) {
      sideSquares.push(sideSqTop);
    }

    if ( // COMMENTED OUT FOR TESTING

    /*
    sideSqBottom[0]>0 && sideSqBottom[0]<11 &&
    sideSqBottom[1]>0 && sideSqBottom[1]<11 &&
    */
    // END COMMENTED OUT FOR TESTING
    // ADDED FOR TESTING
    sideSqBottom[0] > 0 && sideSqBottom[0] < 6 && sideSqBottom[1] > 0 && sideSqBottom[1] < 6 && // END ADDED FOR TESTING
    !isArrInArray(sideSqBottom, prevShotsArr)) {
      sideSquares.push(sideSqBottom);
    }
  } // end outer if


  if (sideSquares.length === 0) {
    return null;
  } else {
    return sideSquares;
  }
}; // end makeSideSquares




/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			if (cachedModule.error !== undefined) throw cachedModule.error;
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		try {
/******/ 			var execOptions = { id: moduleId, module: module, factory: __webpack_modules__[moduleId], require: __webpack_require__ };
/******/ 			__webpack_require__.i.forEach(function(handler) { handler(execOptions); });
/******/ 			module = execOptions.module;
/******/ 			execOptions.factory.call(module.exports, module, module.exports, execOptions.require);
/******/ 		} catch(e) {
/******/ 			module.error = e;
/******/ 			throw e;
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = __webpack_module_cache__;
/******/ 	
/******/ 	// expose the module execution interceptor
/******/ 	__webpack_require__.i = [];
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript update chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference all chunks
/******/ 		__webpack_require__.hu = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + "." + __webpack_require__.h() + ".hot-update.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get update manifest filename */
/******/ 	(() => {
/******/ 		__webpack_require__.hmrF = () => ("main." + __webpack_require__.h() + ".hot-update.json");
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/getFullHash */
/******/ 	(() => {
/******/ 		__webpack_require__.h = () => ("f4209e53bb27325f7ac4")
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "webpack-demo:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			;
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hot module replacement */
/******/ 	(() => {
/******/ 		var currentModuleData = {};
/******/ 		var installedModules = __webpack_require__.c;
/******/ 		
/******/ 		// module and require creation
/******/ 		var currentChildModule;
/******/ 		var currentParents = [];
/******/ 		
/******/ 		// status
/******/ 		var registeredStatusHandlers = [];
/******/ 		var currentStatus = "idle";
/******/ 		
/******/ 		// while downloading
/******/ 		var blockingPromises = 0;
/******/ 		var blockingPromisesWaiting = [];
/******/ 		
/******/ 		// The update info
/******/ 		var currentUpdateApplyHandlers;
/******/ 		var queuedInvalidatedModules;
/******/ 		
/******/ 		// eslint-disable-next-line no-unused-vars
/******/ 		__webpack_require__.hmrD = currentModuleData;
/******/ 		
/******/ 		__webpack_require__.i.push(function (options) {
/******/ 			var module = options.module;
/******/ 			var require = createRequire(options.require, options.id);
/******/ 			module.hot = createModuleHotObject(options.id, module);
/******/ 			module.parents = currentParents;
/******/ 			module.children = [];
/******/ 			currentParents = [];
/******/ 			options.require = require;
/******/ 		});
/******/ 		
/******/ 		__webpack_require__.hmrC = {};
/******/ 		__webpack_require__.hmrI = {};
/******/ 		
/******/ 		function createRequire(require, moduleId) {
/******/ 			var me = installedModules[moduleId];
/******/ 			if (!me) return require;
/******/ 			var fn = function (request) {
/******/ 				if (me.hot.active) {
/******/ 					if (installedModules[request]) {
/******/ 						var parents = installedModules[request].parents;
/******/ 						if (parents.indexOf(moduleId) === -1) {
/******/ 							parents.push(moduleId);
/******/ 						}
/******/ 					} else {
/******/ 						currentParents = [moduleId];
/******/ 						currentChildModule = request;
/******/ 					}
/******/ 					if (me.children.indexOf(request) === -1) {
/******/ 						me.children.push(request);
/******/ 					}
/******/ 				} else {
/******/ 					console.warn(
/******/ 						"[HMR] unexpected require(" +
/******/ 							request +
/******/ 							") from disposed module " +
/******/ 							moduleId
/******/ 					);
/******/ 					currentParents = [];
/******/ 				}
/******/ 				return require(request);
/******/ 			};
/******/ 			var createPropertyDescriptor = function (name) {
/******/ 				return {
/******/ 					configurable: true,
/******/ 					enumerable: true,
/******/ 					get: function () {
/******/ 						return require[name];
/******/ 					},
/******/ 					set: function (value) {
/******/ 						require[name] = value;
/******/ 					}
/******/ 				};
/******/ 			};
/******/ 			for (var name in require) {
/******/ 				if (Object.prototype.hasOwnProperty.call(require, name) && name !== "e") {
/******/ 					Object.defineProperty(fn, name, createPropertyDescriptor(name));
/******/ 				}
/******/ 			}
/******/ 			fn.e = function (chunkId) {
/******/ 				return trackBlockingPromise(require.e(chunkId));
/******/ 			};
/******/ 			return fn;
/******/ 		}
/******/ 		
/******/ 		function createModuleHotObject(moduleId, me) {
/******/ 			var _main = currentChildModule !== moduleId;
/******/ 			var hot = {
/******/ 				// private stuff
/******/ 				_acceptedDependencies: {},
/******/ 				_acceptedErrorHandlers: {},
/******/ 				_declinedDependencies: {},
/******/ 				_selfAccepted: false,
/******/ 				_selfDeclined: false,
/******/ 				_selfInvalidated: false,
/******/ 				_disposeHandlers: [],
/******/ 				_main: _main,
/******/ 				_requireSelf: function () {
/******/ 					currentParents = me.parents.slice();
/******/ 					currentChildModule = _main ? undefined : moduleId;
/******/ 					__webpack_require__(moduleId);
/******/ 				},
/******/ 		
/******/ 				// Module API
/******/ 				active: true,
/******/ 				accept: function (dep, callback, errorHandler) {
/******/ 					if (dep === undefined) hot._selfAccepted = true;
/******/ 					else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 					else if (typeof dep === "object" && dep !== null) {
/******/ 						for (var i = 0; i < dep.length; i++) {
/******/ 							hot._acceptedDependencies[dep[i]] = callback || function () {};
/******/ 							hot._acceptedErrorHandlers[dep[i]] = errorHandler;
/******/ 						}
/******/ 					} else {
/******/ 						hot._acceptedDependencies[dep] = callback || function () {};
/******/ 						hot._acceptedErrorHandlers[dep] = errorHandler;
/******/ 					}
/******/ 				},
/******/ 				decline: function (dep) {
/******/ 					if (dep === undefined) hot._selfDeclined = true;
/******/ 					else if (typeof dep === "object" && dep !== null)
/******/ 						for (var i = 0; i < dep.length; i++)
/******/ 							hot._declinedDependencies[dep[i]] = true;
/******/ 					else hot._declinedDependencies[dep] = true;
/******/ 				},
/******/ 				dispose: function (callback) {
/******/ 					hot._disposeHandlers.push(callback);
/******/ 				},
/******/ 				addDisposeHandler: function (callback) {
/******/ 					hot._disposeHandlers.push(callback);
/******/ 				},
/******/ 				removeDisposeHandler: function (callback) {
/******/ 					var idx = hot._disposeHandlers.indexOf(callback);
/******/ 					if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 				},
/******/ 				invalidate: function () {
/******/ 					this._selfInvalidated = true;
/******/ 					switch (currentStatus) {
/******/ 						case "idle":
/******/ 							currentUpdateApplyHandlers = [];
/******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 								__webpack_require__.hmrI[key](
/******/ 									moduleId,
/******/ 									currentUpdateApplyHandlers
/******/ 								);
/******/ 							});
/******/ 							setStatus("ready");
/******/ 							break;
/******/ 						case "ready":
/******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 								__webpack_require__.hmrI[key](
/******/ 									moduleId,
/******/ 									currentUpdateApplyHandlers
/******/ 								);
/******/ 							});
/******/ 							break;
/******/ 						case "prepare":
/******/ 						case "check":
/******/ 						case "dispose":
/******/ 						case "apply":
/******/ 							(queuedInvalidatedModules = queuedInvalidatedModules || []).push(
/******/ 								moduleId
/******/ 							);
/******/ 							break;
/******/ 						default:
/******/ 							// ignore requests in error states
/******/ 							break;
/******/ 					}
/******/ 				},
/******/ 		
/******/ 				// Management API
/******/ 				check: hotCheck,
/******/ 				apply: hotApply,
/******/ 				status: function (l) {
/******/ 					if (!l) return currentStatus;
/******/ 					registeredStatusHandlers.push(l);
/******/ 				},
/******/ 				addStatusHandler: function (l) {
/******/ 					registeredStatusHandlers.push(l);
/******/ 				},
/******/ 				removeStatusHandler: function (l) {
/******/ 					var idx = registeredStatusHandlers.indexOf(l);
/******/ 					if (idx >= 0) registeredStatusHandlers.splice(idx, 1);
/******/ 				},
/******/ 		
/******/ 				//inherit from previous dispose call
/******/ 				data: currentModuleData[moduleId]
/******/ 			};
/******/ 			currentChildModule = undefined;
/******/ 			return hot;
/******/ 		}
/******/ 		
/******/ 		function setStatus(newStatus) {
/******/ 			currentStatus = newStatus;
/******/ 			var results = [];
/******/ 		
/******/ 			for (var i = 0; i < registeredStatusHandlers.length; i++)
/******/ 				results[i] = registeredStatusHandlers[i].call(null, newStatus);
/******/ 		
/******/ 			return Promise.all(results);
/******/ 		}
/******/ 		
/******/ 		function unblock() {
/******/ 			if (--blockingPromises === 0) {
/******/ 				setStatus("ready").then(function () {
/******/ 					if (blockingPromises === 0) {
/******/ 						var list = blockingPromisesWaiting;
/******/ 						blockingPromisesWaiting = [];
/******/ 						for (var i = 0; i < list.length; i++) {
/******/ 							list[i]();
/******/ 						}
/******/ 					}
/******/ 				});
/******/ 			}
/******/ 		}
/******/ 		
/******/ 		function trackBlockingPromise(promise) {
/******/ 			switch (currentStatus) {
/******/ 				case "ready":
/******/ 					setStatus("prepare");
/******/ 				/* fallthrough */
/******/ 				case "prepare":
/******/ 					blockingPromises++;
/******/ 					promise.then(unblock, unblock);
/******/ 					return promise;
/******/ 				default:
/******/ 					return promise;
/******/ 			}
/******/ 		}
/******/ 		
/******/ 		function waitForBlockingPromises(fn) {
/******/ 			if (blockingPromises === 0) return fn();
/******/ 			return new Promise(function (resolve) {
/******/ 				blockingPromisesWaiting.push(function () {
/******/ 					resolve(fn());
/******/ 				});
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		function hotCheck(applyOnUpdate) {
/******/ 			if (currentStatus !== "idle") {
/******/ 				throw new Error("check() is only allowed in idle status");
/******/ 			}
/******/ 			return setStatus("check")
/******/ 				.then(__webpack_require__.hmrM)
/******/ 				.then(function (update) {
/******/ 					if (!update) {
/******/ 						return setStatus(applyInvalidatedModules() ? "ready" : "idle").then(
/******/ 							function () {
/******/ 								return null;
/******/ 							}
/******/ 						);
/******/ 					}
/******/ 		
/******/ 					return setStatus("prepare").then(function () {
/******/ 						var updatedModules = [];
/******/ 						currentUpdateApplyHandlers = [];
/******/ 		
/******/ 						return Promise.all(
/******/ 							Object.keys(__webpack_require__.hmrC).reduce(function (
/******/ 								promises,
/******/ 								key
/******/ 							) {
/******/ 								__webpack_require__.hmrC[key](
/******/ 									update.c,
/******/ 									update.r,
/******/ 									update.m,
/******/ 									promises,
/******/ 									currentUpdateApplyHandlers,
/******/ 									updatedModules
/******/ 								);
/******/ 								return promises;
/******/ 							},
/******/ 							[])
/******/ 						).then(function () {
/******/ 							return waitForBlockingPromises(function () {
/******/ 								if (applyOnUpdate) {
/******/ 									return internalApply(applyOnUpdate);
/******/ 								} else {
/******/ 									return setStatus("ready").then(function () {
/******/ 										return updatedModules;
/******/ 									});
/******/ 								}
/******/ 							});
/******/ 						});
/******/ 					});
/******/ 				});
/******/ 		}
/******/ 		
/******/ 		function hotApply(options) {
/******/ 			if (currentStatus !== "ready") {
/******/ 				return Promise.resolve().then(function () {
/******/ 					throw new Error(
/******/ 						"apply() is only allowed in ready status (state: " +
/******/ 							currentStatus +
/******/ 							")"
/******/ 					);
/******/ 				});
/******/ 			}
/******/ 			return internalApply(options);
/******/ 		}
/******/ 		
/******/ 		function internalApply(options) {
/******/ 			options = options || {};
/******/ 		
/******/ 			applyInvalidatedModules();
/******/ 		
/******/ 			var results = currentUpdateApplyHandlers.map(function (handler) {
/******/ 				return handler(options);
/******/ 			});
/******/ 			currentUpdateApplyHandlers = undefined;
/******/ 		
/******/ 			var errors = results
/******/ 				.map(function (r) {
/******/ 					return r.error;
/******/ 				})
/******/ 				.filter(Boolean);
/******/ 		
/******/ 			if (errors.length > 0) {
/******/ 				return setStatus("abort").then(function () {
/******/ 					throw errors[0];
/******/ 				});
/******/ 			}
/******/ 		
/******/ 			// Now in "dispose" phase
/******/ 			var disposePromise = setStatus("dispose");
/******/ 		
/******/ 			results.forEach(function (result) {
/******/ 				if (result.dispose) result.dispose();
/******/ 			});
/******/ 		
/******/ 			// Now in "apply" phase
/******/ 			var applyPromise = setStatus("apply");
/******/ 		
/******/ 			var error;
/******/ 			var reportError = function (err) {
/******/ 				if (!error) error = err;
/******/ 			};
/******/ 		
/******/ 			var outdatedModules = [];
/******/ 			results.forEach(function (result) {
/******/ 				if (result.apply) {
/******/ 					var modules = result.apply(reportError);
/******/ 					if (modules) {
/******/ 						for (var i = 0; i < modules.length; i++) {
/******/ 							outdatedModules.push(modules[i]);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			});
/******/ 		
/******/ 			return Promise.all([disposePromise, applyPromise]).then(function () {
/******/ 				// handle errors in accept handlers and self accepted module load
/******/ 				if (error) {
/******/ 					return setStatus("fail").then(function () {
/******/ 						throw error;
/******/ 					});
/******/ 				}
/******/ 		
/******/ 				if (queuedInvalidatedModules) {
/******/ 					return internalApply(options).then(function (list) {
/******/ 						outdatedModules.forEach(function (moduleId) {
/******/ 							if (list.indexOf(moduleId) < 0) list.push(moduleId);
/******/ 						});
/******/ 						return list;
/******/ 					});
/******/ 				}
/******/ 		
/******/ 				return setStatus("idle").then(function () {
/******/ 					return outdatedModules;
/******/ 				});
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		function applyInvalidatedModules() {
/******/ 			if (queuedInvalidatedModules) {
/******/ 				if (!currentUpdateApplyHandlers) currentUpdateApplyHandlers = [];
/******/ 				Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 					queuedInvalidatedModules.forEach(function (moduleId) {
/******/ 						__webpack_require__.hmrI[key](
/******/ 							moduleId,
/******/ 							currentUpdateApplyHandlers
/******/ 						);
/******/ 					});
/******/ 				});
/******/ 				queuedInvalidatedModules = undefined;
/******/ 				return true;
/******/ 			}
/******/ 		}
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		__webpack_require__.p = "";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = __webpack_require__.hmrS_jsonp = __webpack_require__.hmrS_jsonp || {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		var currentUpdatedModulesList;
/******/ 		var waitingUpdateResolves = {};
/******/ 		function loadUpdateChunk(chunkId, updatedModulesList) {
/******/ 			currentUpdatedModulesList = updatedModulesList;
/******/ 			return new Promise((resolve, reject) => {
/******/ 				waitingUpdateResolves[chunkId] = resolve;
/******/ 				// start update chunk loading
/******/ 				var url = __webpack_require__.p + __webpack_require__.hu(chunkId);
/******/ 				// create error before stack unwound to get useful stacktrace later
/******/ 				var error = new Error();
/******/ 				var loadingEnded = (event) => {
/******/ 					if(waitingUpdateResolves[chunkId]) {
/******/ 						waitingUpdateResolves[chunkId] = undefined
/******/ 						var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 						var realSrc = event && event.target && event.target.src;
/******/ 						error.message = 'Loading hot update chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 						error.name = 'ChunkLoadError';
/******/ 						error.type = errorType;
/******/ 						error.request = realSrc;
/******/ 						reject(error);
/******/ 					}
/******/ 				};
/******/ 				__webpack_require__.l(url, loadingEnded);
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		self["webpackHotUpdatewebpack_demo"] = (chunkId, moreModules, runtime) => {
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					currentUpdate[moduleId] = moreModules[moduleId];
/******/ 					if(currentUpdatedModulesList) currentUpdatedModulesList.push(moduleId);
/******/ 				}
/******/ 			}
/******/ 			if(runtime) currentUpdateRuntime.push(runtime);
/******/ 			if(waitingUpdateResolves[chunkId]) {
/******/ 				waitingUpdateResolves[chunkId]();
/******/ 				waitingUpdateResolves[chunkId] = undefined;
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		var currentUpdateChunks;
/******/ 		var currentUpdate;
/******/ 		var currentUpdateRemovedChunks;
/******/ 		var currentUpdateRuntime;
/******/ 		function applyHandler(options) {
/******/ 			if (__webpack_require__.f) delete __webpack_require__.f.jsonpHmr;
/******/ 			currentUpdateChunks = undefined;
/******/ 			function getAffectedModuleEffects(updateModuleId) {
/******/ 				var outdatedModules = [updateModuleId];
/******/ 				var outdatedDependencies = {};
/******/ 		
/******/ 				var queue = outdatedModules.map(function (id) {
/******/ 					return {
/******/ 						chain: [id],
/******/ 						id: id
/******/ 					};
/******/ 				});
/******/ 				while (queue.length > 0) {
/******/ 					var queueItem = queue.pop();
/******/ 					var moduleId = queueItem.id;
/******/ 					var chain = queueItem.chain;
/******/ 					var module = __webpack_require__.c[moduleId];
/******/ 					if (
/******/ 						!module ||
/******/ 						(module.hot._selfAccepted && !module.hot._selfInvalidated)
/******/ 					)
/******/ 						continue;
/******/ 					if (module.hot._selfDeclined) {
/******/ 						return {
/******/ 							type: "self-declined",
/******/ 							chain: chain,
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					if (module.hot._main) {
/******/ 						return {
/******/ 							type: "unaccepted",
/******/ 							chain: chain,
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					for (var i = 0; i < module.parents.length; i++) {
/******/ 						var parentId = module.parents[i];
/******/ 						var parent = __webpack_require__.c[parentId];
/******/ 						if (!parent) continue;
/******/ 						if (parent.hot._declinedDependencies[moduleId]) {
/******/ 							return {
/******/ 								type: "declined",
/******/ 								chain: chain.concat([parentId]),
/******/ 								moduleId: moduleId,
/******/ 								parentId: parentId
/******/ 							};
/******/ 						}
/******/ 						if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 						if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 							if (!outdatedDependencies[parentId])
/******/ 								outdatedDependencies[parentId] = [];
/******/ 							addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 							continue;
/******/ 						}
/******/ 						delete outdatedDependencies[parentId];
/******/ 						outdatedModules.push(parentId);
/******/ 						queue.push({
/******/ 							chain: chain.concat([parentId]),
/******/ 							id: parentId
/******/ 						});
/******/ 					}
/******/ 				}
/******/ 		
/******/ 				return {
/******/ 					type: "accepted",
/******/ 					moduleId: updateModuleId,
/******/ 					outdatedModules: outdatedModules,
/******/ 					outdatedDependencies: outdatedDependencies
/******/ 				};
/******/ 			}
/******/ 		
/******/ 			function addAllToSet(a, b) {
/******/ 				for (var i = 0; i < b.length; i++) {
/******/ 					var item = b[i];
/******/ 					if (a.indexOf(item) === -1) a.push(item);
/******/ 				}
/******/ 			}
/******/ 		
/******/ 			// at begin all updates modules are outdated
/******/ 			// the "outdated" status can propagate to parents if they don't accept the children
/******/ 			var outdatedDependencies = {};
/******/ 			var outdatedModules = [];
/******/ 			var appliedUpdate = {};
/******/ 		
/******/ 			var warnUnexpectedRequire = function warnUnexpectedRequire(module) {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" + module.id + ") to disposed module"
/******/ 				);
/******/ 			};
/******/ 		
/******/ 			for (var moduleId in currentUpdate) {
/******/ 				if (__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 					var newModuleFactory = currentUpdate[moduleId];
/******/ 					/** @type {TODO} */
/******/ 					var result;
/******/ 					if (newModuleFactory) {
/******/ 						result = getAffectedModuleEffects(moduleId);
/******/ 					} else {
/******/ 						result = {
/******/ 							type: "disposed",
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					/** @type {Error|false} */
/******/ 					var abortError = false;
/******/ 					var doApply = false;
/******/ 					var doDispose = false;
/******/ 					var chainInfo = "";
/******/ 					if (result.chain) {
/******/ 						chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 					}
/******/ 					switch (result.type) {
/******/ 						case "self-declined":
/******/ 							if (options.onDeclined) options.onDeclined(result);
/******/ 							if (!options.ignoreDeclined)
/******/ 								abortError = new Error(
/******/ 									"Aborted because of self decline: " +
/******/ 										result.moduleId +
/******/ 										chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "declined":
/******/ 							if (options.onDeclined) options.onDeclined(result);
/******/ 							if (!options.ignoreDeclined)
/******/ 								abortError = new Error(
/******/ 									"Aborted because of declined dependency: " +
/******/ 										result.moduleId +
/******/ 										" in " +
/******/ 										result.parentId +
/******/ 										chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "unaccepted":
/******/ 							if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 							if (!options.ignoreUnaccepted)
/******/ 								abortError = new Error(
/******/ 									"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "accepted":
/******/ 							if (options.onAccepted) options.onAccepted(result);
/******/ 							doApply = true;
/******/ 							break;
/******/ 						case "disposed":
/******/ 							if (options.onDisposed) options.onDisposed(result);
/******/ 							doDispose = true;
/******/ 							break;
/******/ 						default:
/******/ 							throw new Error("Unexception type " + result.type);
/******/ 					}
/******/ 					if (abortError) {
/******/ 						return {
/******/ 							error: abortError
/******/ 						};
/******/ 					}
/******/ 					if (doApply) {
/******/ 						appliedUpdate[moduleId] = newModuleFactory;
/******/ 						addAllToSet(outdatedModules, result.outdatedModules);
/******/ 						for (moduleId in result.outdatedDependencies) {
/******/ 							if (__webpack_require__.o(result.outdatedDependencies, moduleId)) {
/******/ 								if (!outdatedDependencies[moduleId])
/******/ 									outdatedDependencies[moduleId] = [];
/******/ 								addAllToSet(
/******/ 									outdatedDependencies[moduleId],
/******/ 									result.outdatedDependencies[moduleId]
/******/ 								);
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 					if (doDispose) {
/******/ 						addAllToSet(outdatedModules, [result.moduleId]);
/******/ 						appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 			currentUpdate = undefined;
/******/ 		
/******/ 			// Store self accepted outdated modules to require them later by the module system
/******/ 			var outdatedSelfAcceptedModules = [];
/******/ 			for (var j = 0; j < outdatedModules.length; j++) {
/******/ 				var outdatedModuleId = outdatedModules[j];
/******/ 				var module = __webpack_require__.c[outdatedModuleId];
/******/ 				if (
/******/ 					module &&
/******/ 					(module.hot._selfAccepted || module.hot._main) &&
/******/ 					// removed self-accepted modules should not be required
/******/ 					appliedUpdate[outdatedModuleId] !== warnUnexpectedRequire &&
/******/ 					// when called invalidate self-accepting is not possible
/******/ 					!module.hot._selfInvalidated
/******/ 				) {
/******/ 					outdatedSelfAcceptedModules.push({
/******/ 						module: outdatedModuleId,
/******/ 						require: module.hot._requireSelf,
/******/ 						errorHandler: module.hot._selfAccepted
/******/ 					});
/******/ 				}
/******/ 			}
/******/ 		
/******/ 			var moduleOutdatedDependencies;
/******/ 		
/******/ 			return {
/******/ 				dispose: function () {
/******/ 					currentUpdateRemovedChunks.forEach(function (chunkId) {
/******/ 						delete installedChunks[chunkId];
/******/ 					});
/******/ 					currentUpdateRemovedChunks = undefined;
/******/ 		
/******/ 					var idx;
/******/ 					var queue = outdatedModules.slice();
/******/ 					while (queue.length > 0) {
/******/ 						var moduleId = queue.pop();
/******/ 						var module = __webpack_require__.c[moduleId];
/******/ 						if (!module) continue;
/******/ 		
/******/ 						var data = {};
/******/ 		
/******/ 						// Call dispose handlers
/******/ 						var disposeHandlers = module.hot._disposeHandlers;
/******/ 						for (j = 0; j < disposeHandlers.length; j++) {
/******/ 							disposeHandlers[j].call(null, data);
/******/ 						}
/******/ 						__webpack_require__.hmrD[moduleId] = data;
/******/ 		
/******/ 						// disable module (this disables requires from this module)
/******/ 						module.hot.active = false;
/******/ 		
/******/ 						// remove module from cache
/******/ 						delete __webpack_require__.c[moduleId];
/******/ 		
/******/ 						// when disposing there is no need to call dispose handler
/******/ 						delete outdatedDependencies[moduleId];
/******/ 		
/******/ 						// remove "parents" references from all children
/******/ 						for (j = 0; j < module.children.length; j++) {
/******/ 							var child = __webpack_require__.c[module.children[j]];
/******/ 							if (!child) continue;
/******/ 							idx = child.parents.indexOf(moduleId);
/******/ 							if (idx >= 0) {
/******/ 								child.parents.splice(idx, 1);
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// remove outdated dependency from module children
/******/ 					var dependency;
/******/ 					for (var outdatedModuleId in outdatedDependencies) {
/******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
/******/ 							module = __webpack_require__.c[outdatedModuleId];
/******/ 							if (module) {
/******/ 								moduleOutdatedDependencies =
/******/ 									outdatedDependencies[outdatedModuleId];
/******/ 								for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 									dependency = moduleOutdatedDependencies[j];
/******/ 									idx = module.children.indexOf(dependency);
/******/ 									if (idx >= 0) module.children.splice(idx, 1);
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				},
/******/ 				apply: function (reportError) {
/******/ 					// insert new code
/******/ 					for (var updateModuleId in appliedUpdate) {
/******/ 						if (__webpack_require__.o(appliedUpdate, updateModuleId)) {
/******/ 							__webpack_require__.m[updateModuleId] = appliedUpdate[updateModuleId];
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// run new runtime modules
/******/ 					for (var i = 0; i < currentUpdateRuntime.length; i++) {
/******/ 						currentUpdateRuntime[i](__webpack_require__);
/******/ 					}
/******/ 		
/******/ 					// call accept handlers
/******/ 					for (var outdatedModuleId in outdatedDependencies) {
/******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
/******/ 							var module = __webpack_require__.c[outdatedModuleId];
/******/ 							if (module) {
/******/ 								moduleOutdatedDependencies =
/******/ 									outdatedDependencies[outdatedModuleId];
/******/ 								var callbacks = [];
/******/ 								var errorHandlers = [];
/******/ 								var dependenciesForCallbacks = [];
/******/ 								for (var j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 									var dependency = moduleOutdatedDependencies[j];
/******/ 									var acceptCallback =
/******/ 										module.hot._acceptedDependencies[dependency];
/******/ 									var errorHandler =
/******/ 										module.hot._acceptedErrorHandlers[dependency];
/******/ 									if (acceptCallback) {
/******/ 										if (callbacks.indexOf(acceptCallback) !== -1) continue;
/******/ 										callbacks.push(acceptCallback);
/******/ 										errorHandlers.push(errorHandler);
/******/ 										dependenciesForCallbacks.push(dependency);
/******/ 									}
/******/ 								}
/******/ 								for (var k = 0; k < callbacks.length; k++) {
/******/ 									try {
/******/ 										callbacks[k].call(null, moduleOutdatedDependencies);
/******/ 									} catch (err) {
/******/ 										if (typeof errorHandlers[k] === "function") {
/******/ 											try {
/******/ 												errorHandlers[k](err, {
/******/ 													moduleId: outdatedModuleId,
/******/ 													dependencyId: dependenciesForCallbacks[k]
/******/ 												});
/******/ 											} catch (err2) {
/******/ 												if (options.onErrored) {
/******/ 													options.onErrored({
/******/ 														type: "accept-error-handler-errored",
/******/ 														moduleId: outdatedModuleId,
/******/ 														dependencyId: dependenciesForCallbacks[k],
/******/ 														error: err2,
/******/ 														originalError: err
/******/ 													});
/******/ 												}
/******/ 												if (!options.ignoreErrored) {
/******/ 													reportError(err2);
/******/ 													reportError(err);
/******/ 												}
/******/ 											}
/******/ 										} else {
/******/ 											if (options.onErrored) {
/******/ 												options.onErrored({
/******/ 													type: "accept-errored",
/******/ 													moduleId: outdatedModuleId,
/******/ 													dependencyId: dependenciesForCallbacks[k],
/******/ 													error: err
/******/ 												});
/******/ 											}
/******/ 											if (!options.ignoreErrored) {
/******/ 												reportError(err);
/******/ 											}
/******/ 										}
/******/ 									}
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// Load self accepted modules
/******/ 					for (var o = 0; o < outdatedSelfAcceptedModules.length; o++) {
/******/ 						var item = outdatedSelfAcceptedModules[o];
/******/ 						var moduleId = item.module;
/******/ 						try {
/******/ 							item.require(moduleId);
/******/ 						} catch (err) {
/******/ 							if (typeof item.errorHandler === "function") {
/******/ 								try {
/******/ 									item.errorHandler(err, {
/******/ 										moduleId: moduleId,
/******/ 										module: __webpack_require__.c[moduleId]
/******/ 									});
/******/ 								} catch (err2) {
/******/ 									if (options.onErrored) {
/******/ 										options.onErrored({
/******/ 											type: "self-accept-error-handler-errored",
/******/ 											moduleId: moduleId,
/******/ 											error: err2,
/******/ 											originalError: err
/******/ 										});
/******/ 									}
/******/ 									if (!options.ignoreErrored) {
/******/ 										reportError(err2);
/******/ 										reportError(err);
/******/ 									}
/******/ 								}
/******/ 							} else {
/******/ 								if (options.onErrored) {
/******/ 									options.onErrored({
/******/ 										type: "self-accept-errored",
/******/ 										moduleId: moduleId,
/******/ 										error: err
/******/ 									});
/******/ 								}
/******/ 								if (!options.ignoreErrored) {
/******/ 									reportError(err);
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					return outdatedModules;
/******/ 				}
/******/ 			};
/******/ 		}
/******/ 		__webpack_require__.hmrI.jsonp = function (moduleId, applyHandlers) {
/******/ 			if (!currentUpdate) {
/******/ 				currentUpdate = {};
/******/ 				currentUpdateRuntime = [];
/******/ 				currentUpdateRemovedChunks = [];
/******/ 				applyHandlers.push(applyHandler);
/******/ 			}
/******/ 			if (!__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 				currentUpdate[moduleId] = __webpack_require__.m[moduleId];
/******/ 			}
/******/ 		};
/******/ 		__webpack_require__.hmrC.jsonp = function (
/******/ 			chunkIds,
/******/ 			removedChunks,
/******/ 			removedModules,
/******/ 			promises,
/******/ 			applyHandlers,
/******/ 			updatedModulesList
/******/ 		) {
/******/ 			applyHandlers.push(applyHandler);
/******/ 			currentUpdateChunks = {};
/******/ 			currentUpdateRemovedChunks = removedChunks;
/******/ 			currentUpdate = removedModules.reduce(function (obj, key) {
/******/ 				obj[key] = false;
/******/ 				return obj;
/******/ 			}, {});
/******/ 			currentUpdateRuntime = [];
/******/ 			chunkIds.forEach(function (chunkId) {
/******/ 				if (
/******/ 					__webpack_require__.o(installedChunks, chunkId) &&
/******/ 					installedChunks[chunkId] !== undefined
/******/ 				) {
/******/ 					promises.push(loadUpdateChunk(chunkId, updatedModulesList));
/******/ 					currentUpdateChunks[chunkId] = true;
/******/ 				} else {
/******/ 					currentUpdateChunks[chunkId] = false;
/******/ 				}
/******/ 			});
/******/ 			if (__webpack_require__.f) {
/******/ 				__webpack_require__.f.jsonpHmr = function (chunkId, promises) {
/******/ 					if (
/******/ 						currentUpdateChunks &&
/******/ 						__webpack_require__.o(currentUpdateChunks, chunkId) &&
/******/ 						!currentUpdateChunks[chunkId]
/******/ 					) {
/******/ 						promises.push(loadUpdateChunk(chunkId));
/******/ 						currentUpdateChunks[chunkId] = true;
/******/ 					}
/******/ 				};
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.hmrM = () => {
/******/ 			if (typeof fetch === "undefined") throw new Error("No browser support: need fetch API");
/******/ 			return fetch(__webpack_require__.p + __webpack_require__.hmrF()).then((response) => {
/******/ 				if(response.status === 404) return; // no update available
/******/ 				if(!response.ok) throw new Error("Failed to fetch update manifest " + response.statusText);
/******/ 				return response.json();
/******/ 			});
/******/ 		};
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// module cache are used so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	__webpack_require__("./node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=0.0.0.0&port=8015&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true");
/******/ 	__webpack_require__("./node_modules/webpack/hot/dev-server.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/gameModule.js");
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,